
EXTI_atmega32_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000103c  2**0
                  ALLOC
  2 .stab         0000150c  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b4d  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_1>
   8:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
  74:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRA_REG = CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
    				   ,DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8d eb       	ldi	r24, 0xBD	; 189
  9a:	80 83       	st	Z, r24
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
  9c:	e1 e3       	ldi	r30, 0x31	; 49
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTA_REG = CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE
  a2:	eb e3       	ldi	r30, 0x3B	; 59
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
                         ,DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
  a8:	e8 e3       	ldi	r30, 0x38	; 56
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
  ae:	e5 e3       	ldi	r30, 0x35	; 53
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	8c e3       	ldi	r24, 0x3C	; 60
  b4:	80 83       	st	Z, r24
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
  b6:	e2 e3       	ldi	r30, 0x32	; 50
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	88 ee       	ldi	r24, 0xE8	; 232
  bc:	80 83       	st	Z, r24
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2e 97       	sbiw	r28, 0x0e	; 14
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	6b 83       	std	Y+3, r22	; 0x03
  dc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_u8SetPinDirection+0x26>
  e8:	0c c1       	rjmp	.+536    	; 0x302 <DIO_u8SetPinDirection+0x23e>
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	88 30       	cpi	r24, 0x08	; 8
  ee:	08 f0       	brcs	.+2      	; 0xf2 <DIO_u8SetPinDirection+0x2e>
  f0:	08 c1       	rjmp	.+528    	; 0x302 <DIO_u8SetPinDirection+0x23e>
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	88 23       	and	r24, r24
  f6:	21 f0       	breq	.+8      	; 0x100 <DIO_u8SetPinDirection+0x3c>
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	09 f0       	breq	.+2      	; 0x100 <DIO_u8SetPinDirection+0x3c>
  fe:	01 c1       	rjmp	.+514    	; 0x302 <DIO_u8SetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	3e 87       	std	Y+14, r19	; 0x0e
 108:	2d 87       	std	Y+13, r18	; 0x0d
 10a:	8d 85       	ldd	r24, Y+13	; 0x0d
 10c:	9e 85       	ldd	r25, Y+14	; 0x0e
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	09 f4       	brne	.+2      	; 0x116 <DIO_u8SetPinDirection+0x52>
 114:	4f c0       	rjmp	.+158    	; 0x1b4 <DIO_u8SetPinDirection+0xf0>
 116:	2d 85       	ldd	r18, Y+13	; 0x0d
 118:	3e 85       	ldd	r19, Y+14	; 0x0e
 11a:	22 30       	cpi	r18, 0x02	; 2
 11c:	31 05       	cpc	r19, r1
 11e:	2c f4       	brge	.+10     	; 0x12a <DIO_u8SetPinDirection+0x66>
 120:	8d 85       	ldd	r24, Y+13	; 0x0d
 122:	9e 85       	ldd	r25, Y+14	; 0x0e
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	71 f0       	breq	.+28     	; 0x144 <DIO_u8SetPinDirection+0x80>
 128:	ed c0       	rjmp	.+474    	; 0x304 <DIO_u8SetPinDirection+0x240>
 12a:	2d 85       	ldd	r18, Y+13	; 0x0d
 12c:	3e 85       	ldd	r19, Y+14	; 0x0e
 12e:	22 30       	cpi	r18, 0x02	; 2
 130:	31 05       	cpc	r19, r1
 132:	09 f4       	brne	.+2      	; 0x136 <DIO_u8SetPinDirection+0x72>
 134:	77 c0       	rjmp	.+238    	; 0x224 <DIO_u8SetPinDirection+0x160>
 136:	8d 85       	ldd	r24, Y+13	; 0x0d
 138:	9e 85       	ldd	r25, Y+14	; 0x0e
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	91 05       	cpc	r25, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_u8SetPinDirection+0x7e>
 140:	a9 c0       	rjmp	.+338    	; 0x294 <DIO_u8SetPinDirection+0x1d0>
 142:	e0 c0       	rjmp	.+448    	; 0x304 <DIO_u8SetPinDirection+0x240>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinDirection)
 144:	8c 81       	ldd	r24, Y+4	; 0x04
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	3c 87       	std	Y+12, r19	; 0x0c
 14c:	2b 87       	std	Y+11, r18	; 0x0b
 14e:	8b 85       	ldd	r24, Y+11	; 0x0b
 150:	9c 85       	ldd	r25, Y+12	; 0x0c
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	d1 f0       	breq	.+52     	; 0x18a <DIO_u8SetPinDirection+0xc6>
 156:	2b 85       	ldd	r18, Y+11	; 0x0b
 158:	3c 85       	ldd	r19, Y+12	; 0x0c
 15a:	21 30       	cpi	r18, 0x01	; 1
 15c:	31 05       	cpc	r19, r1
 15e:	09 f0       	breq	.+2      	; 0x162 <DIO_u8SetPinDirection+0x9e>
 160:	d1 c0       	rjmp	.+418    	; 0x304 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
 162:	a4 e3       	ldi	r26, 0x34	; 52
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e4 e3       	ldi	r30, 0x34	; 52
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	48 2f       	mov	r20, r24
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_u8SetPinDirection+0xbc>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_u8SetPinDirection+0xb8>
 184:	84 2b       	or	r24, r20
 186:	8c 93       	st	X, r24
 188:	bd c0       	rjmp	.+378    	; 0x304 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
 18a:	a4 e3       	ldi	r26, 0x34	; 52
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 e3       	ldi	r30, 0x34	; 52
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8SetPinDirection+0xe4>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8SetPinDirection+0xe0>
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	8c 93       	st	X, r24
 1b2:	a8 c0       	rjmp	.+336    	; 0x304 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	3a 87       	std	Y+10, r19	; 0x0a
 1bc:	29 87       	std	Y+9, r18	; 0x09
 1be:	89 85       	ldd	r24, Y+9	; 0x09
 1c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	d1 f0       	breq	.+52     	; 0x1fa <DIO_u8SetPinDirection+0x136>
 1c6:	29 85       	ldd	r18, Y+9	; 0x09
 1c8:	3a 85       	ldd	r19, Y+10	; 0x0a
 1ca:	21 30       	cpi	r18, 0x01	; 1
 1cc:	31 05       	cpc	r19, r1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <DIO_u8SetPinDirection+0x10e>
 1d0:	99 c0       	rjmp	.+306    	; 0x304 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
 1d2:	a7 e3       	ldi	r26, 0x37	; 55
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e7 e3       	ldi	r30, 0x37	; 55
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinDirection+0x12c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinDirection+0x128>
 1f4:	84 2b       	or	r24, r20
 1f6:	8c 93       	st	X, r24
 1f8:	85 c0       	rjmp	.+266    	; 0x304 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
 1fa:	a7 e3       	ldi	r26, 0x37	; 55
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e7 e3       	ldi	r30, 0x37	; 55
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_u8SetPinDirection+0x154>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_u8SetPinDirection+0x150>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8c 93       	st	X, r24
 222:	70 c0       	rjmp	.+224    	; 0x304 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	38 87       	std	Y+8, r19	; 0x08
 22c:	2f 83       	std	Y+7, r18	; 0x07
 22e:	8f 81       	ldd	r24, Y+7	; 0x07
 230:	98 85       	ldd	r25, Y+8	; 0x08
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	d1 f0       	breq	.+52     	; 0x26a <DIO_u8SetPinDirection+0x1a6>
 236:	2f 81       	ldd	r18, Y+7	; 0x07
 238:	38 85       	ldd	r19, Y+8	; 0x08
 23a:	21 30       	cpi	r18, 0x01	; 1
 23c:	31 05       	cpc	r19, r1
 23e:	09 f0       	breq	.+2      	; 0x242 <DIO_u8SetPinDirection+0x17e>
 240:	61 c0       	rjmp	.+194    	; 0x304 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
 242:	a4 e3       	ldi	r26, 0x34	; 52
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinDirection+0x19c>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinDirection+0x198>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	4d c0       	rjmp	.+154    	; 0x304 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
 26a:	a4 e3       	ldi	r26, 0x34	; 52
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e4 e3       	ldi	r30, 0x34	; 52
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinDirection+0x1c4>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinDirection+0x1c0>
 28c:	80 95       	com	r24
 28e:	84 23       	and	r24, r20
 290:	8c 93       	st	X, r24
 292:	38 c0       	rjmp	.+112    	; 0x304 <DIO_u8SetPinDirection+0x240>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	3e 83       	std	Y+6, r19	; 0x06
 29c:	2d 83       	std	Y+5, r18	; 0x05
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	c9 f0       	breq	.+50     	; 0x2d8 <DIO_u8SetPinDirection+0x214>
 2a6:	2d 81       	ldd	r18, Y+5	; 0x05
 2a8:	3e 81       	ldd	r19, Y+6	; 0x06
 2aa:	21 30       	cpi	r18, 0x01	; 1
 2ac:	31 05       	cpc	r19, r1
 2ae:	51 f5       	brne	.+84     	; 0x304 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
 2b0:	a1 e3       	ldi	r26, 0x31	; 49
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	e1 e3       	ldi	r30, 0x31	; 49
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	48 2f       	mov	r20, r24
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8SetPinDirection+0x20a>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8SetPinDirection+0x206>
 2d2:	84 2b       	or	r24, r20
 2d4:	8c 93       	st	X, r24
 2d6:	16 c0       	rjmp	.+44     	; 0x304 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
 2d8:	a1 e3       	ldi	r26, 0x31	; 49
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e1 e3       	ldi	r30, 0x31	; 49
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	48 2f       	mov	r20, r24
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 2e       	mov	r0, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8SetPinDirection+0x232>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8SetPinDirection+0x22e>
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	8c 93       	st	X, r24
 300:	01 c0       	rjmp	.+2      	; 0x304 <DIO_u8SetPinDirection+0x240>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 302:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 304:	89 81       	ldd	r24, Y+1	; 0x01
}
 306:	2e 96       	adiw	r28, 0x0e	; 14
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	08 95       	ret

00000318 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
 318:	df 93       	push	r29
 31a:	cf 93       	push	r28
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	2e 97       	sbiw	r28, 0x0e	; 14
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	8a 83       	std	Y+2, r24	; 0x02
 32e:	6b 83       	std	Y+3, r22	; 0x03
 330:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	08 f0       	brcs	.+2      	; 0x33e <DIO_u8SetPinValue+0x26>
 33c:	0c c1       	rjmp	.+536    	; 0x556 <__stack+0xf7>
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	08 f0       	brcs	.+2      	; 0x346 <DIO_u8SetPinValue+0x2e>
 344:	08 c1       	rjmp	.+528    	; 0x556 <__stack+0xf7>
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	21 f0       	breq	.+8      	; 0x354 <DIO_u8SetPinValue+0x3c>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	88 23       	and	r24, r24
 350:	09 f0       	breq	.+2      	; 0x354 <DIO_u8SetPinValue+0x3c>
 352:	01 c1       	rjmp	.+514    	; 0x556 <__stack+0xf7>
    {
        switch (Copy_u8PortId)
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	3e 87       	std	Y+14, r19	; 0x0e
 35c:	2d 87       	std	Y+13, r18	; 0x0d
 35e:	8d 85       	ldd	r24, Y+13	; 0x0d
 360:	9e 85       	ldd	r25, Y+14	; 0x0e
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 05       	cpc	r25, r1
 366:	09 f4       	brne	.+2      	; 0x36a <DIO_u8SetPinValue+0x52>
 368:	4f c0       	rjmp	.+158    	; 0x408 <DIO_u8SetPinValue+0xf0>
 36a:	2d 85       	ldd	r18, Y+13	; 0x0d
 36c:	3e 85       	ldd	r19, Y+14	; 0x0e
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	2c f4       	brge	.+10     	; 0x37e <DIO_u8SetPinValue+0x66>
 374:	8d 85       	ldd	r24, Y+13	; 0x0d
 376:	9e 85       	ldd	r25, Y+14	; 0x0e
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	71 f0       	breq	.+28     	; 0x398 <DIO_u8SetPinValue+0x80>
 37c:	ed c0       	rjmp	.+474    	; 0x558 <__stack+0xf9>
 37e:	2d 85       	ldd	r18, Y+13	; 0x0d
 380:	3e 85       	ldd	r19, Y+14	; 0x0e
 382:	22 30       	cpi	r18, 0x02	; 2
 384:	31 05       	cpc	r19, r1
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_u8SetPinValue+0x72>
 388:	77 c0       	rjmp	.+238    	; 0x478 <__stack+0x19>
 38a:	8d 85       	ldd	r24, Y+13	; 0x0d
 38c:	9e 85       	ldd	r25, Y+14	; 0x0e
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	91 05       	cpc	r25, r1
 392:	09 f4       	brne	.+2      	; 0x396 <DIO_u8SetPinValue+0x7e>
 394:	a9 c0       	rjmp	.+338    	; 0x4e8 <__stack+0x89>
 396:	e0 c0       	rjmp	.+448    	; 0x558 <__stack+0xf9>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinValue)
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	3c 87       	std	Y+12, r19	; 0x0c
 3a0:	2b 87       	std	Y+11, r18	; 0x0b
 3a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	d1 f0       	breq	.+52     	; 0x3de <DIO_u8SetPinValue+0xc6>
 3aa:	2b 85       	ldd	r18, Y+11	; 0x0b
 3ac:	3c 85       	ldd	r19, Y+12	; 0x0c
 3ae:	21 30       	cpi	r18, 0x01	; 1
 3b0:	31 05       	cpc	r19, r1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <DIO_u8SetPinValue+0x9e>
 3b4:	d1 c0       	rjmp	.+418    	; 0x558 <__stack+0xf9>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
 3b6:	ab e3       	ldi	r26, 0x3B	; 59
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	eb e3       	ldi	r30, 0x3B	; 59
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8SetPinValue+0xbc>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8SetPinValue+0xb8>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	bd c0       	rjmp	.+378    	; 0x558 <__stack+0xf9>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;  
 3de:	ab e3       	ldi	r26, 0x3B	; 59
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	eb e3       	ldi	r30, 0x3B	; 59
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8SetPinValue+0xe4>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8SetPinValue+0xe0>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
 406:	a8 c0       	rjmp	.+336    	; 0x558 <__stack+0xf9>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	3a 87       	std	Y+10, r19	; 0x0a
 410:	29 87       	std	Y+9, r18	; 0x09
 412:	89 85       	ldd	r24, Y+9	; 0x09
 414:	9a 85       	ldd	r25, Y+10	; 0x0a
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	d1 f0       	breq	.+52     	; 0x44e <DIO_u8SetPinValue+0x136>
 41a:	29 85       	ldd	r18, Y+9	; 0x09
 41c:	3a 85       	ldd	r19, Y+10	; 0x0a
 41e:	21 30       	cpi	r18, 0x01	; 1
 420:	31 05       	cpc	r19, r1
 422:	09 f0       	breq	.+2      	; 0x426 <DIO_u8SetPinValue+0x10e>
 424:	99 c0       	rjmp	.+306    	; 0x558 <__stack+0xf9>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
 426:	a8 e3       	ldi	r26, 0x38	; 56
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e8 e3       	ldi	r30, 0x38	; 56
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8SetPinValue+0x12c>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8SetPinValue+0x128>
 448:	84 2b       	or	r24, r20
 44a:	8c 93       	st	X, r24
 44c:	85 c0       	rjmp	.+266    	; 0x558 <__stack+0xf9>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
 44e:	a8 e3       	ldi	r26, 0x38	; 56
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e8 e3       	ldi	r30, 0x38	; 56
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	48 2f       	mov	r20, r24
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 2e       	mov	r0, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <__stack+0xd>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__stack+0x9>
 470:	80 95       	com	r24
 472:	84 23       	and	r24, r20
 474:	8c 93       	st	X, r24
 476:	70 c0       	rjmp	.+224    	; 0x558 <__stack+0xf9>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	38 87       	std	Y+8, r19	; 0x08
 480:	2f 83       	std	Y+7, r18	; 0x07
 482:	8f 81       	ldd	r24, Y+7	; 0x07
 484:	98 85       	ldd	r25, Y+8	; 0x08
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	d1 f0       	breq	.+52     	; 0x4be <__stack+0x5f>
 48a:	2f 81       	ldd	r18, Y+7	; 0x07
 48c:	38 85       	ldd	r19, Y+8	; 0x08
 48e:	21 30       	cpi	r18, 0x01	; 1
 490:	31 05       	cpc	r19, r1
 492:	09 f0       	breq	.+2      	; 0x496 <__stack+0x37>
 494:	61 c0       	rjmp	.+194    	; 0x558 <__stack+0xf9>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
 496:	a5 e3       	ldi	r26, 0x35	; 53
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e5 e3       	ldi	r30, 0x35	; 53
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__stack+0x55>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__stack+0x51>
 4b8:	84 2b       	or	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	4d c0       	rjmp	.+154    	; 0x558 <__stack+0xf9>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
 4be:	a5 e3       	ldi	r26, 0x35	; 53
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e5 e3       	ldi	r30, 0x35	; 53
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__stack+0x7d>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__stack+0x79>
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8c 93       	st	X, r24
 4e6:	38 c0       	rjmp	.+112    	; 0x558 <__stack+0xf9>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
 4e8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	3e 83       	std	Y+6, r19	; 0x06
 4f0:	2d 83       	std	Y+5, r18	; 0x05
 4f2:	8d 81       	ldd	r24, Y+5	; 0x05
 4f4:	9e 81       	ldd	r25, Y+6	; 0x06
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	c9 f0       	breq	.+50     	; 0x52c <__stack+0xcd>
 4fa:	2d 81       	ldd	r18, Y+5	; 0x05
 4fc:	3e 81       	ldd	r19, Y+6	; 0x06
 4fe:	21 30       	cpi	r18, 0x01	; 1
 500:	31 05       	cpc	r19, r1
 502:	51 f5       	brne	.+84     	; 0x558 <__stack+0xf9>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
 504:	a2 e3       	ldi	r26, 0x32	; 50
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	e2 e3       	ldi	r30, 0x32	; 50
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	48 2f       	mov	r20, r24
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	28 2f       	mov	r18, r24
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 2e       	mov	r0, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <__stack+0xc3>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <__stack+0xbf>
 526:	84 2b       	or	r24, r20
 528:	8c 93       	st	X, r24
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__stack+0xf9>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
 52c:	a2 e3       	ldi	r26, 0x32	; 50
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	e2 e3       	ldi	r30, 0x32	; 50
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	48 2f       	mov	r20, r24
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 2e       	mov	r0, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0xeb>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <__stack+0xe7>
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	8c 93       	st	X, r24
 554:	01 c0       	rjmp	.+2      	; 0x558 <__stack+0xf9>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 556:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 558:	89 81       	ldd	r24, Y+1	; 0x01
}
 55a:	2e 96       	adiw	r28, 0x0e	; 14
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <DIO_u8TogglePin>:

u8 DIO_u8TogglePin     (u8 Copy_u8PortId,u8 Copy_u8PinId)
{
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	00 d0       	rcall	.+0      	; 0x572 <DIO_u8TogglePin+0x6>
 572:	00 d0       	rcall	.+0      	; 0x574 <DIO_u8TogglePin+0x8>
 574:	0f 92       	push	r0
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	8a 83       	std	Y+2, r24	; 0x02
 57c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7))
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	08 f0       	brcs	.+2      	; 0x58a <DIO_u8TogglePin+0x1e>
 588:	73 c0       	rjmp	.+230    	; 0x670 <DIO_u8TogglePin+0x104>
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	88 30       	cpi	r24, 0x08	; 8
 58e:	08 f0       	brcs	.+2      	; 0x592 <DIO_u8TogglePin+0x26>
 590:	6f c0       	rjmp	.+222    	; 0x670 <DIO_u8TogglePin+0x104>
    {
        switch (Copy_u8PortId)
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	3d 83       	std	Y+5, r19	; 0x05
 59a:	2c 83       	std	Y+4, r18	; 0x04
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	91 05       	cpc	r25, r1
 5a4:	49 f1       	breq	.+82     	; 0x5f8 <DIO_u8TogglePin+0x8c>
 5a6:	2c 81       	ldd	r18, Y+4	; 0x04
 5a8:	3d 81       	ldd	r19, Y+5	; 0x05
 5aa:	22 30       	cpi	r18, 0x02	; 2
 5ac:	31 05       	cpc	r19, r1
 5ae:	2c f4       	brge	.+10     	; 0x5ba <DIO_u8TogglePin+0x4e>
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	9d 81       	ldd	r25, Y+5	; 0x05
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <DIO_u8TogglePin+0x64>
 5b8:	5c c0       	rjmp	.+184    	; 0x672 <DIO_u8TogglePin+0x106>
 5ba:	2c 81       	ldd	r18, Y+4	; 0x04
 5bc:	3d 81       	ldd	r19, Y+5	; 0x05
 5be:	22 30       	cpi	r18, 0x02	; 2
 5c0:	31 05       	cpc	r19, r1
 5c2:	71 f1       	breq	.+92     	; 0x620 <DIO_u8TogglePin+0xb4>
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04
 5c6:	9d 81       	ldd	r25, Y+5	; 0x05
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	91 05       	cpc	r25, r1
 5cc:	e9 f1       	breq	.+122    	; 0x648 <DIO_u8TogglePin+0xdc>
 5ce:	51 c0       	rjmp	.+162    	; 0x672 <DIO_u8TogglePin+0x106>
        {
        case DIO_u8_PORTA :TOG_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
 5d0:	ab e3       	ldi	r26, 0x3B	; 59
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	eb e3       	ldi	r30, 0x3B	; 59
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	48 2f       	mov	r20, r24
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 2e       	mov	r0, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_u8TogglePin+0x82>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	0a 94       	dec	r0
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_u8TogglePin+0x7e>
 5f2:	84 27       	eor	r24, r20
 5f4:	8c 93       	st	X, r24
 5f6:	3d c0       	rjmp	.+122    	; 0x672 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTB :TOG_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
 5f8:	a8 e3       	ldi	r26, 0x38	; 56
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e8 e3       	ldi	r30, 0x38	; 56
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 2e       	mov	r0, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8TogglePin+0xaa>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8TogglePin+0xa6>
 61a:	84 27       	eor	r24, r20
 61c:	8c 93       	st	X, r24
 61e:	29 c0       	rjmp	.+82     	; 0x672 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTC :TOG_BIT(DIO_PORTC_REG,Copy_u8PinId)   ; break;
 620:	a5 e3       	ldi	r26, 0x35	; 53
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e5 e3       	ldi	r30, 0x35	; 53
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	48 2f       	mov	r20, r24
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 2e       	mov	r0, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_u8TogglePin+0xd2>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_u8TogglePin+0xce>
 642:	84 27       	eor	r24, r20
 644:	8c 93       	st	X, r24
 646:	15 c0       	rjmp	.+42     	; 0x672 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTD :TOG_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
 648:	a2 e3       	ldi	r26, 0x32	; 50
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	e2 e3       	ldi	r30, 0x32	; 50
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	48 2f       	mov	r20, r24
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	28 2f       	mov	r18, r24
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 2e       	mov	r0, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_u8TogglePin+0xfa>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_u8TogglePin+0xf6>
 66a:	84 27       	eor	r24, r20
 66c:	8c 93       	st	X, r24
 66e:	01 c0       	rjmp	.+2      	; 0x672 <DIO_u8TogglePin+0x106>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 670:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 672:	89 81       	ldd	r24, Y+1	; 0x01
}
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	cf 91       	pop	r28
 680:	df 91       	pop	r29
 682:	08 95       	ret

00000684 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
 684:	df 93       	push	r29
 686:	cf 93       	push	r28
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	28 97       	sbiw	r28, 0x08	; 8
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
 698:	8b 83       	std	Y+3, r24	; 0x03
 69a:	6c 83       	std	Y+4, r22	; 0x04
 69c:	5e 83       	std	Y+6, r21	; 0x06
 69e:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	84 30       	cpi	r24, 0x04	; 4
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <DIO_u8GetPinValue+0x28>
 6aa:	9f c0       	rjmp	.+318    	; 0x7ea <DIO_u8GetPinValue+0x166>
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	88 30       	cpi	r24, 0x08	; 8
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <DIO_u8GetPinValue+0x30>
 6b2:	9b c0       	rjmp	.+310    	; 0x7ea <DIO_u8GetPinValue+0x166>
 6b4:	8d 81       	ldd	r24, Y+5	; 0x05
 6b6:	9e 81       	ldd	r25, Y+6	; 0x06
 6b8:	00 97       	sbiw	r24, 0x00	; 0
 6ba:	09 f4       	brne	.+2      	; 0x6be <DIO_u8GetPinValue+0x3a>
 6bc:	96 c0       	rjmp	.+300    	; 0x7ea <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	38 87       	std	Y+8, r19	; 0x08
 6c6:	2f 83       	std	Y+7, r18	; 0x07
 6c8:	4f 81       	ldd	r20, Y+7	; 0x07
 6ca:	58 85       	ldd	r21, Y+8	; 0x08
 6cc:	41 30       	cpi	r20, 0x01	; 1
 6ce:	51 05       	cpc	r21, r1
 6d0:	a9 f1       	breq	.+106    	; 0x73c <DIO_u8GetPinValue+0xb8>
 6d2:	8f 81       	ldd	r24, Y+7	; 0x07
 6d4:	98 85       	ldd	r25, Y+8	; 0x08
 6d6:	82 30       	cpi	r24, 0x02	; 2
 6d8:	91 05       	cpc	r25, r1
 6da:	34 f4       	brge	.+12     	; 0x6e8 <DIO_u8GetPinValue+0x64>
 6dc:	2f 81       	ldd	r18, Y+7	; 0x07
 6de:	38 85       	ldd	r19, Y+8	; 0x08
 6e0:	21 15       	cp	r18, r1
 6e2:	31 05       	cpc	r19, r1
 6e4:	71 f0       	breq	.+28     	; 0x702 <DIO_u8GetPinValue+0x7e>
 6e6:	82 c0       	rjmp	.+260    	; 0x7ec <DIO_u8GetPinValue+0x168>
 6e8:	4f 81       	ldd	r20, Y+7	; 0x07
 6ea:	58 85       	ldd	r21, Y+8	; 0x08
 6ec:	42 30       	cpi	r20, 0x02	; 2
 6ee:	51 05       	cpc	r21, r1
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <DIO_u8GetPinValue+0x70>
 6f2:	41 c0       	rjmp	.+130    	; 0x776 <DIO_u8GetPinValue+0xf2>
 6f4:	8f 81       	ldd	r24, Y+7	; 0x07
 6f6:	98 85       	ldd	r25, Y+8	; 0x08
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	91 05       	cpc	r25, r1
 6fc:	09 f4       	brne	.+2      	; 0x700 <DIO_u8GetPinValue+0x7c>
 6fe:	58 c0       	rjmp	.+176    	; 0x7b0 <DIO_u8GetPinValue+0x12c>
 700:	75 c0       	rjmp	.+234    	; 0x7ec <DIO_u8GetPinValue+0x168>
        {
            case DIO_u8_PORTA :
                Local_u8PinValue = GET_BIT(DIO_PINA_REG,Copy_u8PinId);
 702:	e9 e3       	ldi	r30, 0x39	; 57
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	8c 81       	ldd	r24, Y+4	; 0x04
 70e:	88 2f       	mov	r24, r24
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	a9 01       	movw	r20, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8GetPinValue+0x96>
 716:	55 95       	asr	r21
 718:	47 95       	ror	r20
 71a:	8a 95       	dec	r24
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8GetPinValue+0x92>
 71e:	ca 01       	movw	r24, r20
 720:	81 70       	andi	r24, 0x01	; 1
 722:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	29 f4       	brne	.+10     	; 0x734 <DIO_u8GetPinValue+0xb0>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 72a:	ed 81       	ldd	r30, Y+5	; 0x05
 72c:	fe 81       	ldd	r31, Y+6	; 0x06
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	80 83       	st	Z, r24
 732:	5c c0       	rjmp	.+184    	; 0x7ec <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 734:	ed 81       	ldd	r30, Y+5	; 0x05
 736:	fe 81       	ldd	r31, Y+6	; 0x06
 738:	10 82       	st	Z, r1
 73a:	58 c0       	rjmp	.+176    	; 0x7ec <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
 73c:	e6 e3       	ldi	r30, 0x36	; 54
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	28 2f       	mov	r18, r24
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	8c 81       	ldd	r24, Y+4	; 0x04
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a9 01       	movw	r20, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_u8GetPinValue+0xd0>
 750:	55 95       	asr	r21
 752:	47 95       	ror	r20
 754:	8a 95       	dec	r24
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_u8GetPinValue+0xcc>
 758:	ca 01       	movw	r24, r20
 75a:	81 70       	andi	r24, 0x01	; 1
 75c:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	29 f4       	brne	.+10     	; 0x76e <DIO_u8GetPinValue+0xea>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 764:	ed 81       	ldd	r30, Y+5	; 0x05
 766:	fe 81       	ldd	r31, Y+6	; 0x06
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 83       	st	Z, r24
 76c:	3f c0       	rjmp	.+126    	; 0x7ec <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 76e:	ed 81       	ldd	r30, Y+5	; 0x05
 770:	fe 81       	ldd	r31, Y+6	; 0x06
 772:	10 82       	st	Z, r1
 774:	3b c0       	rjmp	.+118    	; 0x7ec <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
 776:	e3 e3       	ldi	r30, 0x33	; 51
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	28 2f       	mov	r18, r24
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	8c 81       	ldd	r24, Y+4	; 0x04
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	a9 01       	movw	r20, r18
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_u8GetPinValue+0x10a>
 78a:	55 95       	asr	r21
 78c:	47 95       	ror	r20
 78e:	8a 95       	dec	r24
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_u8GetPinValue+0x106>
 792:	ca 01       	movw	r24, r20
 794:	81 70       	andi	r24, 0x01	; 1
 796:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	29 f4       	brne	.+10     	; 0x7a8 <DIO_u8GetPinValue+0x124>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 79e:	ed 81       	ldd	r30, Y+5	; 0x05
 7a0:	fe 81       	ldd	r31, Y+6	; 0x06
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	80 83       	st	Z, r24
 7a6:	22 c0       	rjmp	.+68     	; 0x7ec <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 7a8:	ed 81       	ldd	r30, Y+5	; 0x05
 7aa:	fe 81       	ldd	r31, Y+6	; 0x06
 7ac:	10 82       	st	Z, r1
 7ae:	1e c0       	rjmp	.+60     	; 0x7ec <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
 7b0:	e0 e3       	ldi	r30, 0x30	; 48
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	8c 81       	ldd	r24, Y+4	; 0x04
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a9 01       	movw	r20, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_u8GetPinValue+0x144>
 7c4:	55 95       	asr	r21
 7c6:	47 95       	ror	r20
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_u8GetPinValue+0x140>
 7cc:	ca 01       	movw	r24, r20
 7ce:	81 70       	andi	r24, 0x01	; 1
 7d0:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	81 30       	cpi	r24, 0x01	; 1
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <DIO_u8GetPinValue+0x15e>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 7d8:	ed 81       	ldd	r30, Y+5	; 0x05
 7da:	fe 81       	ldd	r31, Y+6	; 0x06
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	80 83       	st	Z, r24
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 7e2:	ed 81       	ldd	r30, Y+5	; 0x05
 7e4:	fe 81       	ldd	r31, Y+6	; 0x06
 7e6:	10 82       	st	Z, r1
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <DIO_u8GetPinValue+0x168>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 7ea:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
 7ee:	28 96       	adiw	r28, 0x08	; 8
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
 808:	2d 97       	sbiw	r28, 0x0d	; 13
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	84 30       	cpi	r24, 0x04	; 4
 820:	08 f0       	brcs	.+2      	; 0x824 <DIO_u8SetPortDirection+0x24>
 822:	84 c0       	rjmp	.+264    	; 0x92c <DIO_u8SetPortDirection+0x12c>
 824:	8b 81       	ldd	r24, Y+3	; 0x03
 826:	88 23       	and	r24, r24
 828:	21 f0       	breq	.+8      	; 0x832 <DIO_u8SetPortDirection+0x32>
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	09 f0       	breq	.+2      	; 0x832 <DIO_u8SetPortDirection+0x32>
 830:	7d c0       	rjmp	.+250    	; 0x92c <DIO_u8SetPortDirection+0x12c>
    {
        switch (Copy_u8PortId)
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	3d 87       	std	Y+13, r19	; 0x0d
 83a:	2c 87       	std	Y+12, r18	; 0x0c
 83c:	8c 85       	ldd	r24, Y+12	; 0x0c
 83e:	9d 85       	ldd	r25, Y+13	; 0x0d
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	91 05       	cpc	r25, r1
 844:	71 f1       	breq	.+92     	; 0x8a2 <DIO_u8SetPortDirection+0xa2>
 846:	2c 85       	ldd	r18, Y+12	; 0x0c
 848:	3d 85       	ldd	r19, Y+13	; 0x0d
 84a:	22 30       	cpi	r18, 0x02	; 2
 84c:	31 05       	cpc	r19, r1
 84e:	2c f4       	brge	.+10     	; 0x85a <DIO_u8SetPortDirection+0x5a>
 850:	8c 85       	ldd	r24, Y+12	; 0x0c
 852:	9d 85       	ldd	r25, Y+13	; 0x0d
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	69 f0       	breq	.+26     	; 0x872 <DIO_u8SetPortDirection+0x72>
 858:	6a c0       	rjmp	.+212    	; 0x92e <DIO_u8SetPortDirection+0x12e>
 85a:	2c 85       	ldd	r18, Y+12	; 0x0c
 85c:	3d 85       	ldd	r19, Y+13	; 0x0d
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	31 05       	cpc	r19, r1
 862:	b1 f1       	breq	.+108    	; 0x8d0 <DIO_u8SetPortDirection+0xd0>
 864:	8c 85       	ldd	r24, Y+12	; 0x0c
 866:	9d 85       	ldd	r25, Y+13	; 0x0d
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	91 05       	cpc	r25, r1
 86c:	09 f4       	brne	.+2      	; 0x870 <DIO_u8SetPortDirection+0x70>
 86e:	47 c0       	rjmp	.+142    	; 0x8fe <DIO_u8SetPortDirection+0xfe>
 870:	5e c0       	rjmp	.+188    	; 0x92e <DIO_u8SetPortDirection+0x12e>
        {
            case DIO_u8_PORTA : 
                switch (Copy_u8PortDirection)
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	28 2f       	mov	r18, r24
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	3b 87       	std	Y+11, r19	; 0x0b
 87a:	2a 87       	std	Y+10, r18	; 0x0a
 87c:	8a 85       	ldd	r24, Y+10	; 0x0a
 87e:	9b 85       	ldd	r25, Y+11	; 0x0b
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	59 f0       	breq	.+22     	; 0x89a <DIO_u8SetPortDirection+0x9a>
 884:	2a 85       	ldd	r18, Y+10	; 0x0a
 886:	3b 85       	ldd	r19, Y+11	; 0x0b
 888:	21 30       	cpi	r18, 0x01	; 1
 88a:	31 05       	cpc	r19, r1
 88c:	09 f0       	breq	.+2      	; 0x890 <DIO_u8SetPortDirection+0x90>
 88e:	4f c0       	rjmp	.+158    	; 0x92e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRA_REG =0xff; break;
 890:	ea e3       	ldi	r30, 0x3A	; 58
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	80 83       	st	Z, r24
 898:	4a c0       	rjmp	.+148    	; 0x92e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRA_REG =0x00; break;
 89a:	ea e3       	ldi	r30, 0x3A	; 58
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	10 82       	st	Z, r1
 8a0:	46 c0       	rjmp	.+140    	; 0x92e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	39 87       	std	Y+9, r19	; 0x09
 8aa:	28 87       	std	Y+8, r18	; 0x08
 8ac:	88 85       	ldd	r24, Y+8	; 0x08
 8ae:	99 85       	ldd	r25, Y+9	; 0x09
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	51 f0       	breq	.+20     	; 0x8c8 <DIO_u8SetPortDirection+0xc8>
 8b4:	28 85       	ldd	r18, Y+8	; 0x08
 8b6:	39 85       	ldd	r19, Y+9	; 0x09
 8b8:	21 30       	cpi	r18, 0x01	; 1
 8ba:	31 05       	cpc	r19, r1
 8bc:	c1 f5       	brne	.+112    	; 0x92e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
 8be:	e7 e3       	ldi	r30, 0x37	; 55
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	80 83       	st	Z, r24
 8c6:	33 c0       	rjmp	.+102    	; 0x92e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
 8c8:	e7 e3       	ldi	r30, 0x37	; 55
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	10 82       	st	Z, r1
 8ce:	2f c0       	rjmp	.+94     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
 8d0:	8b 81       	ldd	r24, Y+3	; 0x03
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	3f 83       	std	Y+7, r19	; 0x07
 8d8:	2e 83       	std	Y+6, r18	; 0x06
 8da:	8e 81       	ldd	r24, Y+6	; 0x06
 8dc:	9f 81       	ldd	r25, Y+7	; 0x07
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <DIO_u8SetPortDirection+0xf6>
 8e2:	2e 81       	ldd	r18, Y+6	; 0x06
 8e4:	3f 81       	ldd	r19, Y+7	; 0x07
 8e6:	21 30       	cpi	r18, 0x01	; 1
 8e8:	31 05       	cpc	r19, r1
 8ea:	09 f5       	brne	.+66     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
 8ec:	e4 e3       	ldi	r30, 0x34	; 52
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	80 83       	st	Z, r24
 8f4:	1c c0       	rjmp	.+56     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
 8f6:	e4 e3       	ldi	r30, 0x34	; 52
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	10 82       	st	Z, r1
 8fc:	18 c0       	rjmp	.+48     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	3d 83       	std	Y+5, r19	; 0x05
 906:	2c 83       	std	Y+4, r18	; 0x04
 908:	8c 81       	ldd	r24, Y+4	; 0x04
 90a:	9d 81       	ldd	r25, Y+5	; 0x05
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	51 f0       	breq	.+20     	; 0x924 <DIO_u8SetPortDirection+0x124>
 910:	2c 81       	ldd	r18, Y+4	; 0x04
 912:	3d 81       	ldd	r19, Y+5	; 0x05
 914:	21 30       	cpi	r18, 0x01	; 1
 916:	31 05       	cpc	r19, r1
 918:	51 f4       	brne	.+20     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
 91a:	e1 e3       	ldi	r30, 0x31	; 49
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	80 83       	st	Z, r24
 922:	05 c0       	rjmp	.+10     	; 0x92e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
 924:	e1 e3       	ldi	r30, 0x31	; 49
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	10 82       	st	Z, r1
 92a:	01 c0       	rjmp	.+2      	; 0x92e <DIO_u8SetPortDirection+0x12e>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 92c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 92e:	89 81       	ldd	r24, Y+1	; 0x01

}
 930:	2d 96       	adiw	r28, 0x0d	; 13
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	f8 94       	cli
 936:	de bf       	out	0x3e, r29	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	cd bf       	out	0x3d, r28	; 61
 93c:	cf 91       	pop	r28
 93e:	df 91       	pop	r29
 940:	08 95       	ret

00000942 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 942:	df 93       	push	r29
 944:	cf 93       	push	r28
 946:	00 d0       	rcall	.+0      	; 0x948 <DIO_u8SetPortValue+0x6>
 948:	00 d0       	rcall	.+0      	; 0x94a <DIO_u8SetPortValue+0x8>
 94a:	0f 92       	push	r0
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	8a 83       	std	Y+2, r24	; 0x02
 952:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	28 2f       	mov	r18, r24
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	3d 83       	std	Y+5, r19	; 0x05
 960:	2c 83       	std	Y+4, r18	; 0x04
 962:	8c 81       	ldd	r24, Y+4	; 0x04
 964:	9d 81       	ldd	r25, Y+5	; 0x05
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	91 05       	cpc	r25, r1
 96a:	d1 f0       	breq	.+52     	; 0x9a0 <DIO_u8SetPortValue+0x5e>
 96c:	2c 81       	ldd	r18, Y+4	; 0x04
 96e:	3d 81       	ldd	r19, Y+5	; 0x05
 970:	22 30       	cpi	r18, 0x02	; 2
 972:	31 05       	cpc	r19, r1
 974:	2c f4       	brge	.+10     	; 0x980 <DIO_u8SetPortValue+0x3e>
 976:	8c 81       	ldd	r24, Y+4	; 0x04
 978:	9d 81       	ldd	r25, Y+5	; 0x05
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	61 f0       	breq	.+24     	; 0x996 <DIO_u8SetPortValue+0x54>
 97e:	1f c0       	rjmp	.+62     	; 0x9be <DIO_u8SetPortValue+0x7c>
 980:	2c 81       	ldd	r18, Y+4	; 0x04
 982:	3d 81       	ldd	r19, Y+5	; 0x05
 984:	22 30       	cpi	r18, 0x02	; 2
 986:	31 05       	cpc	r19, r1
 988:	81 f0       	breq	.+32     	; 0x9aa <DIO_u8SetPortValue+0x68>
 98a:	8c 81       	ldd	r24, Y+4	; 0x04
 98c:	9d 81       	ldd	r25, Y+5	; 0x05
 98e:	83 30       	cpi	r24, 0x03	; 3
 990:	91 05       	cpc	r25, r1
 992:	81 f0       	breq	.+32     	; 0x9b4 <DIO_u8SetPortValue+0x72>
 994:	14 c0       	rjmp	.+40     	; 0x9be <DIO_u8SetPortValue+0x7c>
    {
        case DIO_u8_PORTA : DIO_PORTA_REG = Copy_u8PortValue; break;
 996:	eb e3       	ldi	r30, 0x3B	; 59
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	80 83       	st	Z, r24
 99e:	10 c0       	rjmp	.+32     	; 0x9c0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
 9a0:	e8 e3       	ldi	r30, 0x38	; 56
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	8b 81       	ldd	r24, Y+3	; 0x03
 9a6:	80 83       	st	Z, r24
 9a8:	0b c0       	rjmp	.+22     	; 0x9c0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
 9aa:	e5 e3       	ldi	r30, 0x35	; 53
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	80 83       	st	Z, r24
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
 9b4:	e2 e3       	ldi	r30, 0x32	; 50
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ba:	80 83       	st	Z, r24
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <DIO_u8SetPortValue+0x7e>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
 9be:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 9c2:	0f 90       	pop	r0
 9c4:	0f 90       	pop	r0
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	08 95       	ret

000009d2 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <Dio_u8GetPortValue+0x6>
 9d8:	00 d0       	rcall	.+0      	; 0x9da <Dio_u8GetPortValue+0x8>
 9da:	00 d0       	rcall	.+0      	; 0x9dc <Dio_u8GetPortValue+0xa>
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	8a 83       	std	Y+2, r24	; 0x02
 9e2:	7c 83       	std	Y+4, r23	; 0x04
 9e4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
 9ea:	8a 81       	ldd	r24, Y+2	; 0x02
 9ec:	83 30       	cpi	r24, 0x03	; 3
 9ee:	08 f4       	brcc	.+2      	; 0x9f2 <Dio_u8GetPortValue+0x20>
 9f0:	3f c0       	rjmp	.+126    	; 0xa70 <Dio_u8GetPortValue+0x9e>
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	9c 81       	ldd	r25, Y+4	; 0x04
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	d9 f1       	breq	.+118    	; 0xa70 <Dio_u8GetPortValue+0x9e>
    {
        switch (Copy_u8PortId)
 9fa:	8a 81       	ldd	r24, Y+2	; 0x02
 9fc:	28 2f       	mov	r18, r24
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	3e 83       	std	Y+6, r19	; 0x06
 a02:	2d 83       	std	Y+5, r18	; 0x05
 a04:	8d 81       	ldd	r24, Y+5	; 0x05
 a06:	9e 81       	ldd	r25, Y+6	; 0x06
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	91 05       	cpc	r25, r1
 a0c:	e1 f0       	breq	.+56     	; 0xa46 <Dio_u8GetPortValue+0x74>
 a0e:	2d 81       	ldd	r18, Y+5	; 0x05
 a10:	3e 81       	ldd	r19, Y+6	; 0x06
 a12:	22 30       	cpi	r18, 0x02	; 2
 a14:	31 05       	cpc	r19, r1
 a16:	2c f4       	brge	.+10     	; 0xa22 <Dio_u8GetPortValue+0x50>
 a18:	8d 81       	ldd	r24, Y+5	; 0x05
 a1a:	9e 81       	ldd	r25, Y+6	; 0x06
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	61 f0       	breq	.+24     	; 0xa38 <Dio_u8GetPortValue+0x66>
 a20:	28 c0       	rjmp	.+80     	; 0xa72 <Dio_u8GetPortValue+0xa0>
 a22:	2d 81       	ldd	r18, Y+5	; 0x05
 a24:	3e 81       	ldd	r19, Y+6	; 0x06
 a26:	22 30       	cpi	r18, 0x02	; 2
 a28:	31 05       	cpc	r19, r1
 a2a:	a1 f0       	breq	.+40     	; 0xa54 <Dio_u8GetPortValue+0x82>
 a2c:	8d 81       	ldd	r24, Y+5	; 0x05
 a2e:	9e 81       	ldd	r25, Y+6	; 0x06
 a30:	83 30       	cpi	r24, 0x03	; 3
 a32:	91 05       	cpc	r25, r1
 a34:	b1 f0       	breq	.+44     	; 0xa62 <Dio_u8GetPortValue+0x90>
 a36:	1d c0       	rjmp	.+58     	; 0xa72 <Dio_u8GetPortValue+0xa0>
        {
        case DIO_u8_PORTA :*Copy_Pu8PortValue = DIO_PINA_REG; break;
 a38:	e9 e3       	ldi	r30, 0x39	; 57
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	80 81       	ld	r24, Z
 a3e:	eb 81       	ldd	r30, Y+3	; 0x03
 a40:	fc 81       	ldd	r31, Y+4	; 0x04
 a42:	80 83       	st	Z, r24
 a44:	16 c0       	rjmp	.+44     	; 0xa72 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
 a46:	e6 e3       	ldi	r30, 0x36	; 54
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	80 81       	ld	r24, Z
 a4c:	eb 81       	ldd	r30, Y+3	; 0x03
 a4e:	fc 81       	ldd	r31, Y+4	; 0x04
 a50:	80 83       	st	Z, r24
 a52:	0f c0       	rjmp	.+30     	; 0xa72 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
 a54:	e3 e3       	ldi	r30, 0x33	; 51
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	eb 81       	ldd	r30, Y+3	; 0x03
 a5c:	fc 81       	ldd	r31, Y+4	; 0x04
 a5e:	80 83       	st	Z, r24
 a60:	08 c0       	rjmp	.+16     	; 0xa72 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
 a62:	e0 e3       	ldi	r30, 0x30	; 48
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	eb 81       	ldd	r30, Y+3	; 0x03
 a6a:	fc 81       	ldd	r31, Y+4	; 0x04
 a6c:	80 83       	st	Z, r24
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <Dio_u8GetPortValue+0xa0>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 a70:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 a72:	89 81       	ldd	r24, Y+1	; 0x01
}
 a74:	26 96       	adiw	r28, 0x06	; 6
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	cf 91       	pop	r28
 a82:	df 91       	pop	r29
 a84:	08 95       	ret

00000a86 <EXTI_u8SetCallBack>:
* used to store the call back function then call it 
in the ISR vector function */
static void (*ECTI_APCallBack[2])(void)={NULL,NULL};

u8 EXTI_u8SetCallBack(void(*pf)(void),u8 Copy_u8EXTIIndex)
{
 a86:	df 93       	push	r29
 a88:	cf 93       	push	r28
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <EXTI_u8SetCallBack+0x6>
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <EXTI_u8SetCallBack+0x8>
 a8e:	cd b7       	in	r28, 0x3d	; 61
 a90:	de b7       	in	r29, 0x3e	; 62
 a92:	9b 83       	std	Y+3, r25	; 0x03
 a94:	8a 83       	std	Y+2, r24	; 0x02
 a96:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ReturnType = STD_TYPE_OK;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	89 83       	std	Y+1, r24	; 0x01
    if((pf != NULL) &&(Copy_u8EXTIIndex <= EXTI_U8_INDX1))
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	9b 81       	ldd	r25, Y+3	; 0x03
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	81 f0       	breq	.+32     	; 0xac4 <EXTI_u8SetCallBack+0x3e>
 aa4:	8c 81       	ldd	r24, Y+4	; 0x04
 aa6:	82 30       	cpi	r24, 0x02	; 2
 aa8:	68 f4       	brcc	.+26     	; 0xac4 <EXTI_u8SetCallBack+0x3e>
    {
        ECTI_APCallBack[Copy_u8EXTIIndex] = pf;
 aaa:	8c 81       	ldd	r24, Y+4	; 0x04
 aac:	88 2f       	mov	r24, r24
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	88 0f       	add	r24, r24
 ab2:	99 1f       	adc	r25, r25
 ab4:	fc 01       	movw	r30, r24
 ab6:	e0 5a       	subi	r30, 0xA0	; 160
 ab8:	ff 4f       	sbci	r31, 0xFF	; 255
 aba:	8a 81       	ldd	r24, Y+2	; 0x02
 abc:	9b 81       	ldd	r25, Y+3	; 0x03
 abe:	91 83       	std	Z+1, r25	; 0x01
 ac0:	80 83       	st	Z, r24
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <EXTI_u8SetCallBack+0x40>
    }
    else
    {
        Local_u8ReturnType = STD_TYPE_NOK;
 ac4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnType ;
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ac8:	0f 90       	pop	r0
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	0f 90       	pop	r0
 ad0:	cf 91       	pop	r28
 ad2:	df 91       	pop	r29
 ad4:	08 95       	ret

00000ad6 <__vector_1>:
/* __attribute__ : keyword to prevent the compiler from removing function
 * ((signal))    : to tell the compiler that the function is ISR */

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 ad6:	1f 92       	push	r1
 ad8:	0f 92       	push	r0
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	0f 92       	push	r0
 ade:	11 24       	eor	r1, r1
 ae0:	2f 93       	push	r18
 ae2:	3f 93       	push	r19
 ae4:	4f 93       	push	r20
 ae6:	5f 93       	push	r21
 ae8:	6f 93       	push	r22
 aea:	7f 93       	push	r23
 aec:	8f 93       	push	r24
 aee:	9f 93       	push	r25
 af0:	af 93       	push	r26
 af2:	bf 93       	push	r27
 af4:	ef 93       	push	r30
 af6:	ff 93       	push	r31
 af8:	df 93       	push	r29
 afa:	cf 93       	push	r28
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
    if(ECTI_APCallBack[EXTI_U8_INDX0] != NULL)
 b00:	80 91 60 00 	lds	r24, 0x0060
 b04:	90 91 61 00 	lds	r25, 0x0061
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	29 f0       	breq	.+10     	; 0xb16 <__vector_1+0x40>
	{
        ECTI_APCallBack[EXTI_U8_INDX0]();
 b0c:	e0 91 60 00 	lds	r30, 0x0060
 b10:	f0 91 61 00 	lds	r31, 0x0061
 b14:	09 95       	icall
    }
}
 b16:	cf 91       	pop	r28
 b18:	df 91       	pop	r29
 b1a:	ff 91       	pop	r31
 b1c:	ef 91       	pop	r30
 b1e:	bf 91       	pop	r27
 b20:	af 91       	pop	r26
 b22:	9f 91       	pop	r25
 b24:	8f 91       	pop	r24
 b26:	7f 91       	pop	r23
 b28:	6f 91       	pop	r22
 b2a:	5f 91       	pop	r21
 b2c:	4f 91       	pop	r20
 b2e:	3f 91       	pop	r19
 b30:	2f 91       	pop	r18
 b32:	0f 90       	pop	r0
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	0f 90       	pop	r0
 b38:	1f 90       	pop	r1
 b3a:	18 95       	reti

00000b3c <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	2f 93       	push	r18
 b48:	3f 93       	push	r19
 b4a:	4f 93       	push	r20
 b4c:	5f 93       	push	r21
 b4e:	6f 93       	push	r22
 b50:	7f 93       	push	r23
 b52:	8f 93       	push	r24
 b54:	9f 93       	push	r25
 b56:	af 93       	push	r26
 b58:	bf 93       	push	r27
 b5a:	ef 93       	push	r30
 b5c:	ff 93       	push	r31
 b5e:	df 93       	push	r29
 b60:	cf 93       	push	r28
 b62:	cd b7       	in	r28, 0x3d	; 61
 b64:	de b7       	in	r29, 0x3e	; 62
	if(ECTI_APCallBack[EXTI_U8_INDX1] != NULL)
 b66:	80 91 62 00 	lds	r24, 0x0062
 b6a:	90 91 63 00 	lds	r25, 0x0063
 b6e:	00 97       	sbiw	r24, 0x00	; 0
 b70:	29 f0       	breq	.+10     	; 0xb7c <__vector_2+0x40>
	{
        ECTI_APCallBack[EXTI_U8_INDX1]();
 b72:	e0 91 62 00 	lds	r30, 0x0062
 b76:	f0 91 63 00 	lds	r31, 0x0063
 b7a:	09 95       	icall
    }
}
 b7c:	cf 91       	pop	r28
 b7e:	df 91       	pop	r29
 b80:	ff 91       	pop	r31
 b82:	ef 91       	pop	r30
 b84:	bf 91       	pop	r27
 b86:	af 91       	pop	r26
 b88:	9f 91       	pop	r25
 b8a:	8f 91       	pop	r24
 b8c:	7f 91       	pop	r23
 b8e:	6f 91       	pop	r22
 b90:	5f 91       	pop	r21
 b92:	4f 91       	pop	r20
 b94:	3f 91       	pop	r19
 b96:	2f 91       	pop	r18
 b98:	0f 90       	pop	r0
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <EXIT_u8EXITEnable>:

u8 EXIT_u8EXITEnable ( u8 Copy_u8EXTIIndex, u8 Copy_u8EXTIEdge)
{
 ba2:	df 93       	push	r29
 ba4:	cf 93       	push	r28
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	29 97       	sbiw	r28, 0x09	; 9
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	f8 94       	cli
 bb0:	de bf       	out	0x3e, r29	; 62
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	cd bf       	out	0x3d, r28	; 61
 bb6:	8a 83       	std	Y+2, r24	; 0x02
 bb8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8EXTIIndex <= EXTI_U8_INDX1) && (Copy_u8EXTIEdge <= EXTI_U8_CHANGE ))
 bbe:	8a 81       	ldd	r24, Y+2	; 0x02
 bc0:	82 30       	cpi	r24, 0x02	; 2
 bc2:	08 f0       	brcs	.+2      	; 0xbc6 <EXIT_u8EXITEnable+0x24>
 bc4:	d8 c0       	rjmp	.+432    	; 0xd76 <EXIT_u8EXITEnable+0x1d4>
 bc6:	8b 81       	ldd	r24, Y+3	; 0x03
 bc8:	84 30       	cpi	r24, 0x04	; 4
 bca:	08 f0       	brcs	.+2      	; 0xbce <EXIT_u8EXITEnable+0x2c>
 bcc:	d4 c0       	rjmp	.+424    	; 0xd76 <EXIT_u8EXITEnable+0x1d4>
    {
        switch (Copy_u8EXTIIndex)
 bce:	8a 81       	ldd	r24, Y+2	; 0x02
 bd0:	28 2f       	mov	r18, r24
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	39 87       	std	Y+9, r19	; 0x09
 bd6:	28 87       	std	Y+8, r18	; 0x08
 bd8:	88 85       	ldd	r24, Y+8	; 0x08
 bda:	99 85       	ldd	r25, Y+9	; 0x09
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	39 f0       	breq	.+14     	; 0xbee <EXIT_u8EXITEnable+0x4c>
 be0:	28 85       	ldd	r18, Y+8	; 0x08
 be2:	39 85       	ldd	r19, Y+9	; 0x09
 be4:	21 30       	cpi	r18, 0x01	; 1
 be6:	31 05       	cpc	r19, r1
 be8:	09 f4       	brne	.+2      	; 0xbec <EXIT_u8EXITEnable+0x4a>
 bea:	63 c0       	rjmp	.+198    	; 0xcb2 <EXIT_u8EXITEnable+0x110>
 bec:	c5 c0       	rjmp	.+394    	; 0xd78 <EXIT_u8EXITEnable+0x1d6>
        {
        case EXTI_U8_INDX0      :
            switch (Copy_u8EXTIEdge)
 bee:	8b 81       	ldd	r24, Y+3	; 0x03
 bf0:	28 2f       	mov	r18, r24
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	3f 83       	std	Y+7, r19	; 0x07
 bf6:	2e 83       	std	Y+6, r18	; 0x06
 bf8:	8e 81       	ldd	r24, Y+6	; 0x06
 bfa:	9f 81       	ldd	r25, Y+7	; 0x07
 bfc:	81 30       	cpi	r24, 0x01	; 1
 bfe:	91 05       	cpc	r25, r1
 c00:	21 f1       	breq	.+72     	; 0xc4a <EXIT_u8EXITEnable+0xa8>
 c02:	2e 81       	ldd	r18, Y+6	; 0x06
 c04:	3f 81       	ldd	r19, Y+7	; 0x07
 c06:	22 30       	cpi	r18, 0x02	; 2
 c08:	31 05       	cpc	r19, r1
 c0a:	2c f4       	brge	.+10     	; 0xc16 <EXIT_u8EXITEnable+0x74>
 c0c:	8e 81       	ldd	r24, Y+6	; 0x06
 c0e:	9f 81       	ldd	r25, Y+7	; 0x07
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	61 f0       	breq	.+24     	; 0xc2c <EXIT_u8EXITEnable+0x8a>
 c14:	46 c0       	rjmp	.+140    	; 0xca2 <EXIT_u8EXITEnable+0x100>
 c16:	2e 81       	ldd	r18, Y+6	; 0x06
 c18:	3f 81       	ldd	r19, Y+7	; 0x07
 c1a:	22 30       	cpi	r18, 0x02	; 2
 c1c:	31 05       	cpc	r19, r1
 c1e:	21 f1       	breq	.+72     	; 0xc68 <EXIT_u8EXITEnable+0xc6>
 c20:	8e 81       	ldd	r24, Y+6	; 0x06
 c22:	9f 81       	ldd	r25, Y+7	; 0x07
 c24:	83 30       	cpi	r24, 0x03	; 3
 c26:	91 05       	cpc	r25, r1
 c28:	71 f1       	breq	.+92     	; 0xc86 <EXIT_u8EXITEnable+0xe4>
 c2a:	3b c0       	rjmp	.+118    	; 0xca2 <EXIT_u8EXITEnable+0x100>
            {
                case EXTI_U8_RISING     :   SET_BIT(EXTI_EICRA,0); SET_BIT(EXTI_EICRA,1);   break;
 c2c:	a9 e6       	ldi	r26, 0x69	; 105
 c2e:	b0 e0       	ldi	r27, 0x00	; 0
 c30:	e9 e6       	ldi	r30, 0x69	; 105
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	81 60       	ori	r24, 0x01	; 1
 c38:	8c 93       	st	X, r24
 c3a:	a9 e6       	ldi	r26, 0x69	; 105
 c3c:	b0 e0       	ldi	r27, 0x00	; 0
 c3e:	e9 e6       	ldi	r30, 0x69	; 105
 c40:	f0 e0       	ldi	r31, 0x00	; 0
 c42:	80 81       	ld	r24, Z
 c44:	82 60       	ori	r24, 0x02	; 2
 c46:	8c 93       	st	X, r24
 c48:	2c c0       	rjmp	.+88     	; 0xca2 <EXIT_u8EXITEnable+0x100>
                case EXTI_U8_FALLING    :   CLR_BIT(EXTI_EICRA,0); SET_BIT(EXTI_EICRA,1);   break;
 c4a:	a9 e6       	ldi	r26, 0x69	; 105
 c4c:	b0 e0       	ldi	r27, 0x00	; 0
 c4e:	e9 e6       	ldi	r30, 0x69	; 105
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	80 81       	ld	r24, Z
 c54:	8e 7f       	andi	r24, 0xFE	; 254
 c56:	8c 93       	st	X, r24
 c58:	a9 e6       	ldi	r26, 0x69	; 105
 c5a:	b0 e0       	ldi	r27, 0x00	; 0
 c5c:	e9 e6       	ldi	r30, 0x69	; 105
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	80 81       	ld	r24, Z
 c62:	82 60       	ori	r24, 0x02	; 2
 c64:	8c 93       	st	X, r24
 c66:	1d c0       	rjmp	.+58     	; 0xca2 <EXIT_u8EXITEnable+0x100>
                case EXTI_U8_LOW        :   CLR_BIT(EXTI_EICRA,0); CLR_BIT(EXTI_EICRA,1);   break;
 c68:	a9 e6       	ldi	r26, 0x69	; 105
 c6a:	b0 e0       	ldi	r27, 0x00	; 0
 c6c:	e9 e6       	ldi	r30, 0x69	; 105
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	80 81       	ld	r24, Z
 c72:	8e 7f       	andi	r24, 0xFE	; 254
 c74:	8c 93       	st	X, r24
 c76:	a9 e6       	ldi	r26, 0x69	; 105
 c78:	b0 e0       	ldi	r27, 0x00	; 0
 c7a:	e9 e6       	ldi	r30, 0x69	; 105
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	8d 7f       	andi	r24, 0xFD	; 253
 c82:	8c 93       	st	X, r24
 c84:	0e c0       	rjmp	.+28     	; 0xca2 <EXIT_u8EXITEnable+0x100>
                case EXTI_U8_CHANGE     :   SET_BIT(EXTI_EICRA,0); CLR_BIT(EXTI_EICRA,1);   break;
 c86:	a9 e6       	ldi	r26, 0x69	; 105
 c88:	b0 e0       	ldi	r27, 0x00	; 0
 c8a:	e9 e6       	ldi	r30, 0x69	; 105
 c8c:	f0 e0       	ldi	r31, 0x00	; 0
 c8e:	80 81       	ld	r24, Z
 c90:	81 60       	ori	r24, 0x01	; 1
 c92:	8c 93       	st	X, r24
 c94:	a9 e6       	ldi	r26, 0x69	; 105
 c96:	b0 e0       	ldi	r27, 0x00	; 0
 c98:	e9 e6       	ldi	r30, 0x69	; 105
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	8d 7f       	andi	r24, 0xFD	; 253
 ca0:	8c 93       	st	X, r24
            }
            SET_BIT(EXTI_EIMSK,0);
 ca2:	ad e3       	ldi	r26, 0x3D	; 61
 ca4:	b0 e0       	ldi	r27, 0x00	; 0
 ca6:	ed e3       	ldi	r30, 0x3D	; 61
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	80 81       	ld	r24, Z
 cac:	81 60       	ori	r24, 0x01	; 1
 cae:	8c 93       	st	X, r24
 cb0:	63 c0       	rjmp	.+198    	; 0xd78 <EXIT_u8EXITEnable+0x1d6>
        break;
        case EXTI_U8_INDX1      :  
            switch (Copy_u8EXTIEdge)
 cb2:	8b 81       	ldd	r24, Y+3	; 0x03
 cb4:	28 2f       	mov	r18, r24
 cb6:	30 e0       	ldi	r19, 0x00	; 0
 cb8:	3d 83       	std	Y+5, r19	; 0x05
 cba:	2c 83       	std	Y+4, r18	; 0x04
 cbc:	8c 81       	ldd	r24, Y+4	; 0x04
 cbe:	9d 81       	ldd	r25, Y+5	; 0x05
 cc0:	81 30       	cpi	r24, 0x01	; 1
 cc2:	91 05       	cpc	r25, r1
 cc4:	21 f1       	breq	.+72     	; 0xd0e <EXIT_u8EXITEnable+0x16c>
 cc6:	2c 81       	ldd	r18, Y+4	; 0x04
 cc8:	3d 81       	ldd	r19, Y+5	; 0x05
 cca:	22 30       	cpi	r18, 0x02	; 2
 ccc:	31 05       	cpc	r19, r1
 cce:	2c f4       	brge	.+10     	; 0xcda <EXIT_u8EXITEnable+0x138>
 cd0:	8c 81       	ldd	r24, Y+4	; 0x04
 cd2:	9d 81       	ldd	r25, Y+5	; 0x05
 cd4:	00 97       	sbiw	r24, 0x00	; 0
 cd6:	61 f0       	breq	.+24     	; 0xcf0 <EXIT_u8EXITEnable+0x14e>
 cd8:	46 c0       	rjmp	.+140    	; 0xd66 <EXIT_u8EXITEnable+0x1c4>
 cda:	2c 81       	ldd	r18, Y+4	; 0x04
 cdc:	3d 81       	ldd	r19, Y+5	; 0x05
 cde:	22 30       	cpi	r18, 0x02	; 2
 ce0:	31 05       	cpc	r19, r1
 ce2:	21 f1       	breq	.+72     	; 0xd2c <EXIT_u8EXITEnable+0x18a>
 ce4:	8c 81       	ldd	r24, Y+4	; 0x04
 ce6:	9d 81       	ldd	r25, Y+5	; 0x05
 ce8:	83 30       	cpi	r24, 0x03	; 3
 cea:	91 05       	cpc	r25, r1
 cec:	71 f1       	breq	.+92     	; 0xd4a <EXIT_u8EXITEnable+0x1a8>
 cee:	3b c0       	rjmp	.+118    	; 0xd66 <EXIT_u8EXITEnable+0x1c4>
            {
                case EXTI_U8_RISING     :   SET_BIT(EXTI_EICRA,2); SET_BIT(EXTI_EICRA,3);   break;
 cf0:	a9 e6       	ldi	r26, 0x69	; 105
 cf2:	b0 e0       	ldi	r27, 0x00	; 0
 cf4:	e9 e6       	ldi	r30, 0x69	; 105
 cf6:	f0 e0       	ldi	r31, 0x00	; 0
 cf8:	80 81       	ld	r24, Z
 cfa:	84 60       	ori	r24, 0x04	; 4
 cfc:	8c 93       	st	X, r24
 cfe:	a9 e6       	ldi	r26, 0x69	; 105
 d00:	b0 e0       	ldi	r27, 0x00	; 0
 d02:	e9 e6       	ldi	r30, 0x69	; 105
 d04:	f0 e0       	ldi	r31, 0x00	; 0
 d06:	80 81       	ld	r24, Z
 d08:	88 60       	ori	r24, 0x08	; 8
 d0a:	8c 93       	st	X, r24
 d0c:	2c c0       	rjmp	.+88     	; 0xd66 <EXIT_u8EXITEnable+0x1c4>
                case EXTI_U8_FALLING    :   CLR_BIT(EXTI_EICRA,2); SET_BIT(EXTI_EICRA,3);   break;
 d0e:	a9 e6       	ldi	r26, 0x69	; 105
 d10:	b0 e0       	ldi	r27, 0x00	; 0
 d12:	e9 e6       	ldi	r30, 0x69	; 105
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	80 81       	ld	r24, Z
 d18:	8b 7f       	andi	r24, 0xFB	; 251
 d1a:	8c 93       	st	X, r24
 d1c:	a9 e6       	ldi	r26, 0x69	; 105
 d1e:	b0 e0       	ldi	r27, 0x00	; 0
 d20:	e9 e6       	ldi	r30, 0x69	; 105
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	80 81       	ld	r24, Z
 d26:	88 60       	ori	r24, 0x08	; 8
 d28:	8c 93       	st	X, r24
 d2a:	1d c0       	rjmp	.+58     	; 0xd66 <EXIT_u8EXITEnable+0x1c4>
                case EXTI_U8_LOW        :   CLR_BIT(EXTI_EICRA,2); CLR_BIT(EXTI_EICRA,3);   break;
 d2c:	a9 e6       	ldi	r26, 0x69	; 105
 d2e:	b0 e0       	ldi	r27, 0x00	; 0
 d30:	e9 e6       	ldi	r30, 0x69	; 105
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	80 81       	ld	r24, Z
 d36:	8b 7f       	andi	r24, 0xFB	; 251
 d38:	8c 93       	st	X, r24
 d3a:	a9 e6       	ldi	r26, 0x69	; 105
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
 d3e:	e9 e6       	ldi	r30, 0x69	; 105
 d40:	f0 e0       	ldi	r31, 0x00	; 0
 d42:	80 81       	ld	r24, Z
 d44:	87 7f       	andi	r24, 0xF7	; 247
 d46:	8c 93       	st	X, r24
 d48:	0e c0       	rjmp	.+28     	; 0xd66 <EXIT_u8EXITEnable+0x1c4>
                case EXTI_U8_CHANGE     :   SET_BIT(EXTI_EICRA,2); CLR_BIT(EXTI_EICRA,3);   break;
 d4a:	a9 e6       	ldi	r26, 0x69	; 105
 d4c:	b0 e0       	ldi	r27, 0x00	; 0
 d4e:	e9 e6       	ldi	r30, 0x69	; 105
 d50:	f0 e0       	ldi	r31, 0x00	; 0
 d52:	80 81       	ld	r24, Z
 d54:	84 60       	ori	r24, 0x04	; 4
 d56:	8c 93       	st	X, r24
 d58:	a9 e6       	ldi	r26, 0x69	; 105
 d5a:	b0 e0       	ldi	r27, 0x00	; 0
 d5c:	e9 e6       	ldi	r30, 0x69	; 105
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	80 81       	ld	r24, Z
 d62:	87 7f       	andi	r24, 0xF7	; 247
 d64:	8c 93       	st	X, r24
            }
            SET_BIT(EXTI_EIMSK,1);
 d66:	ad e3       	ldi	r26, 0x3D	; 61
 d68:	b0 e0       	ldi	r27, 0x00	; 0
 d6a:	ed e3       	ldi	r30, 0x3D	; 61
 d6c:	f0 e0       	ldi	r31, 0x00	; 0
 d6e:	80 81       	ld	r24, Z
 d70:	82 60       	ori	r24, 0x02	; 2
 d72:	8c 93       	st	X, r24
 d74:	01 c0       	rjmp	.+2      	; 0xd78 <EXIT_u8EXITEnable+0x1d6>
        break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 d76:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState ;
 d78:	89 81       	ldd	r24, Y+1	; 0x01
}
 d7a:	29 96       	adiw	r28, 0x09	; 9
 d7c:	0f b6       	in	r0, 0x3f	; 63
 d7e:	f8 94       	cli
 d80:	de bf       	out	0x3e, r29	; 62
 d82:	0f be       	out	0x3f, r0	; 63
 d84:	cd bf       	out	0x3d, r28	; 61
 d86:	cf 91       	pop	r28
 d88:	df 91       	pop	r29
 d8a:	08 95       	ret

00000d8c <EXIT_u8EXITDisable>:

u8 EXIT_u8EXITDisable ( u8 Copy_u8EXTIIndex)
{
 d8c:	df 93       	push	r29
 d8e:	cf 93       	push	r28
 d90:	00 d0       	rcall	.+0      	; 0xd92 <EXIT_u8EXITDisable+0x6>
 d92:	00 d0       	rcall	.+0      	; 0xd94 <EXIT_u8EXITDisable+0x8>
 d94:	cd b7       	in	r28, 0x3d	; 61
 d96:	de b7       	in	r29, 0x3e	; 62
 d98:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ReturnState = STD_TYPE_OK;
 d9a:	81 e0       	ldi	r24, 0x01	; 1
 d9c:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8EXTIIndex)
 d9e:	8a 81       	ldd	r24, Y+2	; 0x02
 da0:	28 2f       	mov	r18, r24
 da2:	30 e0       	ldi	r19, 0x00	; 0
 da4:	3c 83       	std	Y+4, r19	; 0x04
 da6:	2b 83       	std	Y+3, r18	; 0x03
 da8:	8b 81       	ldd	r24, Y+3	; 0x03
 daa:	9c 81       	ldd	r25, Y+4	; 0x04
 dac:	00 97       	sbiw	r24, 0x00	; 0
 dae:	31 f0       	breq	.+12     	; 0xdbc <EXIT_u8EXITDisable+0x30>
 db0:	2b 81       	ldd	r18, Y+3	; 0x03
 db2:	3c 81       	ldd	r19, Y+4	; 0x04
 db4:	21 30       	cpi	r18, 0x01	; 1
 db6:	31 05       	cpc	r19, r1
 db8:	49 f0       	breq	.+18     	; 0xdcc <EXIT_u8EXITDisable+0x40>
 dba:	10 c0       	rjmp	.+32     	; 0xddc <EXIT_u8EXITDisable+0x50>
    {
        case EXTI_U8_INDX0      : CLR_BIT(EXTI_EIMSK,0); break;
 dbc:	ad e3       	ldi	r26, 0x3D	; 61
 dbe:	b0 e0       	ldi	r27, 0x00	; 0
 dc0:	ed e3       	ldi	r30, 0x3D	; 61
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	80 81       	ld	r24, Z
 dc6:	8e 7f       	andi	r24, 0xFE	; 254
 dc8:	8c 93       	st	X, r24
 dca:	09 c0       	rjmp	.+18     	; 0xdde <EXIT_u8EXITDisable+0x52>
        case EXTI_U8_INDX1      : CLR_BIT(EXTI_EIMSK,1); break;
 dcc:	ad e3       	ldi	r26, 0x3D	; 61
 dce:	b0 e0       	ldi	r27, 0x00	; 0
 dd0:	ed e3       	ldi	r30, 0x3D	; 61
 dd2:	f0 e0       	ldi	r31, 0x00	; 0
 dd4:	80 81       	ld	r24, Z
 dd6:	8d 7f       	andi	r24, 0xFD	; 253
 dd8:	8c 93       	st	X, r24
 dda:	01 c0       	rjmp	.+2      	; 0xdde <EXIT_u8EXITDisable+0x52>
        default :    Local_u8ReturnState = STD_TYPE_NOK; break;
 ddc:	19 82       	std	Y+1, r1	; 0x01
    }
   
    return Local_u8ReturnState ;
 dde:	89 81       	ldd	r24, Y+1	; 0x01
}
 de0:	0f 90       	pop	r0
 de2:	0f 90       	pop	r0
 de4:	0f 90       	pop	r0
 de6:	0f 90       	pop	r0
 de8:	cf 91       	pop	r28
 dea:	df 91       	pop	r29
 dec:	08 95       	ret

00000dee <GIE_voidEnable>:
#include "GIE_INTERFACE.h"



void GIE_voidEnable(void)
{
 dee:	df 93       	push	r29
 df0:	cf 93       	push	r28
 df2:	cd b7       	in	r28, 0x3d	; 61
 df4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
 df6:	af e5       	ldi	r26, 0x5F	; 95
 df8:	b0 e0       	ldi	r27, 0x00	; 0
 dfa:	ef e5       	ldi	r30, 0x5F	; 95
 dfc:	f0 e0       	ldi	r31, 0x00	; 0
 dfe:	80 81       	ld	r24, Z
 e00:	80 68       	ori	r24, 0x80	; 128
 e02:	8c 93       	st	X, r24
}
 e04:	cf 91       	pop	r28
 e06:	df 91       	pop	r29
 e08:	08 95       	ret

00000e0a <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 e0a:	df 93       	push	r29
 e0c:	cf 93       	push	r28
 e0e:	cd b7       	in	r28, 0x3d	; 61
 e10:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
 e12:	af e5       	ldi	r26, 0x5F	; 95
 e14:	b0 e0       	ldi	r27, 0x00	; 0
 e16:	ef e5       	ldi	r30, 0x5F	; 95
 e18:	f0 e0       	ldi	r31, 0x00	; 0
 e1a:	80 81       	ld	r24, Z
 e1c:	8f 77       	andi	r24, 0x7F	; 127
 e1e:	8c 93       	st	X, r24
}
 e20:	cf 91       	pop	r28
 e22:	df 91       	pop	r29
 e24:	08 95       	ret

00000e26 <led_voidInit>:
#include "LED_private.h"
#include "LED_interface.h"


void led_voidInit(void)
{
 e26:	df 93       	push	r29
 e28:	cf 93       	push	r28
 e2a:	cd b7       	in	r28, 0x3d	; 61
 e2c:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinDirection(LED_PORT_RED,LED_PIN_RED,DIO_u8_OUTPUT);
 e2e:	81 e0       	ldi	r24, 0x01	; 1
 e30:	67 e0       	ldi	r22, 0x07	; 7
 e32:	41 e0       	ldi	r20, 0x01	; 1
 e34:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(LED_PORT_GREEN,LED_PIN_GREEN,DIO_u8_OUTPUT);
 e38:	80 e0       	ldi	r24, 0x00	; 0
 e3a:	64 e0       	ldi	r22, 0x04	; 4
 e3c:	41 e0       	ldi	r20, 0x01	; 1
 e3e:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(LED_PORT_BLUE,LED_PIN_BLUE,DIO_u8_OUTPUT);
 e42:	80 e0       	ldi	r24, 0x00	; 0
 e44:	65 e0       	ldi	r22, 0x05	; 5
 e46:	41 e0       	ldi	r20, 0x01	; 1
 e48:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(LED_PORT_YELLOW,LED_PIN_YELLOW,DIO_u8_OUTPUT);
 e4c:	80 e0       	ldi	r24, 0x00	; 0
 e4e:	66 e0       	ldi	r22, 0x06	; 6
 e50:	41 e0       	ldi	r20, 0x01	; 1
 e52:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDirection>

    DIO_u8SetPinValue(LED_PORT_RED,LED_PIN_RED,DIO_u8_LOW);
 e56:	81 e0       	ldi	r24, 0x01	; 1
 e58:	67 e0       	ldi	r22, 0x07	; 7
 e5a:	40 e0       	ldi	r20, 0x00	; 0
 e5c:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LED_PORT_YELLOW,LED_PIN_YELLOW,DIO_u8_LOW);
 e60:	80 e0       	ldi	r24, 0x00	; 0
 e62:	66 e0       	ldi	r22, 0x06	; 6
 e64:	40 e0       	ldi	r20, 0x00	; 0
 e66:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LED_PORT_BLUE,LED_PIN_BLUE,DIO_u8_LOW);
 e6a:	80 e0       	ldi	r24, 0x00	; 0
 e6c:	65 e0       	ldi	r22, 0x05	; 5
 e6e:	40 e0       	ldi	r20, 0x00	; 0
 e70:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LED_PORT_GREEN,LED_PIN_GREEN,DIO_u8_LOW);
 e74:	80 e0       	ldi	r24, 0x00	; 0
 e76:	64 e0       	ldi	r22, 0x04	; 4
 e78:	40 e0       	ldi	r20, 0x00	; 0
 e7a:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
}
 e7e:	cf 91       	pop	r28
 e80:	df 91       	pop	r29
 e82:	08 95       	ret

00000e84 <LED_voidRedLedOn>:

void LED_voidRedLedOn(void)
{
 e84:	df 93       	push	r29
 e86:	cf 93       	push	r28
 e88:	cd b7       	in	r28, 0x3d	; 61
 e8a:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_RED,LED_PIN_RED,DIO_u8_HIGH);
 e8c:	81 e0       	ldi	r24, 0x01	; 1
 e8e:	67 e0       	ldi	r22, 0x07	; 7
 e90:	41 e0       	ldi	r20, 0x01	; 1
 e92:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
}
 e96:	cf 91       	pop	r28
 e98:	df 91       	pop	r29
 e9a:	08 95       	ret

00000e9c <LED_voidYellowLedOn>:
void LED_voidYellowLedOn(void)
{
 e9c:	df 93       	push	r29
 e9e:	cf 93       	push	r28
 ea0:	cd b7       	in	r28, 0x3d	; 61
 ea2:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_YELLOW,LED_PIN_YELLOW,DIO_u8_HIGH);
 ea4:	80 e0       	ldi	r24, 0x00	; 0
 ea6:	66 e0       	ldi	r22, 0x06	; 6
 ea8:	41 e0       	ldi	r20, 0x01	; 1
 eaa:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
}
 eae:	cf 91       	pop	r28
 eb0:	df 91       	pop	r29
 eb2:	08 95       	ret

00000eb4 <LED_voidBlueLedOn>:
void LED_voidBlueLedOn(void)
{
 eb4:	df 93       	push	r29
 eb6:	cf 93       	push	r28
 eb8:	cd b7       	in	r28, 0x3d	; 61
 eba:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_BLUE,LED_PIN_BLUE,DIO_u8_HIGH);    
 ebc:	80 e0       	ldi	r24, 0x00	; 0
 ebe:	65 e0       	ldi	r22, 0x05	; 5
 ec0:	41 e0       	ldi	r20, 0x01	; 1
 ec2:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
}
 ec6:	cf 91       	pop	r28
 ec8:	df 91       	pop	r29
 eca:	08 95       	ret

00000ecc <LED_voidGreenLedOn>:
void LED_voidGreenLedOn(void)
{
 ecc:	df 93       	push	r29
 ece:	cf 93       	push	r28
 ed0:	cd b7       	in	r28, 0x3d	; 61
 ed2:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_GREEN,LED_PIN_GREEN,DIO_u8_HIGH);
 ed4:	80 e0       	ldi	r24, 0x00	; 0
 ed6:	64 e0       	ldi	r22, 0x04	; 4
 ed8:	41 e0       	ldi	r20, 0x01	; 1
 eda:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>

}
 ede:	cf 91       	pop	r28
 ee0:	df 91       	pop	r29
 ee2:	08 95       	ret

00000ee4 <LED_voidRedLedOff>:

void LED_voidRedLedOff(void)
{
 ee4:	df 93       	push	r29
 ee6:	cf 93       	push	r28
 ee8:	cd b7       	in	r28, 0x3d	; 61
 eea:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_RED,LED_PIN_RED,DIO_u8_LOW);
 eec:	81 e0       	ldi	r24, 0x01	; 1
 eee:	67 e0       	ldi	r22, 0x07	; 7
 ef0:	40 e0       	ldi	r20, 0x00	; 0
 ef2:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
}
 ef6:	cf 91       	pop	r28
 ef8:	df 91       	pop	r29
 efa:	08 95       	ret

00000efc <LED_voidYellowLedOff>:
void LED_voidYellowLedOff(void)
{
 efc:	df 93       	push	r29
 efe:	cf 93       	push	r28
 f00:	cd b7       	in	r28, 0x3d	; 61
 f02:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_YELLOW,LED_PIN_YELLOW,DIO_u8_LOW);
 f04:	80 e0       	ldi	r24, 0x00	; 0
 f06:	66 e0       	ldi	r22, 0x06	; 6
 f08:	40 e0       	ldi	r20, 0x00	; 0
 f0a:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>

}
 f0e:	cf 91       	pop	r28
 f10:	df 91       	pop	r29
 f12:	08 95       	ret

00000f14 <LED_voidBlueLedOff>:
void LED_voidBlueLedOff(void)
{
 f14:	df 93       	push	r29
 f16:	cf 93       	push	r28
 f18:	cd b7       	in	r28, 0x3d	; 61
 f1a:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_BLUE,LED_PIN_BLUE,DIO_u8_LOW);
 f1c:	80 e0       	ldi	r24, 0x00	; 0
 f1e:	65 e0       	ldi	r22, 0x05	; 5
 f20:	40 e0       	ldi	r20, 0x00	; 0
 f22:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>

}
 f26:	cf 91       	pop	r28
 f28:	df 91       	pop	r29
 f2a:	08 95       	ret

00000f2c <LED_voidGreenLedOff>:
void LED_voidGreenLedOff(void)
{
 f2c:	df 93       	push	r29
 f2e:	cf 93       	push	r28
 f30:	cd b7       	in	r28, 0x3d	; 61
 f32:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(LED_PORT_GREEN,LED_PIN_GREEN,DIO_u8_LOW);
 f34:	80 e0       	ldi	r24, 0x00	; 0
 f36:	64 e0       	ldi	r22, 0x04	; 4
 f38:	40 e0       	ldi	r20, 0x00	; 0
 f3a:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>

}
 f3e:	cf 91       	pop	r28
 f40:	df 91       	pop	r29
 f42:	08 95       	ret

00000f44 <LED_voidRedLedTog>:

void LED_voidRedLedTog(void)
{
 f44:	df 93       	push	r29
 f46:	cf 93       	push	r28
 f48:	cd b7       	in	r28, 0x3d	; 61
 f4a:	de b7       	in	r29, 0x3e	; 62
    DIO_u8TogglePin(LED_PORT_RED,LED_PIN_RED);
 f4c:	81 e0       	ldi	r24, 0x01	; 1
 f4e:	67 e0       	ldi	r22, 0x07	; 7
 f50:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_u8TogglePin>

}
 f54:	cf 91       	pop	r28
 f56:	df 91       	pop	r29
 f58:	08 95       	ret

00000f5a <LED_voidYellowLedTog>:
void LED_voidYellowLedTog(void)
{
 f5a:	df 93       	push	r29
 f5c:	cf 93       	push	r28
 f5e:	cd b7       	in	r28, 0x3d	; 61
 f60:	de b7       	in	r29, 0x3e	; 62
    DIO_u8TogglePin(LED_PORT_YELLOW,LED_PIN_YELLOW);
 f62:	80 e0       	ldi	r24, 0x00	; 0
 f64:	66 e0       	ldi	r22, 0x06	; 6
 f66:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_u8TogglePin>

}
 f6a:	cf 91       	pop	r28
 f6c:	df 91       	pop	r29
 f6e:	08 95       	ret

00000f70 <LED_voidBlueLedTog>:
void LED_voidBlueLedTog(void)
{
 f70:	df 93       	push	r29
 f72:	cf 93       	push	r28
 f74:	cd b7       	in	r28, 0x3d	; 61
 f76:	de b7       	in	r29, 0x3e	; 62
    DIO_u8TogglePin(LED_PORT_BLUE,LED_PIN_BLUE);
 f78:	80 e0       	ldi	r24, 0x00	; 0
 f7a:	65 e0       	ldi	r22, 0x05	; 5
 f7c:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_u8TogglePin>

}
 f80:	cf 91       	pop	r28
 f82:	df 91       	pop	r29
 f84:	08 95       	ret

00000f86 <LED_voidGreenLedTog>:
void LED_voidGreenLedTog(void)
{
 f86:	df 93       	push	r29
 f88:	cf 93       	push	r28
 f8a:	cd b7       	in	r28, 0x3d	; 61
 f8c:	de b7       	in	r29, 0x3e	; 62
    DIO_u8TogglePin(LED_PORT_GREEN,LED_PIN_GREEN);
 f8e:	80 e0       	ldi	r24, 0x00	; 0
 f90:	64 e0       	ldi	r22, 0x04	; 4
 f92:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_u8TogglePin>

 f96:	cf 91       	pop	r28
 f98:	df 91       	pop	r29
 f9a:	08 95       	ret

00000f9c <main>:
#include "LED_interface.h"



int main(void)
 {
 f9c:	df 93       	push	r29
 f9e:	cf 93       	push	r28
 fa0:	cd b7       	in	r28, 0x3d	; 61
 fa2:	de b7       	in	r29, 0x3e	; 62
	/*Initialize DIO */
    DIO_voidInit();
 fa4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>
    /*Enable GIE*/
    GIE_voidEnable();
 fa8:	0e 94 f7 06 	call	0xdee	; 0xdee <GIE_voidEnable>
	led_voidInit();
 fac:	0e 94 13 07 	call	0xe26	; 0xe26 <led_voidInit>
    /*set callback function*/
    EXTI_u8SetCallBack(LED_voidBlueLedTog,EXTI_U8_INDX0);
 fb0:	88 eb       	ldi	r24, 0xB8	; 184
 fb2:	97 e0       	ldi	r25, 0x07	; 7
 fb4:	60 e0       	ldi	r22, 0x00	; 0
 fb6:	0e 94 43 05 	call	0xa86	; 0xa86 <EXTI_u8SetCallBack>
    /*Enable EXTI 0 */
    EXIT_u8EXITEnable(EXTI_U8_INDX0,EXTI_U8_RISING);
 fba:	80 e0       	ldi	r24, 0x00	; 0
 fbc:	60 e0       	ldi	r22, 0x00	; 0
 fbe:	0e 94 d1 05 	call	0xba2	; 0xba2 <EXIT_u8EXITEnable>
 fc2:	ff cf       	rjmp	.-2      	; 0xfc2 <main+0x26>

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
