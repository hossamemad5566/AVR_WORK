
LCD_Atmega32_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002cb0  00002d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001cd4  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c3a  00000000  00000000  00004a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000564a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000057aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000797e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 35 13 	call	0x266a	; 0x266a <main>
      7a:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e7       	ldi	r26, 0x70	; 112
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e7       	ldi	r24, 0x70	; 112
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 86 13 	jmp	0x270c	; 0x270c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e7       	ldi	r22, 0x70	; 112
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRA_REG = CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 83       	st	Z, r24
    				   ,DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	81 e8       	ldi	r24, 0x81	; 129
     cac:	80 83       	st	Z, r24
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTA_REG = CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE
     cb4:	eb e3       	ldi	r30, 0x3B	; 59
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
                         ,DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 e8       	ldi	r24, 0x80	; 128
     cc0:	80 83       	st	Z, r24
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	2e 97       	sbiw	r28, 0x0e	; 14
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	6b 83       	std	Y+3, r22	; 0x03
     cec:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <DIO_u8SetPinDirection+0x26>
     cf8:	0c c1       	rjmp	.+536    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	88 30       	cpi	r24, 0x08	; 8
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <DIO_u8SetPinDirection+0x2e>
     d00:	08 c1       	rjmp	.+528    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	88 23       	and	r24, r24
     d06:	21 f0       	breq	.+8      	; 0xd10 <DIO_u8SetPinDirection+0x3c>
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <DIO_u8SetPinDirection+0x3c>
     d0e:	01 c1       	rjmp	.+514    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3e 87       	std	Y+14, r19	; 0x0e
     d18:	2d 87       	std	Y+13, r18	; 0x0d
     d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x52>
     d24:	4f c0       	rjmp	.+158    	; 0xdc4 <DIO_u8SetPinDirection+0xf0>
     d26:	2d 85       	ldd	r18, Y+13	; 0x0d
     d28:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <DIO_u8SetPinDirection+0x66>
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <DIO_u8SetPinDirection+0x80>
     d38:	ed c0       	rjmp	.+474    	; 0xf14 <DIO_u8SetPinDirection+0x240>
     d3a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_u8SetPinDirection+0x72>
     d44:	77 c0       	rjmp	.+238    	; 0xe34 <DIO_u8SetPinDirection+0x160>
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_u8SetPinDirection+0x7e>
     d50:	a9 c0       	rjmp	.+338    	; 0xea4 <DIO_u8SetPinDirection+0x1d0>
     d52:	e0 c0       	rjmp	.+448    	; 0xf14 <DIO_u8SetPinDirection+0x240>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinDirection)
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3c 87       	std	Y+12, r19	; 0x0c
     d5c:	2b 87       	std	Y+11, r18	; 0x0b
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	d1 f0       	breq	.+52     	; 0xd9a <DIO_u8SetPinDirection+0xc6>
     d66:	2b 85       	ldd	r18, Y+11	; 0x0b
     d68:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6a:	21 30       	cpi	r18, 0x01	; 1
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <DIO_u8SetPinDirection+0x9e>
     d70:	d1 c0       	rjmp	.+418    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     d72:	a4 e3       	ldi	r26, 0x34	; 52
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e4 e3       	ldi	r30, 0x34	; 52
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_u8SetPinDirection+0xbc>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_u8SetPinDirection+0xb8>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	bd c0       	rjmp	.+378    	; 0xf14 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     d9a:	a4 e3       	ldi	r26, 0x34	; 52
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e4 e3       	ldi	r30, 0x34	; 52
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_u8SetPinDirection+0xe4>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_u8SetPinDirection+0xe0>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	a8 c0       	rjmp	.+336    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3a 87       	std	Y+10, r19	; 0x0a
     dcc:	29 87       	std	Y+9, r18	; 0x09
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <DIO_u8SetPinDirection+0x136>
     dd6:	29 85       	ldd	r18, Y+9	; 0x09
     dd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dda:	21 30       	cpi	r18, 0x01	; 1
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO_u8SetPinDirection+0x10e>
     de0:	99 c0       	rjmp	.+306    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_u8SetPinDirection+0x12c>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_u8SetPinDirection+0x128>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	85 c0       	rjmp	.+266    	; 0xf14 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     e0a:	a7 e3       	ldi	r26, 0x37	; 55
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_u8SetPinDirection+0x154>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_u8SetPinDirection+0x150>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	70 c0       	rjmp	.+224    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	38 87       	std	Y+8, r19	; 0x08
     e3c:	2f 83       	std	Y+7, r18	; 0x07
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	d1 f0       	breq	.+52     	; 0xe7a <DIO_u8SetPinDirection+0x1a6>
     e46:	2f 81       	ldd	r18, Y+7	; 0x07
     e48:	38 85       	ldd	r19, Y+8	; 0x08
     e4a:	21 30       	cpi	r18, 0x01	; 1
     e4c:	31 05       	cpc	r19, r1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <DIO_u8SetPinDirection+0x17e>
     e50:	61 c0       	rjmp	.+194    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     e52:	a4 e3       	ldi	r26, 0x34	; 52
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e4 e3       	ldi	r30, 0x34	; 52
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_u8SetPinDirection+0x19c>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_u8SetPinDirection+0x198>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	4d c0       	rjmp	.+154    	; 0xf14 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_u8SetPinDirection+0x1c4>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_u8SetPinDirection+0x1c0>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	38 c0       	rjmp	.+112    	; 0xf14 <DIO_u8SetPinDirection+0x240>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3e 83       	std	Y+6, r19	; 0x06
     eac:	2d 83       	std	Y+5, r18	; 0x05
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	c9 f0       	breq	.+50     	; 0xee8 <DIO_u8SetPinDirection+0x214>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	21 30       	cpi	r18, 0x01	; 1
     ebc:	31 05       	cpc	r19, r1
     ebe:	51 f5       	brne	.+84     	; 0xf14 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_u8SetPinDirection+0x20a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_u8SetPinDirection+0x206>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	16 c0       	rjmp	.+44     	; 0xf14 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
     ee8:	a1 e3       	ldi	r26, 0x31	; 49
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8SetPinDirection+0x232>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_u8SetPinDirection+0x22e>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <DIO_u8SetPinDirection+0x240>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
     f12:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
}
     f16:	2e 96       	adiw	r28, 0x0e	; 14
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2e 97       	sbiw	r28, 0x0e	; 14
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	6b 83       	std	Y+3, r22	; 0x03
     f40:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <DIO_u8SetPinValue+0x26>
     f4c:	0c c1       	rjmp	.+536    	; 0x1166 <DIO_u8SetPinValue+0x23e>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_u8SetPinValue+0x2e>
     f54:	08 c1       	rjmp	.+528    	; 0x1166 <DIO_u8SetPinValue+0x23e>
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	21 f0       	breq	.+8      	; 0xf64 <DIO_u8SetPinValue+0x3c>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 23       	and	r24, r24
     f60:	09 f0       	breq	.+2      	; 0xf64 <DIO_u8SetPinValue+0x3c>
     f62:	01 c1       	rjmp	.+514    	; 0x1166 <DIO_u8SetPinValue+0x23e>
    {
        switch (Copy_u8PortId)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 87       	std	Y+14, r19	; 0x0e
     f6c:	2d 87       	std	Y+13, r18	; 0x0d
     f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f70:	9e 85       	ldd	r25, Y+14	; 0x0e
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <DIO_u8SetPinValue+0x52>
     f78:	4f c0       	rjmp	.+158    	; 0x1018 <DIO_u8SetPinValue+0xf0>
     f7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <DIO_u8SetPinValue+0x66>
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <DIO_u8SetPinValue+0x80>
     f8c:	ed c0       	rjmp	.+474    	; 0x1168 <DIO_u8SetPinValue+0x240>
     f8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f90:	3e 85       	ldd	r19, Y+14	; 0x0e
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_u8SetPinValue+0x72>
     f98:	77 c0       	rjmp	.+238    	; 0x1088 <DIO_u8SetPinValue+0x160>
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_u8SetPinValue+0x7e>
     fa4:	a9 c0       	rjmp	.+338    	; 0x10f8 <DIO_u8SetPinValue+0x1d0>
     fa6:	e0 c0       	rjmp	.+448    	; 0x1168 <DIO_u8SetPinValue+0x240>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinValue)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3c 87       	std	Y+12, r19	; 0x0c
     fb0:	2b 87       	std	Y+11, r18	; 0x0b
     fb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	d1 f0       	breq	.+52     	; 0xfee <DIO_u8SetPinValue+0xc6>
     fba:	2b 85       	ldd	r18, Y+11	; 0x0b
     fbc:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbe:	21 30       	cpi	r18, 0x01	; 1
     fc0:	31 05       	cpc	r19, r1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_u8SetPinValue+0x9e>
     fc4:	d1 c0       	rjmp	.+418    	; 0x1168 <DIO_u8SetPinValue+0x240>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_u8SetPinValue+0xbc>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_u8SetPinValue+0xb8>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	bd c0       	rjmp	.+378    	; 0x1168 <DIO_u8SetPinValue+0x240>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;  
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xe4>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xe0>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	a8 c0       	rjmp	.+336    	; 0x1168 <DIO_u8SetPinValue+0x240>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3a 87       	std	Y+10, r19	; 0x0a
    1020:	29 87       	std	Y+9, r18	; 0x09
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	d1 f0       	breq	.+52     	; 0x105e <DIO_u8SetPinValue+0x136>
    102a:	29 85       	ldd	r18, Y+9	; 0x09
    102c:	3a 85       	ldd	r19, Y+10	; 0x0a
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <DIO_u8SetPinValue+0x10e>
    1034:	99 c0       	rjmp	.+306    	; 0x1168 <DIO_u8SetPinValue+0x240>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x12c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x128>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	85 c0       	rjmp	.+266    	; 0x1168 <DIO_u8SetPinValue+0x240>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_u8SetPinValue+0x154>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_u8SetPinValue+0x150>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	70 c0       	rjmp	.+224    	; 0x1168 <DIO_u8SetPinValue+0x240>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	38 87       	std	Y+8, r19	; 0x08
    1090:	2f 83       	std	Y+7, r18	; 0x07
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	98 85       	ldd	r25, Y+8	; 0x08
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	d1 f0       	breq	.+52     	; 0x10ce <DIO_u8SetPinValue+0x1a6>
    109a:	2f 81       	ldd	r18, Y+7	; 0x07
    109c:	38 85       	ldd	r19, Y+8	; 0x08
    109e:	21 30       	cpi	r18, 0x01	; 1
    10a0:	31 05       	cpc	r19, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_u8SetPinValue+0x17e>
    10a4:	61 c0       	rjmp	.+194    	; 0x1168 <DIO_u8SetPinValue+0x240>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8SetPinValue+0x19c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8SetPinValue+0x198>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	4d c0       	rjmp	.+154    	; 0x1168 <DIO_u8SetPinValue+0x240>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8SetPinValue+0x1c4>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8SetPinValue+0x1c0>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	38 c0       	rjmp	.+112    	; 0x1168 <DIO_u8SetPinValue+0x240>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3e 83       	std	Y+6, r19	; 0x06
    1100:	2d 83       	std	Y+5, r18	; 0x05
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	c9 f0       	breq	.+50     	; 0x113c <DIO_u8SetPinValue+0x214>
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	51 f5       	brne	.+84     	; 0x1168 <DIO_u8SetPinValue+0x240>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_u8SetPinValue+0x20a>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_u8SetPinValue+0x206>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <DIO_u8SetPinValue+0x240>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0x232>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0x22e>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <DIO_u8SetPinValue+0x240>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_u8TogglePin>:

u8 DIO_u8TogglePin     (u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_u8TogglePin+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_u8TogglePin+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7))
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	08 f0       	brcs	.+2      	; 0x119a <DIO_u8TogglePin+0x1e>
    1198:	73 c0       	rjmp	.+230    	; 0x1280 <DIO_u8TogglePin+0x104>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <DIO_u8TogglePin+0x26>
    11a0:	6f c0       	rjmp	.+222    	; 0x1280 <DIO_u8TogglePin+0x104>
    {
        switch (Copy_u8PortId)
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3d 83       	std	Y+5, r19	; 0x05
    11aa:	2c 83       	std	Y+4, r18	; 0x04
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	49 f1       	breq	.+82     	; 0x1208 <DIO_u8TogglePin+0x8c>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <DIO_u8TogglePin+0x4e>
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <DIO_u8TogglePin+0x64>
    11c8:	5c c0       	rjmp	.+184    	; 0x1282 <DIO_u8TogglePin+0x106>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	71 f1       	breq	.+92     	; 0x1230 <DIO_u8TogglePin+0xb4>
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	e9 f1       	breq	.+122    	; 0x1258 <DIO_u8TogglePin+0xdc>
    11de:	51 c0       	rjmp	.+162    	; 0x1282 <DIO_u8TogglePin+0x106>
        {
        case DIO_u8_PORTA :TOG_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_u8TogglePin+0x82>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_u8TogglePin+0x7e>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3d c0       	rjmp	.+122    	; 0x1282 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTB :TOG_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8TogglePin+0xaa>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8TogglePin+0xa6>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	29 c0       	rjmp	.+82     	; 0x1282 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTC :TOG_BIT(DIO_PORTC_REG,Copy_u8PinId)   ; break;
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_u8TogglePin+0xd2>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_u8TogglePin+0xce>
    1252:	84 27       	eor	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	15 c0       	rjmp	.+42     	; 0x1282 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTD :TOG_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_u8TogglePin+0xfa>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_u8TogglePin+0xf6>
    127a:	84 27       	eor	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <DIO_u8TogglePin+0x106>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1280:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	28 97       	sbiw	r28, 0x08	; 8
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	6c 83       	std	Y+4, r22	; 0x04
    12ac:	5e 83       	std	Y+6, r21	; 0x06
    12ae:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <DIO_u8GetPinValue+0x28>
    12ba:	9f c0       	rjmp	.+318    	; 0x13fa <DIO_u8GetPinValue+0x166>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	88 30       	cpi	r24, 0x08	; 8
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <DIO_u8GetPinValue+0x30>
    12c2:	9b c0       	rjmp	.+310    	; 0x13fa <DIO_u8GetPinValue+0x166>
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	09 f4       	brne	.+2      	; 0x12ce <DIO_u8GetPinValue+0x3a>
    12cc:	96 c0       	rjmp	.+300    	; 0x13fa <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	38 87       	std	Y+8, r19	; 0x08
    12d6:	2f 83       	std	Y+7, r18	; 0x07
    12d8:	4f 81       	ldd	r20, Y+7	; 0x07
    12da:	58 85       	ldd	r21, Y+8	; 0x08
    12dc:	41 30       	cpi	r20, 0x01	; 1
    12de:	51 05       	cpc	r21, r1
    12e0:	a9 f1       	breq	.+106    	; 0x134c <DIO_u8GetPinValue+0xb8>
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	98 85       	ldd	r25, Y+8	; 0x08
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	91 05       	cpc	r25, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <DIO_u8GetPinValue+0x64>
    12ec:	2f 81       	ldd	r18, Y+7	; 0x07
    12ee:	38 85       	ldd	r19, Y+8	; 0x08
    12f0:	21 15       	cp	r18, r1
    12f2:	31 05       	cpc	r19, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <DIO_u8GetPinValue+0x7e>
    12f6:	82 c0       	rjmp	.+260    	; 0x13fc <DIO_u8GetPinValue+0x168>
    12f8:	4f 81       	ldd	r20, Y+7	; 0x07
    12fa:	58 85       	ldd	r21, Y+8	; 0x08
    12fc:	42 30       	cpi	r20, 0x02	; 2
    12fe:	51 05       	cpc	r21, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <DIO_u8GetPinValue+0x70>
    1302:	41 c0       	rjmp	.+130    	; 0x1386 <DIO_u8GetPinValue+0xf2>
    1304:	8f 81       	ldd	r24, Y+7	; 0x07
    1306:	98 85       	ldd	r25, Y+8	; 0x08
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_u8GetPinValue+0x7c>
    130e:	58 c0       	rjmp	.+176    	; 0x13c0 <DIO_u8GetPinValue+0x12c>
    1310:	75 c0       	rjmp	.+234    	; 0x13fc <DIO_u8GetPinValue+0x168>
        {
            case DIO_u8_PORTA :
                Local_u8PinValue = GET_BIT(DIO_PINA_REG,Copy_u8PinId);
    1312:	e9 e3       	ldi	r30, 0x39	; 57
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8GetPinValue+0x96>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_u8GetPinValue+0x92>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	29 f4       	brne	.+10     	; 0x1344 <DIO_u8GetPinValue+0xb0>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    133a:	ed 81       	ldd	r30, Y+5	; 0x05
    133c:	fe 81       	ldd	r31, Y+6	; 0x06
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
    1342:	5c c0       	rjmp	.+184    	; 0x13fc <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1344:	ed 81       	ldd	r30, Y+5	; 0x05
    1346:	fe 81       	ldd	r31, Y+6	; 0x06
    1348:	10 82       	st	Z, r1
    134a:	58 c0       	rjmp	.+176    	; 0x13fc <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    134c:	e6 e3       	ldi	r30, 0x36	; 54
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8GetPinValue+0xd0>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_u8GetPinValue+0xcc>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	29 f4       	brne	.+10     	; 0x137e <DIO_u8GetPinValue+0xea>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1374:	ed 81       	ldd	r30, Y+5	; 0x05
    1376:	fe 81       	ldd	r31, Y+6	; 0x06
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 83       	st	Z, r24
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    137e:	ed 81       	ldd	r30, Y+5	; 0x05
    1380:	fe 81       	ldd	r31, Y+6	; 0x06
    1382:	10 82       	st	Z, r1
    1384:	3b c0       	rjmp	.+118    	; 0x13fc <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    1386:	e3 e3       	ldi	r30, 0x33	; 51
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8GetPinValue+0x10a>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8GetPinValue+0x106>
    13a2:	ca 01       	movw	r24, r20
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <DIO_u8GetPinValue+0x124>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    13ae:	ed 81       	ldd	r30, Y+5	; 0x05
    13b0:	fe 81       	ldd	r31, Y+6	; 0x06
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 83       	st	Z, r24
    13b6:	22 c0       	rjmp	.+68     	; 0x13fc <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    13b8:	ed 81       	ldd	r30, Y+5	; 0x05
    13ba:	fe 81       	ldd	r31, Y+6	; 0x06
    13bc:	10 82       	st	Z, r1
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    13c0:	e0 e3       	ldi	r30, 0x30	; 48
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8GetPinValue+0x144>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_u8GetPinValue+0x140>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <DIO_u8GetPinValue+0x15e>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    13e8:	ed 81       	ldd	r30, Y+5	; 0x05
    13ea:	fe 81       	ldd	r31, Y+6	; 0x06
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    13f2:	ed 81       	ldd	r30, Y+5	; 0x05
    13f4:	fe 81       	ldd	r31, Y+6	; 0x06
    13f6:	10 82       	st	Z, r1
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <DIO_u8GetPinValue+0x168>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13fe:	28 96       	adiw	r28, 0x08	; 8
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2d 97       	sbiw	r28, 0x0d	; 13
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	08 f0       	brcs	.+2      	; 0x1434 <DIO_u8SetPortDirection+0x24>
    1432:	84 c0       	rjmp	.+264    	; 0x153c <DIO_u8SetPortDirection+0x12c>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 23       	and	r24, r24
    1438:	21 f0       	breq	.+8      	; 0x1442 <DIO_u8SetPortDirection+0x32>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	09 f0       	breq	.+2      	; 0x1442 <DIO_u8SetPortDirection+0x32>
    1440:	7d c0       	rjmp	.+250    	; 0x153c <DIO_u8SetPortDirection+0x12c>
    {
        switch (Copy_u8PortId)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3d 87       	std	Y+13, r19	; 0x0d
    144a:	2c 87       	std	Y+12, r18	; 0x0c
    144c:	8c 85       	ldd	r24, Y+12	; 0x0c
    144e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	71 f1       	breq	.+92     	; 0x14b2 <DIO_u8SetPortDirection+0xa2>
    1456:	2c 85       	ldd	r18, Y+12	; 0x0c
    1458:	3d 85       	ldd	r19, Y+13	; 0x0d
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <DIO_u8SetPortDirection+0x5a>
    1460:	8c 85       	ldd	r24, Y+12	; 0x0c
    1462:	9d 85       	ldd	r25, Y+13	; 0x0d
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	69 f0       	breq	.+26     	; 0x1482 <DIO_u8SetPortDirection+0x72>
    1468:	6a c0       	rjmp	.+212    	; 0x153e <DIO_u8SetPortDirection+0x12e>
    146a:	2c 85       	ldd	r18, Y+12	; 0x0c
    146c:	3d 85       	ldd	r19, Y+13	; 0x0d
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	b1 f1       	breq	.+108    	; 0x14e0 <DIO_u8SetPortDirection+0xd0>
    1474:	8c 85       	ldd	r24, Y+12	; 0x0c
    1476:	9d 85       	ldd	r25, Y+13	; 0x0d
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <DIO_u8SetPortDirection+0x70>
    147e:	47 c0       	rjmp	.+142    	; 0x150e <DIO_u8SetPortDirection+0xfe>
    1480:	5e c0       	rjmp	.+188    	; 0x153e <DIO_u8SetPortDirection+0x12e>
        {
            case DIO_u8_PORTA : 
                switch (Copy_u8PortDirection)
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3b 87       	std	Y+11, r19	; 0x0b
    148a:	2a 87       	std	Y+10, r18	; 0x0a
    148c:	8a 85       	ldd	r24, Y+10	; 0x0a
    148e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	59 f0       	breq	.+22     	; 0x14aa <DIO_u8SetPortDirection+0x9a>
    1494:	2a 85       	ldd	r18, Y+10	; 0x0a
    1496:	3b 85       	ldd	r19, Y+11	; 0x0b
    1498:	21 30       	cpi	r18, 0x01	; 1
    149a:	31 05       	cpc	r19, r1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <DIO_u8SetPortDirection+0x90>
    149e:	4f c0       	rjmp	.+158    	; 0x153e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRA_REG =0xff; break;
    14a0:	ea e3       	ldi	r30, 0x3A	; 58
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	80 83       	st	Z, r24
    14a8:	4a c0       	rjmp	.+148    	; 0x153e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRA_REG =0x00; break;
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	10 82       	st	Z, r1
    14b0:	46 c0       	rjmp	.+140    	; 0x153e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	39 87       	std	Y+9, r19	; 0x09
    14ba:	28 87       	std	Y+8, r18	; 0x08
    14bc:	88 85       	ldd	r24, Y+8	; 0x08
    14be:	99 85       	ldd	r25, Y+9	; 0x09
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	51 f0       	breq	.+20     	; 0x14d8 <DIO_u8SetPortDirection+0xc8>
    14c4:	28 85       	ldd	r18, Y+8	; 0x08
    14c6:	39 85       	ldd	r19, Y+9	; 0x09
    14c8:	21 30       	cpi	r18, 0x01	; 1
    14ca:	31 05       	cpc	r19, r1
    14cc:	c1 f5       	brne	.+112    	; 0x153e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
    14ce:	e7 e3       	ldi	r30, 0x37	; 55
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	80 83       	st	Z, r24
    14d6:	33 c0       	rjmp	.+102    	; 0x153e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
    14d8:	e7 e3       	ldi	r30, 0x37	; 55
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	10 82       	st	Z, r1
    14de:	2f c0       	rjmp	.+94     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3f 83       	std	Y+7, r19	; 0x07
    14e8:	2e 83       	std	Y+6, r18	; 0x06
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	51 f0       	breq	.+20     	; 0x1506 <DIO_u8SetPortDirection+0xf6>
    14f2:	2e 81       	ldd	r18, Y+6	; 0x06
    14f4:	3f 81       	ldd	r19, Y+7	; 0x07
    14f6:	21 30       	cpi	r18, 0x01	; 1
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f5       	brne	.+66     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 83       	st	Z, r24
    1504:	1c c0       	rjmp	.+56     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
    1506:	e4 e3       	ldi	r30, 0x34	; 52
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	10 82       	st	Z, r1
    150c:	18 c0       	rjmp	.+48     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	51 f0       	breq	.+20     	; 0x1534 <DIO_u8SetPortDirection+0x124>
    1520:	2c 81       	ldd	r18, Y+4	; 0x04
    1522:	3d 81       	ldd	r19, Y+5	; 0x05
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	51 f4       	brne	.+20     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
    152a:	e1 e3       	ldi	r30, 0x31	; 49
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	80 83       	st	Z, r24
    1532:	05 c0       	rjmp	.+10     	; 0x153e <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
    1534:	e1 e3       	ldi	r30, 0x31	; 49
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
    153a:	01 c0       	rjmp	.+2      	; 0x153e <DIO_u8SetPortDirection+0x12e>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    153c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    153e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1540:	2d 96       	adiw	r28, 0x0d	; 13
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_u8SetPortValue+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_u8SetPortValue+0x8>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3d 83       	std	Y+5, r19	; 0x05
    1570:	2c 83       	std	Y+4, r18	; 0x04
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	d1 f0       	breq	.+52     	; 0x15b0 <DIO_u8SetPortValue+0x5e>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <DIO_u8SetPortValue+0x3e>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <DIO_u8SetPortValue+0x54>
    158e:	1f c0       	rjmp	.+62     	; 0x15ce <DIO_u8SetPortValue+0x7c>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	81 f0       	breq	.+32     	; 0x15ba <DIO_u8SetPortValue+0x68>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <DIO_u8SetPortValue+0x72>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <DIO_u8SetPortValue+0x7c>
    {
        case DIO_u8_PORTA : DIO_PORTA_REG = Copy_u8PortValue; break;
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	80 83       	st	Z, r24
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
    15b0:	e8 e3       	ldi	r30, 0x38	; 56
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	80 83       	st	Z, r24
    15b8:	0b c0       	rjmp	.+22     	; 0x15d0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
    15ba:	e5 e3       	ldi	r30, 0x35	; 53
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	80 83       	st	Z, r24
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
    15c4:	e2 e3       	ldi	r30, 0x32	; 50
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	80 83       	st	Z, r24
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <DIO_u8SetPortValue+0x7e>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Dio_u8GetPortValue+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Dio_u8GetPortValue+0x8>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <Dio_u8GetPortValue+0xa>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    15f2:	7c 83       	std	Y+4, r23	; 0x04
    15f4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <Dio_u8GetPortValue+0x20>
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <Dio_u8GetPortValue+0x9e>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	d9 f1       	breq	.+118    	; 0x1680 <Dio_u8GetPortValue+0x9e>
    {
        switch (Copy_u8PortId)
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3e 83       	std	Y+6, r19	; 0x06
    1612:	2d 83       	std	Y+5, r18	; 0x05
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	e1 f0       	breq	.+56     	; 0x1656 <Dio_u8GetPortValue+0x74>
    161e:	2d 81       	ldd	r18, Y+5	; 0x05
    1620:	3e 81       	ldd	r19, Y+6	; 0x06
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <Dio_u8GetPortValue+0x50>
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	61 f0       	breq	.+24     	; 0x1648 <Dio_u8GetPortValue+0x66>
    1630:	28 c0       	rjmp	.+80     	; 0x1682 <Dio_u8GetPortValue+0xa0>
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    1634:	3e 81       	ldd	r19, Y+6	; 0x06
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	a1 f0       	breq	.+40     	; 0x1664 <Dio_u8GetPortValue+0x82>
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	b1 f0       	breq	.+44     	; 0x1672 <Dio_u8GetPortValue+0x90>
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <Dio_u8GetPortValue+0xa0>
        {
        case DIO_u8_PORTA :*Copy_Pu8PortValue = DIO_PINA_REG; break;
    1648:	e9 e3       	ldi	r30, 0x39	; 57
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	eb 81       	ldd	r30, Y+3	; 0x03
    1650:	fc 81       	ldd	r31, Y+4	; 0x04
    1652:	80 83       	st	Z, r24
    1654:	16 c0       	rjmp	.+44     	; 0x1682 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
    1656:	e6 e3       	ldi	r30, 0x36	; 54
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	eb 81       	ldd	r30, Y+3	; 0x03
    165e:	fc 81       	ldd	r31, Y+4	; 0x04
    1660:	80 83       	st	Z, r24
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
    1664:	e3 e3       	ldi	r30, 0x33	; 51
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	eb 81       	ldd	r30, Y+3	; 0x03
    166c:	fc 81       	ldd	r31, Y+4	; 0x04
    166e:	80 83       	st	Z, r24
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
    1672:	e0 e3       	ldi	r30, 0x30	; 48
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	eb 81       	ldd	r30, Y+3	; 0x03
    167a:	fc 81       	ldd	r31, Y+4	; 0x04
    167c:	80 83       	st	Z, r24
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <Dio_u8GetPortValue+0xa0>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1680:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
}
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <LCD_voidEnable>:
void LCD_4bitCmndDivider(u8 Copy_u8Cmnd);
void LCD_4bitCharDivider(u8 Copy_u8Cmnd);


void LCD_voidEnable(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	68 97       	sbiw	r28, 0x18	; 24
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e8       	ldi	r26, 0x80	; 128
    16ba:	bf e3       	ldi	r27, 0x3F	; 63
    16bc:	8d 8b       	std	Y+21, r24	; 0x15
    16be:	9e 8b       	std	Y+22, r25	; 0x16
    16c0:	af 8b       	std	Y+23, r26	; 0x17
    16c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	2b ea       	ldi	r18, 0xAB	; 171
    16ce:	3a ea       	ldi	r19, 0xAA	; 170
    16d0:	4a ea       	ldi	r20, 0xAA	; 170
    16d2:	5e e3       	ldi	r21, 0x3E	; 62
    16d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	89 8b       	std	Y+17, r24	; 0x11
    16de:	9a 8b       	std	Y+18, r25	; 0x12
    16e0:	ab 8b       	std	Y+19, r26	; 0x13
    16e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16e4:	69 89       	ldd	r22, Y+17	; 0x11
    16e6:	7a 89       	ldd	r23, Y+18	; 0x12
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	1c f4       	brge	.+6      	; 0x1702 <LCD_voidEnable+0x6c>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	88 8b       	std	Y+16, r24	; 0x10
    1700:	91 c0       	rjmp	.+290    	; 0x1824 <LCD_voidEnable+0x18e>
	else if (__tmp > 255)
    1702:	69 89       	ldd	r22, Y+17	; 0x11
    1704:	7a 89       	ldd	r23, Y+18	; 0x12
    1706:	8b 89       	ldd	r24, Y+19	; 0x13
    1708:	9c 89       	ldd	r25, Y+20	; 0x14
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	53 e4       	ldi	r21, 0x43	; 67
    1712:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <LCD_voidEnable+0x86>
    171a:	7b c0       	rjmp	.+246    	; 0x1812 <LCD_voidEnable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a e7       	ldi	r20, 0x7A	; 122
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8c 87       	std	Y+12, r24	; 0x0c
    1736:	9d 87       	std	Y+13, r25	; 0x0d
    1738:	ae 87       	std	Y+14, r26	; 0x0e
    173a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6c 85       	ldd	r22, Y+12	; 0x0c
    173e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1740:	8e 85       	ldd	r24, Y+14	; 0x0e
    1742:	9f 85       	ldd	r25, Y+15	; 0x0f
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	53 e4       	ldi	r21, 0x43	; 67
    174c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	88 87       	std	Y+8, r24	; 0x08
    1756:	99 87       	std	Y+9, r25	; 0x09
    1758:	aa 87       	std	Y+10, r26	; 0x0a
    175a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    175c:	68 85       	ldd	r22, Y+8	; 0x08
    175e:	79 85       	ldd	r23, Y+9	; 0x09
    1760:	8a 85       	ldd	r24, Y+10	; 0x0a
    1762:	9b 85       	ldd	r25, Y+11	; 0x0b
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_voidEnable+0xe8>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9f 83       	std	Y+7, r25	; 0x07
    177a:	8e 83       	std	Y+6, r24	; 0x06
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_voidEnable+0x166>
	else if (__tmp > 65535)
    177e:	68 85       	ldd	r22, Y+8	; 0x08
    1780:	79 85       	ldd	r23, Y+9	; 0x09
    1782:	8a 85       	ldd	r24, Y+10	; 0x0a
    1784:	9b 85       	ldd	r25, Y+11	; 0x0b
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_voidEnable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6c 85       	ldd	r22, Y+12	; 0x0c
    1798:	7d 85       	ldd	r23, Y+13	; 0x0d
    179a:	8e 85       	ldd	r24, Y+14	; 0x0e
    179c:	9f 85       	ldd	r25, Y+15	; 0x0f
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9f 83       	std	Y+7, r25	; 0x07
    17bc:	8e 83       	std	Y+6, r24	; 0x06
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_voidEnable+0x148>
    17c0:	89 e1       	ldi	r24, 0x19	; 25
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9d 83       	std	Y+5, r25	; 0x05
    17c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_voidEnable+0x136>
    17d0:	9d 83       	std	Y+5, r25	; 0x05
    17d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	9f 81       	ldd	r25, Y+7	; 0x07
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9f 83       	std	Y+7, r25	; 0x07
    17dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	9f 81       	ldd	r25, Y+7	; 0x07
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_voidEnable+0x12a>
    17e6:	24 c0       	rjmp	.+72     	; 0x1830 <LCD_voidEnable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	68 85       	ldd	r22, Y+8	; 0x08
    17ea:	79 85       	ldd	r23, Y+9	; 0x09
    17ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9f 83       	std	Y+7, r25	; 0x07
    17fa:	8e 83       	std	Y+6, r24	; 0x06
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	9b 81       	ldd	r25, Y+3	; 0x03
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_voidEnable+0x172>
    180c:	9b 83       	std	Y+3, r25	; 0x03
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_voidEnable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1812:	69 89       	ldd	r22, Y+17	; 0x11
    1814:	7a 89       	ldd	r23, Y+18	; 0x12
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	88 8b       	std	Y+16, r24	; 0x10
    1824:	88 89       	ldd	r24, Y+16	; 0x10
    1826:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	8a 95       	dec	r24
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_voidEnable+0x194>
    182e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW); 
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
}
    183a:	68 96       	adiw	r28, 0x18	; 24
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <LCD_4bitCmndDivider>:

void LCD_4bitCmndDivider(u8 Copy_u8Cmnd)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	6d 97       	sbiw	r28, 0x1d	; 29
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitCmnd(Copy_u8Cmnd);
    1862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1864:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSend4BitCmnd>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e8       	ldi	r26, 0x80	; 128
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	89 8f       	std	Y+25, r24	; 0x19
    1872:	9a 8f       	std	Y+26, r25	; 0x1a
    1874:	ab 8f       	std	Y+27, r26	; 0x1b
    1876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	53 e4       	ldi	r21, 0x43	; 67
    1888:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8d 8b       	std	Y+21, r24	; 0x15
    1892:	9e 8b       	std	Y+22, r25	; 0x16
    1894:	af 8b       	std	Y+23, r26	; 0x17
    1896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_4bitCmndDivider+0x6e>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_4bitCmndDivider+0xec>
	else if (__tmp > 65535)
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_4bitCmndDivider+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_4bitCmndDivider+0xce>
    18fc:	89 e1       	ldi	r24, 0x19	; 25
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	9a 89       	ldd	r25, Y+18	; 0x12
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_4bitCmndDivider+0xbc>
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_4bitCmndDivider+0xb0>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_4bitCmndDivider+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6d 89       	ldd	r22, Y+21	; 0x15
    1926:	7e 89       	ldd	r23, Y+22	; 0x16
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	98 89       	ldd	r25, Y+16	; 0x10
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_4bitCmndDivider+0xf8>
    1948:	98 8b       	std	Y+16, r25	; 0x10
    194a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitCmnd(Copy_u8Cmnd<<4);
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	82 95       	swap	r24
    1950:	80 7f       	andi	r24, 0xF0	; 240
    1952:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSend4BitCmnd>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e8       	ldi	r26, 0x80	; 128
    195c:	bf e3       	ldi	r27, 0x3F	; 63
    195e:	8b 87       	std	Y+11, r24	; 0x0b
    1960:	9c 87       	std	Y+12, r25	; 0x0c
    1962:	ad 87       	std	Y+13, r26	; 0x0d
    1964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	53 e4       	ldi	r21, 0x43	; 67
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	98 87       	std	Y+8, r25	; 0x08
    1982:	a9 87       	std	Y+9, r26	; 0x09
    1984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e8       	ldi	r20, 0x80	; 128
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <LCD_4bitCmndDivider+0x15c>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <LCD_4bitCmndDivider+0x1da>
	else if (__tmp > 65535)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	57 e4       	ldi	r21, 0x47	; 71
    19b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <LCD_4bitCmndDivider+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <LCD_4bitCmndDivider+0x1bc>
    19ea:	89 e1       	ldi	r24, 0x19	; 25
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_4bitCmndDivider+0x1aa>
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <LCD_4bitCmndDivider+0x19e>
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <LCD_4bitCmndDivider+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_4bitCmndDivider+0x1e6>
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1a3a:	6d 96       	adiw	r28, 0x1d	; 29
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <LCD_4bitCharDivider>:

void LCD_4bitCharDivider(u8 Copy_u8Cmnd)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	6d 97       	sbiw	r28, 0x1d	; 29
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitChar(Copy_u8Cmnd);
    1a62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_voidSend4BitChar>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e8       	ldi	r26, 0x80	; 128
    1a72:	bf e3       	ldi	r27, 0x3F	; 63
    1a74:	89 8f       	std	Y+25, r24	; 0x19
    1a76:	9a 8f       	std	Y+26, r25	; 0x1a
    1a78:	ab 8f       	std	Y+27, r26	; 0x1b
    1a7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8d 8b       	std	Y+21, r24	; 0x15
    1a96:	9e 8b       	std	Y+22, r25	; 0x16
    1a98:	af 8b       	std	Y+23, r26	; 0x17
    1a9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_4bitCharDivider+0x72>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_4bitCharDivider+0xf0>
	else if (__tmp > 65535)
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_4bitCharDivider+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_4bitCharDivider+0xd2>
    1b00:	89 e1       	ldi	r24, 0x19	; 25
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a 8b       	std	Y+18, r25	; 0x12
    1b06:	89 8b       	std	Y+17, r24	; 0x11
    1b08:	89 89       	ldd	r24, Y+17	; 0x11
    1b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_4bitCharDivider+0xc0>
    1b10:	9a 8b       	std	Y+18, r25	; 0x12
    1b12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9c 8b       	std	Y+20, r25	; 0x14
    1b1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b20:	9c 89       	ldd	r25, Y+20	; 0x14
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_4bitCharDivider+0xb4>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_4bitCharDivider+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	98 8b       	std	Y+16, r25	; 0x10
    1b42:	8f 87       	std	Y+15, r24	; 0x0f
    1b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b46:	98 89       	ldd	r25, Y+16	; 0x10
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_4bitCharDivider+0xfc>
    1b4c:	98 8b       	std	Y+16, r25	; 0x10
    1b4e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitChar(Copy_u8Cmnd<<4);
    1b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	82 95       	swap	r24
    1b58:	92 95       	swap	r25
    1b5a:	90 7f       	andi	r25, 0xF0	; 240
    1b5c:	98 27       	eor	r25, r24
    1b5e:	80 7f       	andi	r24, 0xF0	; 240
    1b60:	98 27       	eor	r25, r24
    1b62:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_voidSend4BitChar>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	bf e3       	ldi	r27, 0x3F	; 63
    1b6e:	8b 87       	std	Y+11, r24	; 0x0b
    1b70:	9c 87       	std	Y+12, r25	; 0x0c
    1b72:	ad 87       	std	Y+13, r26	; 0x0d
    1b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8f 83       	std	Y+7, r24	; 0x07
    1b90:	98 87       	std	Y+8, r25	; 0x08
    1b92:	a9 87       	std	Y+9, r26	; 0x09
    1b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCD_4bitCharDivider+0x16c>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <LCD_4bitCharDivider+0x1ea>
	else if (__tmp > 65535)
    1bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bba:	78 85       	ldd	r23, Y+8	; 0x08
    1bbc:	89 85       	ldd	r24, Y+9	; 0x09
    1bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <LCD_4bitCharDivider+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCD_4bitCharDivider+0x1cc>
    1bfa:	89 e1       	ldi	r24, 0x19	; 25
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_4bitCharDivider+0x1ba>
    1c0a:	9c 83       	std	Y+4, r25	; 0x04
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCD_4bitCharDivider+0x1ae>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <LCD_4bitCharDivider+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_4bitCharDivider+0x1f6>
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1c4a:	6d 96       	adiw	r28, 0x1d	; 29
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <LCD_voidSend4BitCmnd>:

void LCD_voidSend4BitCmnd(u8 Copy_u8Cmnd)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	2f 97       	sbiw	r28, 0x0f	; 15
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 2f       	mov	r25, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	99 27       	eor	r25, r25
    1c84:	99 1f       	adc	r25, r25
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	64 e0       	ldi	r22, 0x04	; 4
    1c8a:	49 2f       	mov	r20, r25
    1c8c:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    1c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c92:	82 95       	swap	r24
    1c94:	86 95       	lsr	r24
    1c96:	86 95       	lsr	r24
    1c98:	83 70       	andi	r24, 0x03	; 3
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	91 70       	andi	r25, 0x01	; 1
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	62 e0       	ldi	r22, 0x02	; 2
    1ca2:	49 2f       	mov	r20, r25
    1ca4:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	82 95       	swap	r24
    1cac:	86 95       	lsr	r24
    1cae:	87 70       	andi	r24, 0x07	; 7
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	91 70       	andi	r25, 0x01	; 1
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	49 2f       	mov	r20, r25
    1cba:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    1cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc0:	82 95       	swap	r24
    1cc2:	8f 70       	andi	r24, 0x0F	; 15
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	91 70       	andi	r25, 0x01	; 1
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	49 2f       	mov	r20, r25
    1cce:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    LCD_voidEnable();
    1cd2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_voidEnable>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	8b 87       	std	Y+11, r24	; 0x0b
    1ce0:	9c 87       	std	Y+12, r25	; 0x0c
    1ce2:	ad 87       	std	Y+13, r26	; 0x0d
    1ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a e7       	ldi	r20, 0x7A	; 122
    1cf4:	53 e4       	ldi	r21, 0x43	; 67
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_voidSend4BitCmnd+0xcc>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_voidSend4BitCmnd+0x14a>
	else if (__tmp > 65535)
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_voidSend4BitCmnd+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_voidSend4BitCmnd+0x12c>
    1d6a:	89 e1       	ldi	r24, 0x19	; 25
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_voidSend4BitCmnd+0x11a>
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_voidSend4BitCmnd+0x10e>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <LCD_voidSend4BitCmnd+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_voidSend4BitCmnd+0x156>
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    1dba:	2f 96       	adiw	r28, 0x0f	; 15
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_voidSend4BitChar>:

void LCD_voidSend4BitChar(u8 Copy_u8Cmnd)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	2f 97       	sbiw	r28, 0x0f	; 15
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	63 e0       	ldi	r22, 0x03	; 3
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    1dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dee:	98 2f       	mov	r25, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	99 27       	eor	r25, r25
    1df4:	99 1f       	adc	r25, r25
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	64 e0       	ldi	r22, 0x04	; 4
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	82 95       	swap	r24
    1e04:	86 95       	lsr	r24
    1e06:	86 95       	lsr	r24
    1e08:	83 70       	andi	r24, 0x03	; 3
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	91 70       	andi	r25, 0x01	; 1
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	49 2f       	mov	r20, r25
    1e14:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    1e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1a:	82 95       	swap	r24
    1e1c:	86 95       	lsr	r24
    1e1e:	87 70       	andi	r24, 0x07	; 7
    1e20:	98 2f       	mov	r25, r24
    1e22:	91 70       	andi	r25, 0x01	; 1
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	49 2f       	mov	r20, r25
    1e2a:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    1e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e30:	82 95       	swap	r24
    1e32:	8f 70       	andi	r24, 0x0F	; 15
    1e34:	98 2f       	mov	r25, r24
    1e36:	91 70       	andi	r25, 0x01	; 1
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	49 2f       	mov	r20, r25
    1e3e:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    LCD_voidEnable();
    1e42:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_voidEnable>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	8b 87       	std	Y+11, r24	; 0x0b
    1e50:	9c 87       	std	Y+12, r25	; 0x0c
    1e52:	ad 87       	std	Y+13, r26	; 0x0d
    1e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	53 e4       	ldi	r21, 0x43	; 67
    1e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8f 83       	std	Y+7, r24	; 0x07
    1e70:	98 87       	std	Y+8, r25	; 0x08
    1e72:	a9 87       	std	Y+9, r26	; 0x09
    1e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_voidSend4BitChar+0xcc>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_voidSend4BitChar+0x14a>
	else if (__tmp > 65535)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_voidSend4BitChar+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_voidSend4BitChar+0x12c>
    1eda:	89 e1       	ldi	r24, 0x19	; 25
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_voidSend4BitChar+0x11a>
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_voidSend4BitChar+0x10e>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_voidSend4BitChar+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_voidSend4BitChar+0x156>
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    1f2a:	2f 96       	adiw	r28, 0x0f	; 15
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <LCD_voidWriteCmnd>:


void LCD_voidWriteCmnd(u8 Copy_u8Cmnd)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	89 83       	std	Y+1, r24	; 0x01
    /* 4- latching E  for "Tpw" to pass data from i\o buffer to registers*/
    LCD_voidEnable();
    #endif
    /*4 bit init*/
    #if LCD4BIT
    LCD_4bitCmndDivider(Copy_u8Cmnd);
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	0e 94 26 0c 	call	0x184c	; 0x184c <LCD_4bitCmndDivider>
    #endif
}
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
    #endif
    /* 4 bit */
    #if LCD4BIT    
    /*4 bit */
    
    LCD_4bitCharDivider(Copy_u8Char);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_4bitCharDivider>
      
    #endif 
}
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	e8 97       	sbiw	r28, 0x38	; 56
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 ea       	ldi	r26, 0xA0	; 160
    1f8a:	b1 e4       	ldi	r27, 0x41	; 65
    1f8c:	8d ab       	std	Y+53, r24	; 0x35
    1f8e:	9e ab       	std	Y+54, r25	; 0x36
    1f90:	af ab       	std	Y+55, r26	; 0x37
    1f92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6d a9       	ldd	r22, Y+53	; 0x35
    1f96:	7e a9       	ldd	r23, Y+54	; 0x36
    1f98:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a e7       	ldi	r20, 0x7A	; 122
    1fa2:	53 e4       	ldi	r21, 0x43	; 67
    1fa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 ab       	std	Y+49, r24	; 0x31
    1fae:	9a ab       	std	Y+50, r25	; 0x32
    1fb0:	ab ab       	std	Y+51, r26	; 0x33
    1fb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fba:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <LCD_voidInit+0x66>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	98 ab       	std	Y+48, r25	; 0x30
    1fd2:	8f a7       	std	Y+47, r24	; 0x2f
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <LCD_voidInit+0xc6>
    2018:	89 e1       	ldi	r24, 0x19	; 25
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9e a7       	std	Y+46, r25	; 0x2e
    201e:	8d a7       	std	Y+45, r24	; 0x2d
    2020:	8d a5       	ldd	r24, Y+45	; 0x2d
    2022:	9e a5       	ldd	r25, Y+46	; 0x2e
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_voidInit+0xb4>
    2028:	9e a7       	std	Y+46, r25	; 0x2e
    202a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	98 ab       	std	Y+48, r25	; 0x30
    2034:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <LCD_voidInit+0xa8>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	69 a9       	ldd	r22, Y+49	; 0x31
    2042:	7a a9       	ldd	r23, Y+50	; 0x32
    2044:	8b a9       	ldd	r24, Y+51	; 0x33
    2046:	9c a9       	ldd	r25, Y+52	; 0x34
    2048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	9c a7       	std	Y+44, r25	; 0x2c
    205a:	8b a7       	std	Y+43, r24	; 0x2b
    205c:	8b a5       	ldd	r24, Y+43	; 0x2b
    205e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_voidInit+0xf0>
    2064:	9c a7       	std	Y+44, r25	; 0x2c
    2066:	8b a7       	std	Y+43, r24	; 0x2b
    LCD_voidWriteCmnd(0b00000110);
    #endif
    /*4 bit*/
    #if LCD4BIT
    _delay_ms(20);
    LCD_voidWriteCmnd(0x03); // N =F =0
    2068:	83 e0       	ldi	r24, 0x03	; 3
    206a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 ea       	ldi	r26, 0xA0	; 160
    2074:	b0 e4       	ldi	r27, 0x40	; 64
    2076:	8f a3       	std	Y+39, r24	; 0x27
    2078:	98 a7       	std	Y+40, r25	; 0x28
    207a:	a9 a7       	std	Y+41, r26	; 0x29
    207c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6f a1       	ldd	r22, Y+39	; 0x27
    2080:	78 a5       	ldd	r23, Y+40	; 0x28
    2082:	89 a5       	ldd	r24, Y+41	; 0x29
    2084:	9a a5       	ldd	r25, Y+42	; 0x2a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8b a3       	std	Y+35, r24	; 0x23
    2098:	9c a3       	std	Y+36, r25	; 0x24
    209a:	ad a3       	std	Y+37, r26	; 0x25
    209c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_voidInit+0x150>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6f a1       	ldd	r22, Y+39	; 0x27
    20da:	78 a5       	ldd	r23, Y+40	; 0x28
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_voidInit+0x1b0>
    2102:	89 e1       	ldi	r24, 0x19	; 25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
    210a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210c:	98 a1       	ldd	r25, Y+32	; 0x20
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_voidInit+0x19e>
    2112:	98 a3       	std	Y+32, r25	; 0x20
    2114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_voidInit+0x192>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9a a3       	std	Y+34, r25	; 0x22
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	89 a1       	ldd	r24, Y+33	; 0x21
    2140:	9a a1       	ldd	r25, Y+34	; 0x22
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_voidInit+0x1da>
    214e:	9e 8f       	std	Y+30, r25	; 0x1e
    2150:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);
    LCD_voidWriteCmnd(0x02);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a6 e1       	ldi	r26, 0x16	; 22
    215e:	b3 e4       	ldi	r27, 0x43	; 67
    2160:	89 8f       	std	Y+25, r24	; 0x19
    2162:	9a 8f       	std	Y+26, r25	; 0x1a
    2164:	ab 8f       	std	Y+27, r26	; 0x1b
    2166:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	69 8d       	ldd	r22, Y+25	; 0x19
    216a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a e7       	ldi	r20, 0x7A	; 122
    2176:	53 e4       	ldi	r21, 0x43	; 67
    2178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8d 8b       	std	Y+21, r24	; 0x15
    2182:	9e 8b       	std	Y+22, r25	; 0x16
    2184:	af 8b       	std	Y+23, r26	; 0x17
    2186:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2188:	6d 89       	ldd	r22, Y+21	; 0x15
    218a:	7e 89       	ldd	r23, Y+22	; 0x16
    218c:	8f 89       	ldd	r24, Y+23	; 0x17
    218e:	98 8d       	ldd	r25, Y+24	; 0x18
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <LCD_voidInit+0x23a>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9c 8b       	std	Y+20, r25	; 0x14
    21a6:	8b 8b       	std	Y+19, r24	; 0x13
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	69 8d       	ldd	r22, Y+25	; 0x19
    21c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	8b 8b       	std	Y+19, r24	; 0x13
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <LCD_voidInit+0x29a>
    21ec:	89 e1       	ldi	r24, 0x19	; 25
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9a 8b       	std	Y+18, r25	; 0x12
    21f2:	89 8b       	std	Y+17, r24	; 0x11
    21f4:	89 89       	ldd	r24, Y+17	; 0x11
    21f6:	9a 89       	ldd	r25, Y+18	; 0x12
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_voidInit+0x288>
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	9c 89       	ldd	r25, Y+20	; 0x14
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8b 89       	ldd	r24, Y+19	; 0x13
    220c:	9c 89       	ldd	r25, Y+20	; 0x14
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <LCD_voidInit+0x27c>
    2212:	14 c0       	rjmp	.+40     	; 0x223c <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9c 8b       	std	Y+20, r25	; 0x14
    2226:	8b 8b       	std	Y+19, r24	; 0x13
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	98 8b       	std	Y+16, r25	; 0x10
    222e:	8f 87       	std	Y+15, r24	; 0x0f
    2230:	8f 85       	ldd	r24, Y+15	; 0x0f
    2232:	98 89       	ldd	r25, Y+16	; 0x10
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_voidInit+0x2c4>
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(150); 
    LCD_voidWriteCmnd(0x28);
    223c:	88 e2       	ldi	r24, 0x28	; 40
    223e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 ea       	ldi	r26, 0xA0	; 160
    2248:	b0 e4       	ldi	r27, 0x40	; 64
    224a:	8b 87       	std	Y+11, r24	; 0x0b
    224c:	9c 87       	std	Y+12, r25	; 0x0c
    224e:	ad 87       	std	Y+13, r26	; 0x0d
    2250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a e7       	ldi	r20, 0x7A	; 122
    2260:	53 e4       	ldi	r21, 0x43	; 67
    2262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8f 83       	std	Y+7, r24	; 0x07
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	a9 87       	std	Y+9, r26	; 0x09
    2270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <LCD_voidInit+0x324>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <LCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <LCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <LCD_voidInit+0x384>
    22d6:	89 e1       	ldi	r24, 0x19	; 25
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_voidInit+0x372>
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <LCD_voidInit+0x366>
    22fc:	14 c0       	rjmp	.+40     	; 0x2326 <LCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_voidInit+0x3ae>
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidWriteCmnd(0x0F); 
    2326:	8f e0       	ldi	r24, 0x0F	; 15
    2328:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x01); 
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x06); 
    2332:	86 e0       	ldi	r24, 0x06	; 6
    2334:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    #endif
}
    2338:	e8 96       	adiw	r28, 0x38	; 56
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <LCD_voidWriteString+0x6>
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9b 83       	std	Y+3, r25	; 0x03
    2358:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8CharCounter = 0 ;
    235a:	19 82       	std	Y+1, r1	; 0x01
    235c:	0e c0       	rjmp	.+28     	; 0x237a <LCD_voidWriteString+0x30>
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	80 81       	ld	r24, Z
    2370:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_voidWriteChar>
        Local_u8CharCounter ++;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    u8 Local_u8CharCounter = 0 ;
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	fc 01       	movw	r30, r24
    2386:	e2 0f       	add	r30, r18
    2388:	f3 1f       	adc	r31, r19
    238a:	80 81       	ld	r24, Z
    238c:	88 23       	and	r24, r24
    238e:	39 f7       	brne	.-50     	; 0x235e <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
        Local_u8CharCounter ++;
    }
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNo ,u8 Copy_u8Location)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <LCD_u8GoToXY+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <LCD_u8GoToXY+0x8>
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	8a 83       	std	Y+2, r24	; 0x02
    23ac:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Location < 40)
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	88 32       	cpi	r24, 0x28	; 40
    23b6:	b0 f5       	brcc	.+108    	; 0x2424 <LCD_u8GoToXY+0x88>
    {
        switch (Copy_u8LineNo)
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3d 83       	std	Y+5, r19	; 0x05
    23c0:	2c 83       	std	Y+4, r18	; 0x04
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	91 05       	cpc	r25, r1
    23ca:	d9 f0       	breq	.+54     	; 0x2402 <LCD_u8GoToXY+0x66>
    23cc:	2c 81       	ldd	r18, Y+4	; 0x04
    23ce:	3d 81       	ldd	r19, Y+5	; 0x05
    23d0:	23 30       	cpi	r18, 0x03	; 3
    23d2:	31 05       	cpc	r19, r1
    23d4:	34 f4       	brge	.+12     	; 0x23e2 <LCD_u8GoToXY+0x46>
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	61 f0       	breq	.+24     	; 0x23f8 <LCD_u8GoToXY+0x5c>
    23e0:	1f c0       	rjmp	.+62     	; 0x2420 <LCD_u8GoToXY+0x84>
    23e2:	2c 81       	ldd	r18, Y+4	; 0x04
    23e4:	3d 81       	ldd	r19, Y+5	; 0x05
    23e6:	23 30       	cpi	r18, 0x03	; 3
    23e8:	31 05       	cpc	r19, r1
    23ea:	81 f0       	breq	.+32     	; 0x240c <LCD_u8GoToXY+0x70>
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	91 05       	cpc	r25, r1
    23f4:	81 f0       	breq	.+32     	; 0x2416 <LCD_u8GoToXY+0x7a>
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <LCD_u8GoToXY+0x84>
        {
            case LCD_u8_LINE1 : LCD_voidWriteCmnd(Copy_u8Location + 0x80 );break;           
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	80 58       	subi	r24, 0x80	; 128
    23fc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2400:	12 c0       	rjmp	.+36     	; 0x2426 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE2 : LCD_voidWriteCmnd(Copy_u8Location + 0xC0 );break;  
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	80 54       	subi	r24, 0x40	; 64
    2406:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE3 : LCD_voidWriteCmnd(Copy_u8Location + 0x94 );break;  
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	8c 56       	subi	r24, 0x6C	; 108
    2410:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE4 : LCD_voidWriteCmnd(Copy_u8Location + 0xD4 );break;  
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	8c 52       	subi	r24, 0x2C	; 44
    241a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <LCD_u8GoToXY+0x8a>
            default           : Local_u8ReturnState = STD_TYPE_NOK;        break;
    2420:	19 82       	std	Y+1, r1	; 0x01
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <LCD_u8GoToXY+0x8a>
        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK; 
    2424:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    0x00 : first location in line 1
    0x40 (64) : first location in line 2
    when we represent these nummbers in the stars of IR this will result the 
    instructions above 
    */
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <LCD_voidShift>:

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <LCD_voidShift+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <LCD_voidShift+0x8>
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	8a 83       	std	Y+2, r24	; 0x02
    2448:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Counter = 0;
    244a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    244c:	19 82       	std	Y+1, r1	; 0x01
    244e:	19 c0       	rjmp	.+50     	; 0x2482 <LCD_voidShift+0x4a>
    {
        switch (Copy_u8ShiftDirection)
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	3d 83       	std	Y+5, r19	; 0x05
    2458:	2c 83       	std	Y+4, r18	; 0x04
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	31 f0       	breq	.+12     	; 0x246e <LCD_voidShift+0x36>
    2462:	2c 81       	ldd	r18, Y+4	; 0x04
    2464:	3d 81       	ldd	r19, Y+5	; 0x05
    2466:	21 30       	cpi	r18, 0x01	; 1
    2468:	31 05       	cpc	r19, r1
    246a:	29 f0       	breq	.+10     	; 0x2476 <LCD_voidShift+0x3e>
    246c:	07 c0       	rjmp	.+14     	; 0x247c <LCD_voidShift+0x44>
        {
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
    246e:	8c e1       	ldi	r24, 0x1C	; 28
    2470:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2474:	03 c0       	rjmp	.+6      	; 0x247c <LCD_voidShift+0x44>
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
    2476:	88 e1       	ldi	r24, 0x18	; 24
    2478:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
}

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    u8 Local_u8Counter = 0;
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	99 81       	ldd	r25, Y+1	; 0x01
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	98 17       	cp	r25, r24
    2488:	18 f3       	brcs	.-58     	; 0x2450 <LCD_voidShift+0x18>
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
        _delay_ms(1);
        }
    }
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <LCD_voidXYString>:

void LCD_voidXYString(u8 Copy_u8LineNo ,u8 Copy_u8Location,u8 *Copy_Pu8Srting)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_voidXYString+0x6>
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <LCD_voidXYString+0x8>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	6a 83       	std	Y+2, r22	; 0x02
    24aa:	5c 83       	std	Y+4, r21	; 0x04
    24ac:	4b 83       	std	Y+3, r20	; 0x03
    LCD_u8GoToXY(Copy_u8LineNo,Copy_u8Location);
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	6a 81       	ldd	r22, Y+2	; 0x02
    24b2:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_u8GoToXY>
    LCD_voidWriteString(Copy_Pu8Srting);
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_voidWriteString>
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <LCD_u8WriteSpecialChar>:

u8 LCD_u8WriteSpecialChar(u8 Copy_u8CharIndex,u8 *Copy_Au8Char)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	27 97       	sbiw	r28, 0x07	; 7
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	8b 83       	std	Y+3, r24	; 0x03
    24e2:	7d 83       	std	Y+5, r23	; 0x05
    24e4:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Conter = 0;
    24ea:	19 82       	std	Y+1, r1	; 0x01
    /*choose the place in CGRAM to write your special character*/
    switch (Copy_u8CharIndex)
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	3f 83       	std	Y+7, r19	; 0x07
    24f4:	2e 83       	std	Y+6, r18	; 0x06
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	a9 f1       	breq	.+106    	; 0x256a <LCD_u8WriteSpecialChar+0x9e>
    2500:	2e 81       	ldd	r18, Y+6	; 0x06
    2502:	3f 81       	ldd	r19, Y+7	; 0x07
    2504:	24 30       	cpi	r18, 0x04	; 4
    2506:	31 05       	cpc	r19, r1
    2508:	7c f4       	brge	.+30     	; 0x2528 <LCD_u8WriteSpecialChar+0x5c>
    250a:	8e 81       	ldd	r24, Y+6	; 0x06
    250c:	9f 81       	ldd	r25, Y+7	; 0x07
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	91 05       	cpc	r25, r1
    2512:	19 f1       	breq	.+70     	; 0x255a <LCD_u8WriteSpecialChar+0x8e>
    2514:	2e 81       	ldd	r18, Y+6	; 0x06
    2516:	3f 81       	ldd	r19, Y+7	; 0x07
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	14 f5       	brge	.+68     	; 0x2562 <LCD_u8WriteSpecialChar+0x96>
    251e:	8e 81       	ldd	r24, Y+6	; 0x06
    2520:	9f 81       	ldd	r25, Y+7	; 0x07
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	b1 f0       	breq	.+44     	; 0x2552 <LCD_u8WriteSpecialChar+0x86>
    2526:	35 c0       	rjmp	.+106    	; 0x2592 <LCD_u8WriteSpecialChar+0xc6>
    2528:	2e 81       	ldd	r18, Y+6	; 0x06
    252a:	3f 81       	ldd	r19, Y+7	; 0x07
    252c:	25 30       	cpi	r18, 0x05	; 5
    252e:	31 05       	cpc	r19, r1
    2530:	21 f1       	breq	.+72     	; 0x257a <LCD_u8WriteSpecialChar+0xae>
    2532:	8e 81       	ldd	r24, Y+6	; 0x06
    2534:	9f 81       	ldd	r25, Y+7	; 0x07
    2536:	85 30       	cpi	r24, 0x05	; 5
    2538:	91 05       	cpc	r25, r1
    253a:	dc f0       	brlt	.+54     	; 0x2572 <LCD_u8WriteSpecialChar+0xa6>
    253c:	2e 81       	ldd	r18, Y+6	; 0x06
    253e:	3f 81       	ldd	r19, Y+7	; 0x07
    2540:	26 30       	cpi	r18, 0x06	; 6
    2542:	31 05       	cpc	r19, r1
    2544:	f1 f0       	breq	.+60     	; 0x2582 <LCD_u8WriteSpecialChar+0xb6>
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	87 30       	cpi	r24, 0x07	; 7
    254c:	91 05       	cpc	r25, r1
    254e:	e9 f0       	breq	.+58     	; 0x258a <LCD_u8WriteSpecialChar+0xbe>
    2550:	20 c0       	rjmp	.+64     	; 0x2592 <LCD_u8WriteSpecialChar+0xc6>
    {
    case LCD_u8_SPECHIAL0: LCD_voidWriteCmnd(0b01000000); break;
    2552:	80 e4       	ldi	r24, 0x40	; 64
    2554:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2558:	1d c0       	rjmp	.+58     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL1: LCD_voidWriteCmnd(0b01001000); break;
    255a:	88 e4       	ldi	r24, 0x48	; 72
    255c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2560:	19 c0       	rjmp	.+50     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL2: LCD_voidWriteCmnd(0b01010000); break;
    2562:	80 e5       	ldi	r24, 0x50	; 80
    2564:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2568:	15 c0       	rjmp	.+42     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL3: LCD_voidWriteCmnd(0b01011000); break;
    256a:	88 e5       	ldi	r24, 0x58	; 88
    256c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2570:	11 c0       	rjmp	.+34     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL4: LCD_voidWriteCmnd(0b01100000); break;
    2572:	80 e6       	ldi	r24, 0x60	; 96
    2574:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2578:	0d c0       	rjmp	.+26     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL5: LCD_voidWriteCmnd(0b01101000); break;
    257a:	88 e6       	ldi	r24, 0x68	; 104
    257c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2580:	09 c0       	rjmp	.+18     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    2582:	80 e7       	ldi	r24, 0x70	; 112
    2584:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    258a:	88 e7       	ldi	r24, 0x78	; 120
    258c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_voidWriteCmnd>
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <LCD_u8WriteSpecialChar+0xc8>
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    2592:	1a 82       	std	Y+2, r1	; 0x02
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	0e c0       	rjmp	.+28     	; 0x25b4 <LCD_u8WriteSpecialChar+0xe8>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	9d 81       	ldd	r25, Y+5	; 0x05
    25a2:	fc 01       	movw	r30, r24
    25a4:	e2 0f       	add	r30, r18
    25a6:	f3 1f       	adc	r31, r19
    25a8:	80 81       	ld	r24, Z
    25aa:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_voidWriteChar>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 30       	cpi	r24, 0x08	; 8
    25b8:	78 f3       	brcs	.-34     	; 0x2598 <LCD_u8WriteSpecialChar+0xcc>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    }
    return Local_u8ReturnState;
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25bc:	27 96       	adiw	r28, 0x07	; 7
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <Num_u16ToString>:

void Num_u16ToString(u16 Copu_u16Num, u8 *Copu_Au8Str)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <Num_u16ToString+0x6>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <Num_u16ToString+0x8>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	7c 83       	std	Y+4, r23	; 0x04
    25e0:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(Copu_Au8Str, "%d", Copu_u16Num);
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <Num_u16ToString+0x16>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <Num_u16ToString+0x18>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <Num_u16ToString+0x1a>
    25e8:	ed b7       	in	r30, 0x3d	; 61
    25ea:	fe b7       	in	r31, 0x3e	; 62
    25ec:	31 96       	adiw	r30, 0x01	; 1
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    25f6:	80 e6       	ldi	r24, 0x60	; 96
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	93 83       	std	Z+3, r25	; 0x03
    25fc:	82 83       	std	Z+2, r24	; 0x02
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	95 83       	std	Z+5, r25	; 0x05
    2604:	84 83       	std	Z+4, r24	; 0x04
    2606:	0e 94 b5 13 	call	0x276a	; 0x276a <sprintf>
    260a:	8d b7       	in	r24, 0x3d	; 61
    260c:	9e b7       	in	r25, 0x3e	; 62
    260e:	06 96       	adiw	r24, 0x06	; 6
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	9e bf       	out	0x3e, r25	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	8d bf       	out	0x3d, r24	; 61
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Num)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	2c 97       	sbiw	r28, 0x0c	; 12
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	9c 87       	std	Y+12, r25	; 0x0c
    263e:	8b 87       	std	Y+11, r24	; 0x0b
    u8 Local_u8Buffer[10];
    Num_u16ToString(Copy_u16Num,Local_u8Buffer);
    2640:	8b 85       	ldd	r24, Y+11	; 0x0b
    2642:	9c 85       	ldd	r25, Y+12	; 0x0c
    2644:	9e 01       	movw	r18, r28
    2646:	2f 5f       	subi	r18, 0xFF	; 255
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	b9 01       	movw	r22, r18
    264c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <Num_u16ToString>
    LCD_voidWriteString(Local_u8Buffer);
    2650:	ce 01       	movw	r24, r28
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_voidWriteString>
}
    2658:	2c 96       	adiw	r28, 0x0c	; 12
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <main>:

#define LCD_CLEARTEXT "                                        "


int main(void)
 {
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	64 97       	sbiw	r28, 0x14	; 20
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
	/*DIO init */
	u16 x = 12050;
    267e:	82 e1       	ldi	r24, 0x12	; 18
    2680:	9f e2       	ldi	r25, 0x2F	; 47
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidInit();
    2686:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	/*LCD init*/
	LCD_voidInit();
    268a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_voidInit>
	u8 Local_Au8String[]= "Haneen Ameer";
    268e:	ce 01       	movw	r24, r28
    2690:	03 96       	adiw	r24, 0x03	; 3
    2692:	99 8b       	std	Y+17, r25	; 0x11
    2694:	88 8b       	std	Y+16, r24	; 0x10
    2696:	e3 e6       	ldi	r30, 0x63	; 99
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	fb 8b       	std	Y+19, r31	; 0x13
    269c:	ea 8b       	std	Y+18, r30	; 0x12
    269e:	fd e0       	ldi	r31, 0x0D	; 13
    26a0:	fc 8b       	std	Y+20, r31	; 0x14
    26a2:	ea 89       	ldd	r30, Y+18	; 0x12
    26a4:	fb 89       	ldd	r31, Y+19	; 0x13
    26a6:	00 80       	ld	r0, Z
    26a8:	8a 89       	ldd	r24, Y+18	; 0x12
    26aa:	9b 89       	ldd	r25, Y+19	; 0x13
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	9b 8b       	std	Y+19, r25	; 0x13
    26b0:	8a 8b       	std	Y+18, r24	; 0x12
    26b2:	e8 89       	ldd	r30, Y+16	; 0x10
    26b4:	f9 89       	ldd	r31, Y+17	; 0x11
    26b6:	00 82       	st	Z, r0
    26b8:	88 89       	ldd	r24, Y+16	; 0x10
    26ba:	99 89       	ldd	r25, Y+17	; 0x11
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	99 8b       	std	Y+17, r25	; 0x11
    26c0:	88 8b       	std	Y+16, r24	; 0x10
    26c2:	9c 89       	ldd	r25, Y+20	; 0x14
    26c4:	91 50       	subi	r25, 0x01	; 1
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	ec 89       	ldd	r30, Y+20	; 0x14
    26ca:	ee 23       	and	r30, r30
    26cc:	51 f7       	brne	.-44     	; 0x26a2 <main+0x38>
	LCD_u8GoToXY(LCD_u8_LINE4,0);
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_u8GoToXY>
	LCD_voidWriteNumber(x);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_voidWriteNumber>
	LCD_voidWriteString(Local_Au8String);
    26de:	ce 01       	movw	r24, r28
    26e0:	03 96       	adiw	r24, 0x03	; 3
    26e2:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_voidWriteString>
			
		return 0;
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
 }
    26ea:	64 96       	adiw	r28, 0x14	; 20
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <__prologue_saves__>:
    26fc:	2f 92       	push	r2
    26fe:	3f 92       	push	r3
    2700:	4f 92       	push	r4
    2702:	5f 92       	push	r5
    2704:	6f 92       	push	r6
    2706:	7f 92       	push	r7
    2708:	8f 92       	push	r8
    270a:	9f 92       	push	r9
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	ca 1b       	sub	r28, r26
    2726:	db 0b       	sbc	r29, r27
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	09 94       	ijmp

00002734 <__epilogue_restores__>:
    2734:	2a 88       	ldd	r2, Y+18	; 0x12
    2736:	39 88       	ldd	r3, Y+17	; 0x11
    2738:	48 88       	ldd	r4, Y+16	; 0x10
    273a:	5f 84       	ldd	r5, Y+15	; 0x0f
    273c:	6e 84       	ldd	r6, Y+14	; 0x0e
    273e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2740:	8c 84       	ldd	r8, Y+12	; 0x0c
    2742:	9b 84       	ldd	r9, Y+11	; 0x0b
    2744:	aa 84       	ldd	r10, Y+10	; 0x0a
    2746:	b9 84       	ldd	r11, Y+9	; 0x09
    2748:	c8 84       	ldd	r12, Y+8	; 0x08
    274a:	df 80       	ldd	r13, Y+7	; 0x07
    274c:	ee 80       	ldd	r14, Y+6	; 0x06
    274e:	fd 80       	ldd	r15, Y+5	; 0x05
    2750:	0c 81       	ldd	r16, Y+4	; 0x04
    2752:	1b 81       	ldd	r17, Y+3	; 0x03
    2754:	aa 81       	ldd	r26, Y+2	; 0x02
    2756:	b9 81       	ldd	r27, Y+1	; 0x01
    2758:	ce 0f       	add	r28, r30
    275a:	d1 1d       	adc	r29, r1
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	ed 01       	movw	r28, r26
    2768:	08 95       	ret

0000276a <sprintf>:
    276a:	ae e0       	ldi	r26, 0x0E	; 14
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	eb eb       	ldi	r30, 0xBB	; 187
    2770:	f3 e1       	ldi	r31, 0x13	; 19
    2772:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x1c>
    2776:	0d 89       	ldd	r16, Y+21	; 0x15
    2778:	1e 89       	ldd	r17, Y+22	; 0x16
    277a:	86 e0       	ldi	r24, 0x06	; 6
    277c:	8c 83       	std	Y+4, r24	; 0x04
    277e:	1a 83       	std	Y+2, r17	; 0x02
    2780:	09 83       	std	Y+1, r16	; 0x01
    2782:	8f ef       	ldi	r24, 0xFF	; 255
    2784:	9f e7       	ldi	r25, 0x7F	; 127
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	9e 01       	movw	r18, r28
    278c:	27 5e       	subi	r18, 0xE7	; 231
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	ce 01       	movw	r24, r28
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	6f 89       	ldd	r22, Y+23	; 0x17
    2796:	78 8d       	ldd	r23, Y+24	; 0x18
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vfprintf>
    279e:	2f 81       	ldd	r18, Y+7	; 0x07
    27a0:	38 85       	ldd	r19, Y+8	; 0x08
    27a2:	02 0f       	add	r16, r18
    27a4:	13 1f       	adc	r17, r19
    27a6:	f8 01       	movw	r30, r16
    27a8:	10 82       	st	Z, r1
    27aa:	2e 96       	adiw	r28, 0x0e	; 14
    27ac:	e4 e0       	ldi	r30, 0x04	; 4
    27ae:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x1c>

000027b2 <vfprintf>:
    27b2:	ab e0       	ldi	r26, 0x0B	; 11
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ef ed       	ldi	r30, 0xDF	; 223
    27b8:	f3 e1       	ldi	r31, 0x13	; 19
    27ba:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
    27be:	3c 01       	movw	r6, r24
    27c0:	2b 01       	movw	r4, r22
    27c2:	5a 01       	movw	r10, r20
    27c4:	fc 01       	movw	r30, r24
    27c6:	17 82       	std	Z+7, r1	; 0x07
    27c8:	16 82       	std	Z+6, r1	; 0x06
    27ca:	83 81       	ldd	r24, Z+3	; 0x03
    27cc:	81 fd       	sbrc	r24, 1
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <vfprintf+0x24>
    27d0:	6f ef       	ldi	r22, 0xFF	; 255
    27d2:	7f ef       	ldi	r23, 0xFF	; 255
    27d4:	c6 c1       	rjmp	.+908    	; 0x2b62 <vfprintf+0x3b0>
    27d6:	9a e0       	ldi	r25, 0x0A	; 10
    27d8:	89 2e       	mov	r8, r25
    27da:	1e 01       	movw	r2, r28
    27dc:	08 94       	sec
    27de:	21 1c       	adc	r2, r1
    27e0:	31 1c       	adc	r3, r1
    27e2:	f3 01       	movw	r30, r6
    27e4:	23 81       	ldd	r18, Z+3	; 0x03
    27e6:	f2 01       	movw	r30, r4
    27e8:	23 fd       	sbrc	r18, 3
    27ea:	85 91       	lpm	r24, Z+
    27ec:	23 ff       	sbrs	r18, 3
    27ee:	81 91       	ld	r24, Z+
    27f0:	2f 01       	movw	r4, r30
    27f2:	88 23       	and	r24, r24
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <vfprintf+0x46>
    27f6:	b2 c1       	rjmp	.+868    	; 0x2b5c <vfprintf+0x3aa>
    27f8:	85 32       	cpi	r24, 0x25	; 37
    27fa:	39 f4       	brne	.+14     	; 0x280a <vfprintf+0x58>
    27fc:	23 fd       	sbrc	r18, 3
    27fe:	85 91       	lpm	r24, Z+
    2800:	23 ff       	sbrs	r18, 3
    2802:	81 91       	ld	r24, Z+
    2804:	2f 01       	movw	r4, r30
    2806:	85 32       	cpi	r24, 0x25	; 37
    2808:	29 f4       	brne	.+10     	; 0x2814 <vfprintf+0x62>
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	b3 01       	movw	r22, r6
    280e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2812:	e7 cf       	rjmp	.-50     	; 0x27e2 <vfprintf+0x30>
    2814:	98 2f       	mov	r25, r24
    2816:	ff 24       	eor	r15, r15
    2818:	ee 24       	eor	r14, r14
    281a:	99 24       	eor	r9, r9
    281c:	ff e1       	ldi	r31, 0x1F	; 31
    281e:	ff 15       	cp	r31, r15
    2820:	d0 f0       	brcs	.+52     	; 0x2856 <vfprintf+0xa4>
    2822:	9b 32       	cpi	r25, 0x2B	; 43
    2824:	69 f0       	breq	.+26     	; 0x2840 <vfprintf+0x8e>
    2826:	9c 32       	cpi	r25, 0x2C	; 44
    2828:	28 f4       	brcc	.+10     	; 0x2834 <vfprintf+0x82>
    282a:	90 32       	cpi	r25, 0x20	; 32
    282c:	59 f0       	breq	.+22     	; 0x2844 <vfprintf+0x92>
    282e:	93 32       	cpi	r25, 0x23	; 35
    2830:	91 f4       	brne	.+36     	; 0x2856 <vfprintf+0xa4>
    2832:	0e c0       	rjmp	.+28     	; 0x2850 <vfprintf+0x9e>
    2834:	9d 32       	cpi	r25, 0x2D	; 45
    2836:	49 f0       	breq	.+18     	; 0x284a <vfprintf+0x98>
    2838:	90 33       	cpi	r25, 0x30	; 48
    283a:	69 f4       	brne	.+26     	; 0x2856 <vfprintf+0xa4>
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	24 c0       	rjmp	.+72     	; 0x2888 <vfprintf+0xd6>
    2840:	52 e0       	ldi	r21, 0x02	; 2
    2842:	f5 2a       	or	r15, r21
    2844:	84 e0       	ldi	r24, 0x04	; 4
    2846:	f8 2a       	or	r15, r24
    2848:	28 c0       	rjmp	.+80     	; 0x289a <vfprintf+0xe8>
    284a:	98 e0       	ldi	r25, 0x08	; 8
    284c:	f9 2a       	or	r15, r25
    284e:	25 c0       	rjmp	.+74     	; 0x289a <vfprintf+0xe8>
    2850:	e0 e1       	ldi	r30, 0x10	; 16
    2852:	fe 2a       	or	r15, r30
    2854:	22 c0       	rjmp	.+68     	; 0x289a <vfprintf+0xe8>
    2856:	f7 fc       	sbrc	r15, 7
    2858:	29 c0       	rjmp	.+82     	; 0x28ac <vfprintf+0xfa>
    285a:	89 2f       	mov	r24, r25
    285c:	80 53       	subi	r24, 0x30	; 48
    285e:	8a 30       	cpi	r24, 0x0A	; 10
    2860:	70 f4       	brcc	.+28     	; 0x287e <vfprintf+0xcc>
    2862:	f6 fe       	sbrs	r15, 6
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <vfprintf+0xbe>
    2866:	98 9c       	mul	r9, r8
    2868:	90 2c       	mov	r9, r0
    286a:	11 24       	eor	r1, r1
    286c:	98 0e       	add	r9, r24
    286e:	15 c0       	rjmp	.+42     	; 0x289a <vfprintf+0xe8>
    2870:	e8 9c       	mul	r14, r8
    2872:	e0 2c       	mov	r14, r0
    2874:	11 24       	eor	r1, r1
    2876:	e8 0e       	add	r14, r24
    2878:	f0 e2       	ldi	r31, 0x20	; 32
    287a:	ff 2a       	or	r15, r31
    287c:	0e c0       	rjmp	.+28     	; 0x289a <vfprintf+0xe8>
    287e:	9e 32       	cpi	r25, 0x2E	; 46
    2880:	29 f4       	brne	.+10     	; 0x288c <vfprintf+0xda>
    2882:	f6 fc       	sbrc	r15, 6
    2884:	6b c1       	rjmp	.+726    	; 0x2b5c <vfprintf+0x3aa>
    2886:	40 e4       	ldi	r20, 0x40	; 64
    2888:	f4 2a       	or	r15, r20
    288a:	07 c0       	rjmp	.+14     	; 0x289a <vfprintf+0xe8>
    288c:	9c 36       	cpi	r25, 0x6C	; 108
    288e:	19 f4       	brne	.+6      	; 0x2896 <vfprintf+0xe4>
    2890:	50 e8       	ldi	r21, 0x80	; 128
    2892:	f5 2a       	or	r15, r21
    2894:	02 c0       	rjmp	.+4      	; 0x289a <vfprintf+0xe8>
    2896:	98 36       	cpi	r25, 0x68	; 104
    2898:	49 f4       	brne	.+18     	; 0x28ac <vfprintf+0xfa>
    289a:	f2 01       	movw	r30, r4
    289c:	23 fd       	sbrc	r18, 3
    289e:	95 91       	lpm	r25, Z+
    28a0:	23 ff       	sbrs	r18, 3
    28a2:	91 91       	ld	r25, Z+
    28a4:	2f 01       	movw	r4, r30
    28a6:	99 23       	and	r25, r25
    28a8:	09 f0       	breq	.+2      	; 0x28ac <vfprintf+0xfa>
    28aa:	b8 cf       	rjmp	.-144    	; 0x281c <vfprintf+0x6a>
    28ac:	89 2f       	mov	r24, r25
    28ae:	85 54       	subi	r24, 0x45	; 69
    28b0:	83 30       	cpi	r24, 0x03	; 3
    28b2:	18 f0       	brcs	.+6      	; 0x28ba <vfprintf+0x108>
    28b4:	80 52       	subi	r24, 0x20	; 32
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	38 f4       	brcc	.+14     	; 0x28c8 <vfprintf+0x116>
    28ba:	44 e0       	ldi	r20, 0x04	; 4
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	a4 0e       	add	r10, r20
    28c0:	b5 1e       	adc	r11, r21
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	59 83       	std	Y+1, r21	; 0x01
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <vfprintf+0x134>
    28c8:	93 36       	cpi	r25, 0x63	; 99
    28ca:	31 f0       	breq	.+12     	; 0x28d8 <vfprintf+0x126>
    28cc:	93 37       	cpi	r25, 0x73	; 115
    28ce:	79 f0       	breq	.+30     	; 0x28ee <vfprintf+0x13c>
    28d0:	93 35       	cpi	r25, 0x53	; 83
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <vfprintf+0x124>
    28d4:	56 c0       	rjmp	.+172    	; 0x2982 <vfprintf+0x1d0>
    28d6:	20 c0       	rjmp	.+64     	; 0x2918 <vfprintf+0x166>
    28d8:	f5 01       	movw	r30, r10
    28da:	80 81       	ld	r24, Z
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	42 e0       	ldi	r20, 0x02	; 2
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	a4 0e       	add	r10, r20
    28e4:	b5 1e       	adc	r11, r21
    28e6:	61 01       	movw	r12, r2
    28e8:	01 e0       	ldi	r16, 0x01	; 1
    28ea:	10 e0       	ldi	r17, 0x00	; 0
    28ec:	12 c0       	rjmp	.+36     	; 0x2912 <vfprintf+0x160>
    28ee:	f5 01       	movw	r30, r10
    28f0:	c0 80       	ld	r12, Z
    28f2:	d1 80       	ldd	r13, Z+1	; 0x01
    28f4:	f6 fc       	sbrc	r15, 6
    28f6:	03 c0       	rjmp	.+6      	; 0x28fe <vfprintf+0x14c>
    28f8:	6f ef       	ldi	r22, 0xFF	; 255
    28fa:	7f ef       	ldi	r23, 0xFF	; 255
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <vfprintf+0x150>
    28fe:	69 2d       	mov	r22, r9
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	42 e0       	ldi	r20, 0x02	; 2
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	a4 0e       	add	r10, r20
    2908:	b5 1e       	adc	r11, r21
    290a:	c6 01       	movw	r24, r12
    290c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strnlen>
    2910:	8c 01       	movw	r16, r24
    2912:	5f e7       	ldi	r21, 0x7F	; 127
    2914:	f5 22       	and	r15, r21
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <vfprintf+0x18e>
    2918:	f5 01       	movw	r30, r10
    291a:	c0 80       	ld	r12, Z
    291c:	d1 80       	ldd	r13, Z+1	; 0x01
    291e:	f6 fc       	sbrc	r15, 6
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <vfprintf+0x176>
    2922:	6f ef       	ldi	r22, 0xFF	; 255
    2924:	7f ef       	ldi	r23, 0xFF	; 255
    2926:	02 c0       	rjmp	.+4      	; 0x292c <vfprintf+0x17a>
    2928:	69 2d       	mov	r22, r9
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	42 e0       	ldi	r20, 0x02	; 2
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	a4 0e       	add	r10, r20
    2932:	b5 1e       	adc	r11, r21
    2934:	c6 01       	movw	r24, r12
    2936:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <strnlen_P>
    293a:	8c 01       	movw	r16, r24
    293c:	50 e8       	ldi	r21, 0x80	; 128
    293e:	f5 2a       	or	r15, r21
    2940:	f3 fe       	sbrs	r15, 3
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <vfprintf+0x1a0>
    2944:	1a c0       	rjmp	.+52     	; 0x297a <vfprintf+0x1c8>
    2946:	80 e2       	ldi	r24, 0x20	; 32
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	b3 01       	movw	r22, r6
    294c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2950:	ea 94       	dec	r14
    2952:	8e 2d       	mov	r24, r14
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	08 17       	cp	r16, r24
    2958:	19 07       	cpc	r17, r25
    295a:	a8 f3       	brcs	.-22     	; 0x2946 <vfprintf+0x194>
    295c:	0e c0       	rjmp	.+28     	; 0x297a <vfprintf+0x1c8>
    295e:	f6 01       	movw	r30, r12
    2960:	f7 fc       	sbrc	r15, 7
    2962:	85 91       	lpm	r24, Z+
    2964:	f7 fe       	sbrs	r15, 7
    2966:	81 91       	ld	r24, Z+
    2968:	6f 01       	movw	r12, r30
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	b3 01       	movw	r22, r6
    296e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2972:	e1 10       	cpse	r14, r1
    2974:	ea 94       	dec	r14
    2976:	01 50       	subi	r16, 0x01	; 1
    2978:	10 40       	sbci	r17, 0x00	; 0
    297a:	01 15       	cp	r16, r1
    297c:	11 05       	cpc	r17, r1
    297e:	79 f7       	brne	.-34     	; 0x295e <vfprintf+0x1ac>
    2980:	ea c0       	rjmp	.+468    	; 0x2b56 <vfprintf+0x3a4>
    2982:	94 36       	cpi	r25, 0x64	; 100
    2984:	11 f0       	breq	.+4      	; 0x298a <vfprintf+0x1d8>
    2986:	99 36       	cpi	r25, 0x69	; 105
    2988:	69 f5       	brne	.+90     	; 0x29e4 <vfprintf+0x232>
    298a:	f7 fe       	sbrs	r15, 7
    298c:	08 c0       	rjmp	.+16     	; 0x299e <vfprintf+0x1ec>
    298e:	f5 01       	movw	r30, r10
    2990:	20 81       	ld	r18, Z
    2992:	31 81       	ldd	r19, Z+1	; 0x01
    2994:	42 81       	ldd	r20, Z+2	; 0x02
    2996:	53 81       	ldd	r21, Z+3	; 0x03
    2998:	84 e0       	ldi	r24, 0x04	; 4
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0a c0       	rjmp	.+20     	; 0x29b2 <vfprintf+0x200>
    299e:	f5 01       	movw	r30, r10
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	9c 01       	movw	r18, r24
    29a6:	44 27       	eor	r20, r20
    29a8:	37 fd       	sbrc	r19, 7
    29aa:	40 95       	com	r20
    29ac:	54 2f       	mov	r21, r20
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a8 0e       	add	r10, r24
    29b4:	b9 1e       	adc	r11, r25
    29b6:	9f e6       	ldi	r25, 0x6F	; 111
    29b8:	f9 22       	and	r15, r25
    29ba:	57 ff       	sbrs	r21, 7
    29bc:	09 c0       	rjmp	.+18     	; 0x29d0 <vfprintf+0x21e>
    29be:	50 95       	com	r21
    29c0:	40 95       	com	r20
    29c2:	30 95       	com	r19
    29c4:	21 95       	neg	r18
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	4f 4f       	sbci	r20, 0xFF	; 255
    29ca:	5f 4f       	sbci	r21, 0xFF	; 255
    29cc:	e0 e8       	ldi	r30, 0x80	; 128
    29ce:	fe 2a       	or	r15, r30
    29d0:	ca 01       	movw	r24, r20
    29d2:	b9 01       	movw	r22, r18
    29d4:	a1 01       	movw	r20, r2
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__ultoa_invert>
    29de:	d8 2e       	mov	r13, r24
    29e0:	d2 18       	sub	r13, r2
    29e2:	40 c0       	rjmp	.+128    	; 0x2a64 <vfprintf+0x2b2>
    29e4:	95 37       	cpi	r25, 0x75	; 117
    29e6:	29 f4       	brne	.+10     	; 0x29f2 <vfprintf+0x240>
    29e8:	1f 2d       	mov	r17, r15
    29ea:	1f 7e       	andi	r17, 0xEF	; 239
    29ec:	2a e0       	ldi	r18, 0x0A	; 10
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	1d c0       	rjmp	.+58     	; 0x2a2c <vfprintf+0x27a>
    29f2:	1f 2d       	mov	r17, r15
    29f4:	19 7f       	andi	r17, 0xF9	; 249
    29f6:	9f 36       	cpi	r25, 0x6F	; 111
    29f8:	61 f0       	breq	.+24     	; 0x2a12 <vfprintf+0x260>
    29fa:	90 37       	cpi	r25, 0x70	; 112
    29fc:	20 f4       	brcc	.+8      	; 0x2a06 <vfprintf+0x254>
    29fe:	98 35       	cpi	r25, 0x58	; 88
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <vfprintf+0x252>
    2a02:	ac c0       	rjmp	.+344    	; 0x2b5c <vfprintf+0x3aa>
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <vfprintf+0x272>
    2a06:	90 37       	cpi	r25, 0x70	; 112
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <vfprintf+0x266>
    2a0a:	98 37       	cpi	r25, 0x78	; 120
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <vfprintf+0x25e>
    2a0e:	a6 c0       	rjmp	.+332    	; 0x2b5c <vfprintf+0x3aa>
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <vfprintf+0x268>
    2a12:	28 e0       	ldi	r18, 0x08	; 8
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	0a c0       	rjmp	.+20     	; 0x2a2c <vfprintf+0x27a>
    2a18:	10 61       	ori	r17, 0x10	; 16
    2a1a:	14 fd       	sbrc	r17, 4
    2a1c:	14 60       	ori	r17, 0x04	; 4
    2a1e:	20 e1       	ldi	r18, 0x10	; 16
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	04 c0       	rjmp	.+8      	; 0x2a2c <vfprintf+0x27a>
    2a24:	14 fd       	sbrc	r17, 4
    2a26:	16 60       	ori	r17, 0x06	; 6
    2a28:	20 e1       	ldi	r18, 0x10	; 16
    2a2a:	32 e0       	ldi	r19, 0x02	; 2
    2a2c:	17 ff       	sbrs	r17, 7
    2a2e:	08 c0       	rjmp	.+16     	; 0x2a40 <vfprintf+0x28e>
    2a30:	f5 01       	movw	r30, r10
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	44 e0       	ldi	r20, 0x04	; 4
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	08 c0       	rjmp	.+16     	; 0x2a50 <vfprintf+0x29e>
    2a40:	f5 01       	movw	r30, r10
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	bc 01       	movw	r22, r24
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	42 e0       	ldi	r20, 0x02	; 2
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	a4 0e       	add	r10, r20
    2a52:	b5 1e       	adc	r11, r21
    2a54:	a1 01       	movw	r20, r2
    2a56:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__ultoa_invert>
    2a5a:	d8 2e       	mov	r13, r24
    2a5c:	d2 18       	sub	r13, r2
    2a5e:	8f e7       	ldi	r24, 0x7F	; 127
    2a60:	f8 2e       	mov	r15, r24
    2a62:	f1 22       	and	r15, r17
    2a64:	f6 fe       	sbrs	r15, 6
    2a66:	0b c0       	rjmp	.+22     	; 0x2a7e <vfprintf+0x2cc>
    2a68:	5e ef       	ldi	r21, 0xFE	; 254
    2a6a:	f5 22       	and	r15, r21
    2a6c:	d9 14       	cp	r13, r9
    2a6e:	38 f4       	brcc	.+14     	; 0x2a7e <vfprintf+0x2cc>
    2a70:	f4 fe       	sbrs	r15, 4
    2a72:	07 c0       	rjmp	.+14     	; 0x2a82 <vfprintf+0x2d0>
    2a74:	f2 fc       	sbrc	r15, 2
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <vfprintf+0x2d0>
    2a78:	8f ee       	ldi	r24, 0xEF	; 239
    2a7a:	f8 22       	and	r15, r24
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <vfprintf+0x2d0>
    2a7e:	1d 2d       	mov	r17, r13
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <vfprintf+0x2d2>
    2a82:	19 2d       	mov	r17, r9
    2a84:	f4 fe       	sbrs	r15, 4
    2a86:	0d c0       	rjmp	.+26     	; 0x2aa2 <vfprintf+0x2f0>
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ed 0d       	add	r30, r13
    2a8c:	f1 1d       	adc	r31, r1
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 33       	cpi	r24, 0x30	; 48
    2a92:	19 f4       	brne	.+6      	; 0x2a9a <vfprintf+0x2e8>
    2a94:	99 ee       	ldi	r25, 0xE9	; 233
    2a96:	f9 22       	and	r15, r25
    2a98:	08 c0       	rjmp	.+16     	; 0x2aaa <vfprintf+0x2f8>
    2a9a:	1f 5f       	subi	r17, 0xFF	; 255
    2a9c:	f2 fe       	sbrs	r15, 2
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <vfprintf+0x2f8>
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <vfprintf+0x2f6>
    2aa2:	8f 2d       	mov	r24, r15
    2aa4:	86 78       	andi	r24, 0x86	; 134
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <vfprintf+0x2f8>
    2aa8:	1f 5f       	subi	r17, 0xFF	; 255
    2aaa:	0f 2d       	mov	r16, r15
    2aac:	f3 fc       	sbrc	r15, 3
    2aae:	14 c0       	rjmp	.+40     	; 0x2ad8 <vfprintf+0x326>
    2ab0:	f0 fe       	sbrs	r15, 0
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <vfprintf+0x320>
    2ab4:	1e 15       	cp	r17, r14
    2ab6:	10 f0       	brcs	.+4      	; 0x2abc <vfprintf+0x30a>
    2ab8:	9d 2c       	mov	r9, r13
    2aba:	0b c0       	rjmp	.+22     	; 0x2ad2 <vfprintf+0x320>
    2abc:	9d 2c       	mov	r9, r13
    2abe:	9e 0c       	add	r9, r14
    2ac0:	91 1a       	sub	r9, r17
    2ac2:	1e 2d       	mov	r17, r14
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <vfprintf+0x320>
    2ac6:	80 e2       	ldi	r24, 0x20	; 32
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	b3 01       	movw	r22, r6
    2acc:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2ad0:	1f 5f       	subi	r17, 0xFF	; 255
    2ad2:	1e 15       	cp	r17, r14
    2ad4:	c0 f3       	brcs	.-16     	; 0x2ac6 <vfprintf+0x314>
    2ad6:	04 c0       	rjmp	.+8      	; 0x2ae0 <vfprintf+0x32e>
    2ad8:	1e 15       	cp	r17, r14
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <vfprintf+0x32e>
    2adc:	e1 1a       	sub	r14, r17
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <vfprintf+0x330>
    2ae0:	ee 24       	eor	r14, r14
    2ae2:	04 ff       	sbrs	r16, 4
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <vfprintf+0x352>
    2ae6:	80 e3       	ldi	r24, 0x30	; 48
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	b3 01       	movw	r22, r6
    2aec:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2af0:	02 ff       	sbrs	r16, 2
    2af2:	1d c0       	rjmp	.+58     	; 0x2b2e <vfprintf+0x37c>
    2af4:	01 fd       	sbrc	r16, 1
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <vfprintf+0x34c>
    2af8:	88 e7       	ldi	r24, 0x78	; 120
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <vfprintf+0x368>
    2afe:	88 e5       	ldi	r24, 0x58	; 88
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0b c0       	rjmp	.+22     	; 0x2b1a <vfprintf+0x368>
    2b04:	80 2f       	mov	r24, r16
    2b06:	86 78       	andi	r24, 0x86	; 134
    2b08:	91 f0       	breq	.+36     	; 0x2b2e <vfprintf+0x37c>
    2b0a:	01 ff       	sbrs	r16, 1
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <vfprintf+0x360>
    2b0e:	8b e2       	ldi	r24, 0x2B	; 43
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <vfprintf+0x362>
    2b12:	80 e2       	ldi	r24, 0x20	; 32
    2b14:	f7 fc       	sbrc	r15, 7
    2b16:	8d e2       	ldi	r24, 0x2D	; 45
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	b3 01       	movw	r22, r6
    2b1c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2b20:	06 c0       	rjmp	.+12     	; 0x2b2e <vfprintf+0x37c>
    2b22:	80 e3       	ldi	r24, 0x30	; 48
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	b3 01       	movw	r22, r6
    2b28:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2b2c:	9a 94       	dec	r9
    2b2e:	d9 14       	cp	r13, r9
    2b30:	c0 f3       	brcs	.-16     	; 0x2b22 <vfprintf+0x370>
    2b32:	da 94       	dec	r13
    2b34:	f1 01       	movw	r30, r2
    2b36:	ed 0d       	add	r30, r13
    2b38:	f1 1d       	adc	r31, r1
    2b3a:	80 81       	ld	r24, Z
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	b3 01       	movw	r22, r6
    2b40:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2b44:	dd 20       	and	r13, r13
    2b46:	a9 f7       	brne	.-22     	; 0x2b32 <vfprintf+0x380>
    2b48:	06 c0       	rjmp	.+12     	; 0x2b56 <vfprintf+0x3a4>
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	b3 01       	movw	r22, r6
    2b50:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <fputc>
    2b54:	ea 94       	dec	r14
    2b56:	ee 20       	and	r14, r14
    2b58:	c1 f7       	brne	.-16     	; 0x2b4a <vfprintf+0x398>
    2b5a:	43 ce       	rjmp	.-890    	; 0x27e2 <vfprintf+0x30>
    2b5c:	f3 01       	movw	r30, r6
    2b5e:	66 81       	ldd	r22, Z+6	; 0x06
    2b60:	77 81       	ldd	r23, Z+7	; 0x07
    2b62:	cb 01       	movw	r24, r22
    2b64:	2b 96       	adiw	r28, 0x0b	; 11
    2b66:	e2 e1       	ldi	r30, 0x12	; 18
    2b68:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00002b6c <strnlen_P>:
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	05 90       	lpm	r0, Z+
    2b70:	61 50       	subi	r22, 0x01	; 1
    2b72:	70 40       	sbci	r23, 0x00	; 0
    2b74:	01 10       	cpse	r0, r1
    2b76:	d8 f7       	brcc	.-10     	; 0x2b6e <strnlen_P+0x2>
    2b78:	80 95       	com	r24
    2b7a:	90 95       	com	r25
    2b7c:	8e 0f       	add	r24, r30
    2b7e:	9f 1f       	adc	r25, r31
    2b80:	08 95       	ret

00002b82 <strnlen>:
    2b82:	fc 01       	movw	r30, r24
    2b84:	61 50       	subi	r22, 0x01	; 1
    2b86:	70 40       	sbci	r23, 0x00	; 0
    2b88:	01 90       	ld	r0, Z+
    2b8a:	01 10       	cpse	r0, r1
    2b8c:	d8 f7       	brcc	.-10     	; 0x2b84 <strnlen+0x2>
    2b8e:	80 95       	com	r24
    2b90:	90 95       	com	r25
    2b92:	8e 0f       	add	r24, r30
    2b94:	9f 1f       	adc	r25, r31
    2b96:	08 95       	ret

00002b98 <fputc>:
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	8c 01       	movw	r16, r24
    2ba2:	eb 01       	movw	r28, r22
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	81 ff       	sbrs	r24, 1
    2ba8:	1b c0       	rjmp	.+54     	; 0x2be0 <fputc+0x48>
    2baa:	82 ff       	sbrs	r24, 2
    2bac:	0d c0       	rjmp	.+26     	; 0x2bc8 <fputc+0x30>
    2bae:	2e 81       	ldd	r18, Y+6	; 0x06
    2bb0:	3f 81       	ldd	r19, Y+7	; 0x07
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb6:	28 17       	cp	r18, r24
    2bb8:	39 07       	cpc	r19, r25
    2bba:	64 f4       	brge	.+24     	; 0x2bd4 <fputc+0x3c>
    2bbc:	e8 81       	ld	r30, Y
    2bbe:	f9 81       	ldd	r31, Y+1	; 0x01
    2bc0:	01 93       	st	Z+, r16
    2bc2:	f9 83       	std	Y+1, r31	; 0x01
    2bc4:	e8 83       	st	Y, r30
    2bc6:	06 c0       	rjmp	.+12     	; 0x2bd4 <fputc+0x3c>
    2bc8:	e8 85       	ldd	r30, Y+8	; 0x08
    2bca:	f9 85       	ldd	r31, Y+9	; 0x09
    2bcc:	80 2f       	mov	r24, r16
    2bce:	09 95       	icall
    2bd0:	89 2b       	or	r24, r25
    2bd2:	31 f4       	brne	.+12     	; 0x2be0 <fputc+0x48>
    2bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	9f 83       	std	Y+7, r25	; 0x07
    2bdc:	8e 83       	std	Y+6, r24	; 0x06
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <fputc+0x4c>
    2be0:	0f ef       	ldi	r16, 0xFF	; 255
    2be2:	1f ef       	ldi	r17, 0xFF	; 255
    2be4:	c8 01       	movw	r24, r16
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	08 95       	ret

00002bf0 <__ultoa_invert>:
    2bf0:	fa 01       	movw	r30, r20
    2bf2:	aa 27       	eor	r26, r26
    2bf4:	28 30       	cpi	r18, 0x08	; 8
    2bf6:	51 f1       	breq	.+84     	; 0x2c4c <__ultoa_invert+0x5c>
    2bf8:	20 31       	cpi	r18, 0x10	; 16
    2bfa:	81 f1       	breq	.+96     	; 0x2c5c <__ultoa_invert+0x6c>
    2bfc:	e8 94       	clt
    2bfe:	6f 93       	push	r22
    2c00:	6e 7f       	andi	r22, 0xFE	; 254
    2c02:	6e 5f       	subi	r22, 0xFE	; 254
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	8f 4f       	sbci	r24, 0xFF	; 255
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	af 4f       	sbci	r26, 0xFF	; 255
    2c0c:	b1 e0       	ldi	r27, 0x01	; 1
    2c0e:	3e d0       	rcall	.+124    	; 0x2c8c <__ultoa_invert+0x9c>
    2c10:	b4 e0       	ldi	r27, 0x04	; 4
    2c12:	3c d0       	rcall	.+120    	; 0x2c8c <__ultoa_invert+0x9c>
    2c14:	67 0f       	add	r22, r23
    2c16:	78 1f       	adc	r23, r24
    2c18:	89 1f       	adc	r24, r25
    2c1a:	9a 1f       	adc	r25, r26
    2c1c:	a1 1d       	adc	r26, r1
    2c1e:	68 0f       	add	r22, r24
    2c20:	79 1f       	adc	r23, r25
    2c22:	8a 1f       	adc	r24, r26
    2c24:	91 1d       	adc	r25, r1
    2c26:	a1 1d       	adc	r26, r1
    2c28:	6a 0f       	add	r22, r26
    2c2a:	71 1d       	adc	r23, r1
    2c2c:	81 1d       	adc	r24, r1
    2c2e:	91 1d       	adc	r25, r1
    2c30:	a1 1d       	adc	r26, r1
    2c32:	20 d0       	rcall	.+64     	; 0x2c74 <__ultoa_invert+0x84>
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__ultoa_invert+0x48>
    2c36:	68 94       	set
    2c38:	3f 91       	pop	r19
    2c3a:	2a e0       	ldi	r18, 0x0A	; 10
    2c3c:	26 9f       	mul	r18, r22
    2c3e:	11 24       	eor	r1, r1
    2c40:	30 19       	sub	r19, r0
    2c42:	30 5d       	subi	r19, 0xD0	; 208
    2c44:	31 93       	st	Z+, r19
    2c46:	de f6       	brtc	.-74     	; 0x2bfe <__ultoa_invert+0xe>
    2c48:	cf 01       	movw	r24, r30
    2c4a:	08 95       	ret
    2c4c:	46 2f       	mov	r20, r22
    2c4e:	47 70       	andi	r20, 0x07	; 7
    2c50:	40 5d       	subi	r20, 0xD0	; 208
    2c52:	41 93       	st	Z+, r20
    2c54:	b3 e0       	ldi	r27, 0x03	; 3
    2c56:	0f d0       	rcall	.+30     	; 0x2c76 <__ultoa_invert+0x86>
    2c58:	c9 f7       	brne	.-14     	; 0x2c4c <__ultoa_invert+0x5c>
    2c5a:	f6 cf       	rjmp	.-20     	; 0x2c48 <__ultoa_invert+0x58>
    2c5c:	46 2f       	mov	r20, r22
    2c5e:	4f 70       	andi	r20, 0x0F	; 15
    2c60:	40 5d       	subi	r20, 0xD0	; 208
    2c62:	4a 33       	cpi	r20, 0x3A	; 58
    2c64:	18 f0       	brcs	.+6      	; 0x2c6c <__ultoa_invert+0x7c>
    2c66:	49 5d       	subi	r20, 0xD9	; 217
    2c68:	31 fd       	sbrc	r19, 1
    2c6a:	40 52       	subi	r20, 0x20	; 32
    2c6c:	41 93       	st	Z+, r20
    2c6e:	02 d0       	rcall	.+4      	; 0x2c74 <__ultoa_invert+0x84>
    2c70:	a9 f7       	brne	.-22     	; 0x2c5c <__ultoa_invert+0x6c>
    2c72:	ea cf       	rjmp	.-44     	; 0x2c48 <__ultoa_invert+0x58>
    2c74:	b4 e0       	ldi	r27, 0x04	; 4
    2c76:	a6 95       	lsr	r26
    2c78:	97 95       	ror	r25
    2c7a:	87 95       	ror	r24
    2c7c:	77 95       	ror	r23
    2c7e:	67 95       	ror	r22
    2c80:	ba 95       	dec	r27
    2c82:	c9 f7       	brne	.-14     	; 0x2c76 <__ultoa_invert+0x86>
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	61 05       	cpc	r22, r1
    2c88:	71 05       	cpc	r23, r1
    2c8a:	08 95       	ret
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	ac 01       	movw	r20, r24
    2c90:	0a 2e       	mov	r0, r26
    2c92:	06 94       	lsr	r0
    2c94:	57 95       	ror	r21
    2c96:	47 95       	ror	r20
    2c98:	37 95       	ror	r19
    2c9a:	27 95       	ror	r18
    2c9c:	ba 95       	dec	r27
    2c9e:	c9 f7       	brne	.-14     	; 0x2c92 <__ultoa_invert+0xa2>
    2ca0:	62 0f       	add	r22, r18
    2ca2:	73 1f       	adc	r23, r19
    2ca4:	84 1f       	adc	r24, r20
    2ca6:	95 1f       	adc	r25, r21
    2ca8:	a0 1d       	adc	r26, r0
    2caa:	08 95       	ret

00002cac <_exit>:
    2cac:	f8 94       	cli

00002cae <__stop_program>:
    2cae:	ff cf       	rjmp	.-2      	; 0x2cae <__stop_program>
