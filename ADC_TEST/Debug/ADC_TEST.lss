
ADC_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000d3c  2**0
                  ALLOC
  3 .stab         0000108c  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006b9  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 05 	call	0xae4	; 0xae4 <main>
  9e:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_voidinit>:
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	ac e7       	ldi	r26, 0x7C	; 124
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8c 93       	st	X, r24
  ca:	ac e7       	ldi	r26, 0x7C	; 124
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	8c 93       	st	X, r24
  d8:	aa e7       	ldi	r26, 0x7A	; 122
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8c 93       	st	X, r24
  e6:	aa e7       	ldi	r26, 0x7A	; 122
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	8c 93       	st	X, r24
  f4:	aa e7       	ldi	r26, 0x7A	; 122
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	8c 93       	st	X, r24
 102:	aa e7       	ldi	r26, 0x7A	; 122
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	8c 93       	st	X, r24
 110:	aa e7       	ldi	r26, 0x7A	; 122
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8c 93       	st	X, r24
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <ADC_u8GetDigitalValueSyncNonBlocking>:
    /* 5- enable ADC */
    SET_BIT(ADC_u8_ADCSRA,7);
}

u8 ADC_u8GetDigitalValueSyncNonBlocking(u8 Copy_u8ChannedId , u16 *Copy_u16DigitalVal)
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	27 97       	sbiw	r28, 0x07	; 7
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	8d 83       	std	Y+5, r24	; 0x05
 13a:	7f 83       	std	Y+7, r23	; 0x07
 13c:	6e 83       	std	Y+6, r22	; 0x06
    u8 Local_u8ReturnState = STD_TYPE_OK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	8c 83       	std	Y+4, r24	; 0x04
    u16 Local_u16Counter =0;    /*unblocking counter */
 142:	1b 82       	std	Y+3, r1	; 0x03
 144:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8Flag =0;
 146:	19 82       	std	Y+1, r1	; 0x01
    if ((Copy_u8ChannedId <= ADC_u8_ADC7) && (Copy_u16DigitalVal != NULL))
 148:	8d 81       	ldd	r24, Y+5	; 0x05
 14a:	88 30       	cpi	r24, 0x08	; 8
 14c:	08 f0       	brcs	.+2      	; 0x150 <ADC_u8GetDigitalValueSyncNonBlocking+0x2c>
 14e:	47 c0       	rjmp	.+142    	; 0x1de <ADC_u8GetDigitalValueSyncNonBlocking+0xba>
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	9f 81       	ldd	r25, Y+7	; 0x07
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	09 f4       	brne	.+2      	; 0x15a <ADC_u8GetDigitalValueSyncNonBlocking+0x36>
 158:	42 c0       	rjmp	.+132    	; 0x1de <ADC_u8GetDigitalValueSyncNonBlocking+0xba>
    {
         /* 1 - choose channel */
         /*clear the old Mux bits value*/
         ADC_u8_ADMUX &= 0b11110000;
 15a:	ac e7       	ldi	r26, 0x7C	; 124
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	8c 93       	st	X, r24
         /*set the new channel */
         ADC_u8_ADMUX |= Copy_u8ChannedId;
 168:	ac e7       	ldi	r26, 0x7C	; 124
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	8d 81       	ldd	r24, Y+5	; 0x05
 174:	89 2b       	or	r24, r25
 176:	8c 93       	st	X, r24
         /* 2 - START CONVERSION*/
        SET_BIT(ADC_u8_ADCSRA,6);
 178:	aa e7       	ldi	r26, 0x7A	; 122
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	8c 93       	st	X, r24
 186:	07 c0       	rjmp	.+14     	; 0x196 <ADC_u8GetDigitalValueSyncNonBlocking+0x72>
         /* 3 - wait converion finish*/
        while (((GET_BIT(ADC_u8_ADCSRA,4))==0) && (Local_u16Counter < 50000))
        {
            Local_u16Counter ++;
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	9b 81       	ldd	r25, Y+3	; 0x03
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	9b 83       	std	Y+3, r25	; 0x03
 190:	8a 83       	std	Y+2, r24	; 0x02
            Local_u8Flag = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	89 83       	std	Y+1, r24	; 0x01
         /*set the new channel */
         ADC_u8_ADMUX |= Copy_u8ChannedId;
         /* 2 - START CONVERSION*/
        SET_BIT(ADC_u8_ADCSRA,6);
         /* 3 - wait converion finish*/
        while (((GET_BIT(ADC_u8_ADCSRA,4))==0) && (Local_u16Counter < 50000))
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	81 70       	andi	r24, 0x01	; 1
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	31 f4       	brne	.+12     	; 0x1b8 <ADC_u8GetDigitalValueSyncNonBlocking+0x94>
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	9b 81       	ldd	r25, Y+3	; 0x03
 1b0:	23 ec       	ldi	r18, 0xC3	; 195
 1b2:	80 35       	cpi	r24, 0x50	; 80
 1b4:	92 07       	cpc	r25, r18
 1b6:	40 f3       	brcs	.-48     	; 0x188 <ADC_u8GetDigitalValueSyncNonBlocking+0x64>
            Local_u16Counter ++;
            Local_u8Flag = 1;

        }
        /* 4 - read the digital val of ADC*/
        if(1 == Local_u8Flag)
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	89 f4       	brne	.+34     	; 0x1e0 <ADC_u8GetDigitalValueSyncNonBlocking+0xbc>
        {
            /*read value*/
            *Copy_u16DigitalVal = ADC_u16_ADC; 
 1be:	e8 e7       	ldi	r30, 0x78	; 120
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	ee 81       	ldd	r30, Y+6	; 0x06
 1c8:	ff 81       	ldd	r31, Y+7	; 0x07
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
            /* 5 - clear flag*/
            SET_BIT(ADC_u8_ADCSRA,4) ;
 1ce:	aa e7       	ldi	r26, 0x7A	; 122
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	ea e7       	ldi	r30, 0x7A	; 122
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	8c 93       	st	X, r24
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <ADC_u8GetDigitalValueSyncNonBlocking+0xbc>
        
       
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 1de:	1c 82       	std	Y+4, r1	; 0x04
    }
    return Local_u8ReturnState ;
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04

}
 1e2:	27 96       	adiw	r28, 0x07	; 7
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	cf 91       	pop	r28
 1f0:	df 91       	pop	r29
 1f2:	08 95       	ret

000001f4 <ADC_u8GetDigitalValueAsync>:

u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannedId , void (*Copy_PvoidCallBack)(u16 DigitalVal))
{
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <ADC_u8GetDigitalValueAsync+0x6>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <ADC_u8GetDigitalValueAsync+0x8>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	8a 83       	std	Y+2, r24	; 0x02
 202:	7c 83       	std	Y+4, r23	; 0x04
 204:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8ChannedId <= ADC_u8_ADC7) && (Copy_PvoidCallBack != NULL))
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	98 f5       	brcc	.+102    	; 0x276 <ADC_u8GetDigitalValueAsync+0x82>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	79 f1       	breq	.+94     	; 0x276 <ADC_u8GetDigitalValueAsync+0x82>
    {
        /* 1 - check if ADC not Busy */
        if(((GET_BIT(ADC_u8_ADCSRA,4))== 0))
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	82 95       	swap	r24
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	81 70       	andi	r24, 0x01	; 1
 228:	90 70       	andi	r25, 0x00	; 0
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	29 f5       	brne	.+74     	; 0x278 <ADC_u8GetDigitalValueAsync+0x84>
        {
            /* 2 - udate Global PTR to function */
            ADC_PvoidCallBack = Copy_PvoidCallBack;
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	90 93 03 01 	sts	0x0103, r25
 236:	80 93 02 01 	sts	0x0102, r24
            /* 3 - set channel */
            /*clear the old Mux bits value*/
            ADC_u8_ADMUX &= 0b11110000;
 23a:	ac e7       	ldi	r26, 0x7C	; 124
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	ec e7       	ldi	r30, 0x7C	; 124
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	8c 93       	st	X, r24
            /*set the new channel */
            ADC_u8_ADMUX |= Copy_u8ChannedId;
 248:	ac e7       	ldi	r26, 0x7C	; 124
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	ec e7       	ldi	r30, 0x7C	; 124
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	89 2b       	or	r24, r25
 256:	8c 93       	st	X, r24
            /* 4 - START CONVERSION*/
            SET_BIT(ADC_u8_ADCSRA,6);
 258:	aa e7       	ldi	r26, 0x7A	; 122
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	ea e7       	ldi	r30, 0x7A	; 122
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 64       	ori	r24, 0x40	; 64
 264:	8c 93       	st	X, r24
            /* 5 - Enable PIE of ADC */
            SET_BIT(ADC_u8_ADCSRA,3);
 266:	aa e7       	ldi	r26, 0x7A	; 122
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	8c 93       	st	X, r24
 274:	01 c0       	rjmp	.+2      	; 0x278 <ADC_u8GetDigitalValueAsync+0x84>
        }
       
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 276:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 278:	89 81       	ldd	r24, Y+1	; 0x01

}
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	cf 91       	pop	r28
 284:	df 91       	pop	r29
 286:	08 95       	ret

00000288 <__vector_21>:

void __vector_21 (void) __attribute__((signal));
void __vector_21 (void)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
    ADC_PvoidCallBack(ADC_u16_ADC);
 2b2:	e0 91 02 01 	lds	r30, 0x0102
 2b6:	f0 91 03 01 	lds	r31, 0x0103
 2ba:	a8 e7       	ldi	r26, 0x78	; 120
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	8d 91       	ld	r24, X+
 2c0:	9c 91       	ld	r25, X
 2c2:	09 95       	icall
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
 2ea:	df 93       	push	r29
 2ec:	cf 93       	push	r28
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
 2f2:	e4 e2       	ldi	r30, 0x24	; 36
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	87 e0       	ldi	r24, 0x07	; 7
 2f8:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
 2fa:	e7 e2       	ldi	r30, 0x27	; 39
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	10 82       	st	Z, r1
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
 300:	ea e2       	ldi	r30, 0x2A	; 42
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	10 82       	st	Z, r1
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
 306:	e5 e2       	ldi	r30, 0x25	; 37
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
 30c:	e8 e2       	ldi	r30, 0x28	; 40
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	10 82       	st	Z, r1
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
 312:	eb e2       	ldi	r30, 0x2B	; 43
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	10 82       	st	Z, r1
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	08 95       	ret

0000031e <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	2c 97       	sbiw	r28, 0x0c	; 12
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	8a 83       	std	Y+2, r24	; 0x02
 334:	6b 83       	std	Y+3, r22	; 0x03
 336:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO_u8SetPinDirection+0x26>
 342:	c8 c0       	rjmp	.+400    	; 0x4d4 <DIO_u8SetPinDirection+0x1b6>
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	08 f0       	brcs	.+2      	; 0x34c <DIO_u8SetPinDirection+0x2e>
 34a:	c4 c0       	rjmp	.+392    	; 0x4d4 <DIO_u8SetPinDirection+0x1b6>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	88 23       	and	r24, r24
 350:	21 f0       	breq	.+8      	; 0x35a <DIO_u8SetPinDirection+0x3c>
 352:	8c 81       	ldd	r24, Y+4	; 0x04
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_u8SetPinDirection+0x3c>
 358:	bd c0       	rjmp	.+378    	; 0x4d4 <DIO_u8SetPinDirection+0x1b6>
    {
        switch (Copy_u8PortId)
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	3c 87       	std	Y+12, r19	; 0x0c
 362:	2b 87       	std	Y+11, r18	; 0x0b
 364:	8b 85       	ldd	r24, Y+11	; 0x0b
 366:	9c 85       	ldd	r25, Y+12	; 0x0c
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	91 05       	cpc	r25, r1
 36c:	09 f4       	brne	.+2      	; 0x370 <DIO_u8SetPinDirection+0x52>
 36e:	43 c0       	rjmp	.+134    	; 0x3f6 <DIO_u8SetPinDirection+0xd8>
 370:	2b 85       	ldd	r18, Y+11	; 0x0b
 372:	3c 85       	ldd	r19, Y+12	; 0x0c
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_u8SetPinDirection+0x5e>
 37a:	75 c0       	rjmp	.+234    	; 0x466 <DIO_u8SetPinDirection+0x148>
 37c:	8b 85       	ldd	r24, Y+11	; 0x0b
 37e:	9c 85       	ldd	r25, Y+12	; 0x0c
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	09 f0       	breq	.+2      	; 0x386 <DIO_u8SetPinDirection+0x68>
 384:	a8 c0       	rjmp	.+336    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	3a 87       	std	Y+10, r19	; 0x0a
 38e:	29 87       	std	Y+9, r18	; 0x09
 390:	89 85       	ldd	r24, Y+9	; 0x09
 392:	9a 85       	ldd	r25, Y+10	; 0x0a
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	d1 f0       	breq	.+52     	; 0x3cc <DIO_u8SetPinDirection+0xae>
 398:	29 85       	ldd	r18, Y+9	; 0x09
 39a:	3a 85       	ldd	r19, Y+10	; 0x0a
 39c:	21 30       	cpi	r18, 0x01	; 1
 39e:	31 05       	cpc	r19, r1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8SetPinDirection+0x86>
 3a2:	99 c0       	rjmp	.+306    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
 3a4:	a4 e2       	ldi	r26, 0x24	; 36
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e4 e2       	ldi	r30, 0x24	; 36
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	48 2f       	mov	r20, r24
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 2e       	mov	r0, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8SetPinDirection+0xa4>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8SetPinDirection+0xa0>
 3c6:	84 2b       	or	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	85 c0       	rjmp	.+266    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
 3cc:	a4 e2       	ldi	r26, 0x24	; 36
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e4 e2       	ldi	r30, 0x24	; 36
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8SetPinDirection+0xcc>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8SetPinDirection+0xc8>
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	70 c0       	rjmp	.+224    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
 3f6:	8c 81       	ldd	r24, Y+4	; 0x04
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	38 87       	std	Y+8, r19	; 0x08
 3fe:	2f 83       	std	Y+7, r18	; 0x07
 400:	8f 81       	ldd	r24, Y+7	; 0x07
 402:	98 85       	ldd	r25, Y+8	; 0x08
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	d1 f0       	breq	.+52     	; 0x43c <DIO_u8SetPinDirection+0x11e>
 408:	2f 81       	ldd	r18, Y+7	; 0x07
 40a:	38 85       	ldd	r19, Y+8	; 0x08
 40c:	21 30       	cpi	r18, 0x01	; 1
 40e:	31 05       	cpc	r19, r1
 410:	09 f0       	breq	.+2      	; 0x414 <DIO_u8SetPinDirection+0xf6>
 412:	61 c0       	rjmp	.+194    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
 414:	a7 e2       	ldi	r26, 0x27	; 39
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e7 e2       	ldi	r30, 0x27	; 39
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8SetPinDirection+0x114>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8SetPinDirection+0x110>
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	4d c0       	rjmp	.+154    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
 43c:	a7 e2       	ldi	r26, 0x27	; 39
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e7 e2       	ldi	r30, 0x27	; 39
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_u8SetPinDirection+0x13c>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_u8SetPinDirection+0x138>
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	8c 93       	st	X, r24
 464:	38 c0       	rjmp	.+112    	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	3e 83       	std	Y+6, r19	; 0x06
 46e:	2d 83       	std	Y+5, r18	; 0x05
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	9e 81       	ldd	r25, Y+6	; 0x06
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	c9 f0       	breq	.+50     	; 0x4aa <DIO_u8SetPinDirection+0x18c>
 478:	2d 81       	ldd	r18, Y+5	; 0x05
 47a:	3e 81       	ldd	r19, Y+6	; 0x06
 47c:	21 30       	cpi	r18, 0x01	; 1
 47e:	31 05       	cpc	r19, r1
 480:	51 f5       	brne	.+84     	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
 482:	aa e2       	ldi	r26, 0x2A	; 42
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	ea e2       	ldi	r30, 0x2A	; 42
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPinDirection+0x182>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8SetPinDirection+0x17e>
 4a4:	84 2b       	or	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
 4aa:	aa e2       	ldi	r26, 0x2A	; 42
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	ea e2       	ldi	r30, 0x2A	; 42
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_u8SetPinDirection+0x1aa>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_u8SetPinDirection+0x1a6>
 4cc:	80 95       	com	r24
 4ce:	84 23       	and	r24, r20
 4d0:	8c 93       	st	X, r24
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <DIO_u8SetPinDirection+0x1b8>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 4d4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d8:	2c 96       	adiw	r28, 0x0c	; 12
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	2c 97       	sbiw	r28, 0x0c	; 12
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	8a 83       	std	Y+2, r24	; 0x02
 500:	6b 83       	std	Y+3, r22	; 0x03
 502:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	08 f0       	brcs	.+2      	; 0x510 <DIO_u8SetPinValue+0x26>
 50e:	c8 c0       	rjmp	.+400    	; 0x6a0 <DIO_u8SetPinValue+0x1b6>
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	08 f0       	brcs	.+2      	; 0x518 <DIO_u8SetPinValue+0x2e>
 516:	c4 c0       	rjmp	.+392    	; 0x6a0 <DIO_u8SetPinValue+0x1b6>
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	21 f0       	breq	.+8      	; 0x526 <DIO_u8SetPinValue+0x3c>
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	88 23       	and	r24, r24
 522:	09 f0       	breq	.+2      	; 0x526 <DIO_u8SetPinValue+0x3c>
 524:	bd c0       	rjmp	.+378    	; 0x6a0 <DIO_u8SetPinValue+0x1b6>
    {
        switch (Copy_u8PortId)
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	3c 87       	std	Y+12, r19	; 0x0c
 52e:	2b 87       	std	Y+11, r18	; 0x0b
 530:	8b 85       	ldd	r24, Y+11	; 0x0b
 532:	9c 85       	ldd	r25, Y+12	; 0x0c
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	91 05       	cpc	r25, r1
 538:	09 f4       	brne	.+2      	; 0x53c <DIO_u8SetPinValue+0x52>
 53a:	43 c0       	rjmp	.+134    	; 0x5c2 <DIO_u8SetPinValue+0xd8>
 53c:	2b 85       	ldd	r18, Y+11	; 0x0b
 53e:	3c 85       	ldd	r19, Y+12	; 0x0c
 540:	22 30       	cpi	r18, 0x02	; 2
 542:	31 05       	cpc	r19, r1
 544:	09 f4       	brne	.+2      	; 0x548 <DIO_u8SetPinValue+0x5e>
 546:	75 c0       	rjmp	.+234    	; 0x632 <DIO_u8SetPinValue+0x148>
 548:	8b 85       	ldd	r24, Y+11	; 0x0b
 54a:	9c 85       	ldd	r25, Y+12	; 0x0c
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	09 f0       	breq	.+2      	; 0x552 <DIO_u8SetPinValue+0x68>
 550:	a8 c0       	rjmp	.+336    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
 552:	8c 81       	ldd	r24, Y+4	; 0x04
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	3a 87       	std	Y+10, r19	; 0x0a
 55a:	29 87       	std	Y+9, r18	; 0x09
 55c:	89 85       	ldd	r24, Y+9	; 0x09
 55e:	9a 85       	ldd	r25, Y+10	; 0x0a
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	d1 f0       	breq	.+52     	; 0x598 <DIO_u8SetPinValue+0xae>
 564:	29 85       	ldd	r18, Y+9	; 0x09
 566:	3a 85       	ldd	r19, Y+10	; 0x0a
 568:	21 30       	cpi	r18, 0x01	; 1
 56a:	31 05       	cpc	r19, r1
 56c:	09 f0       	breq	.+2      	; 0x570 <DIO_u8SetPinValue+0x86>
 56e:	99 c0       	rjmp	.+306    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
 570:	a5 e2       	ldi	r26, 0x25	; 37
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	e5 e2       	ldi	r30, 0x25	; 37
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	48 2f       	mov	r20, r24
 57c:	8b 81       	ldd	r24, Y+3	; 0x03
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 2e       	mov	r0, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_u8SetPinValue+0xa4>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_u8SetPinValue+0xa0>
 592:	84 2b       	or	r24, r20
 594:	8c 93       	st	X, r24
 596:	85 c0       	rjmp	.+266    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
 598:	a5 e2       	ldi	r26, 0x25	; 37
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e5 e2       	ldi	r30, 0x25	; 37
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	48 2f       	mov	r20, r24
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 2e       	mov	r0, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8SetPinValue+0xcc>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8SetPinValue+0xc8>
 5ba:	80 95       	com	r24
 5bc:	84 23       	and	r24, r20
 5be:	8c 93       	st	X, r24
 5c0:	70 c0       	rjmp	.+224    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
 5c2:	8c 81       	ldd	r24, Y+4	; 0x04
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	38 87       	std	Y+8, r19	; 0x08
 5ca:	2f 83       	std	Y+7, r18	; 0x07
 5cc:	8f 81       	ldd	r24, Y+7	; 0x07
 5ce:	98 85       	ldd	r25, Y+8	; 0x08
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	d1 f0       	breq	.+52     	; 0x608 <DIO_u8SetPinValue+0x11e>
 5d4:	2f 81       	ldd	r18, Y+7	; 0x07
 5d6:	38 85       	ldd	r19, Y+8	; 0x08
 5d8:	21 30       	cpi	r18, 0x01	; 1
 5da:	31 05       	cpc	r19, r1
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <DIO_u8SetPinValue+0xf6>
 5de:	61 c0       	rjmp	.+194    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
 5e0:	a8 e2       	ldi	r26, 0x28	; 40
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e8 e2       	ldi	r30, 0x28	; 40
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	48 2f       	mov	r20, r24
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 2e       	mov	r0, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_u8SetPinValue+0x114>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_u8SetPinValue+0x110>
 602:	84 2b       	or	r24, r20
 604:	8c 93       	st	X, r24
 606:	4d c0       	rjmp	.+154    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
 608:	a8 e2       	ldi	r26, 0x28	; 40
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e8 e2       	ldi	r30, 0x28	; 40
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 2e       	mov	r0, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_u8SetPinValue+0x13c>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	0a 94       	dec	r0
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_u8SetPinValue+0x138>
 62a:	80 95       	com	r24
 62c:	84 23       	and	r24, r20
 62e:	8c 93       	st	X, r24
 630:	38 c0       	rjmp	.+112    	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	3e 83       	std	Y+6, r19	; 0x06
 63a:	2d 83       	std	Y+5, r18	; 0x05
 63c:	8d 81       	ldd	r24, Y+5	; 0x05
 63e:	9e 81       	ldd	r25, Y+6	; 0x06
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	c9 f0       	breq	.+50     	; 0x676 <DIO_u8SetPinValue+0x18c>
 644:	2d 81       	ldd	r18, Y+5	; 0x05
 646:	3e 81       	ldd	r19, Y+6	; 0x06
 648:	21 30       	cpi	r18, 0x01	; 1
 64a:	31 05       	cpc	r19, r1
 64c:	51 f5       	brne	.+84     	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
 64e:	ab e2       	ldi	r26, 0x2B	; 43
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	eb e2       	ldi	r30, 0x2B	; 43
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	48 2f       	mov	r20, r24
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 2e       	mov	r0, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_u8SetPinValue+0x182>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_u8SetPinValue+0x17e>
 670:	84 2b       	or	r24, r20
 672:	8c 93       	st	X, r24
 674:	16 c0       	rjmp	.+44     	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
 676:	ab e2       	ldi	r26, 0x2B	; 43
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	eb e2       	ldi	r30, 0x2B	; 43
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	48 2f       	mov	r20, r24
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 2e       	mov	r0, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_u8SetPinValue+0x1aa>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	0a 94       	dec	r0
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_u8SetPinValue+0x1a6>
 698:	80 95       	com	r24
 69a:	84 23       	and	r24, r20
 69c:	8c 93       	st	X, r24
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <DIO_u8SetPinValue+0x1b8>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 6a0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a4:	2c 96       	adiw	r28, 0x0c	; 12
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <DIO_u8TogglePin>:

u8 DIO_u8TogglePin     (u8 Copy_u8PortId,u8 Copy_u8PinId)
{
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	00 d0       	rcall	.+0      	; 0x6bc <DIO_u8TogglePin+0x6>
 6bc:	00 d0       	rcall	.+0      	; 0x6be <DIO_u8TogglePin+0x8>
 6be:	0f 92       	push	r0
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	8a 83       	std	Y+2, r24	; 0x02
 6c6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7))
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <DIO_u8TogglePin+0x1e>
 6d2:	53 c0       	rjmp	.+166    	; 0x77a <DIO_u8TogglePin+0xc4>
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	88 30       	cpi	r24, 0x08	; 8
 6d8:	08 f0       	brcs	.+2      	; 0x6dc <DIO_u8TogglePin+0x26>
 6da:	4f c0       	rjmp	.+158    	; 0x77a <DIO_u8TogglePin+0xc4>
    {
        switch (Copy_u8PortId)
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	3d 83       	std	Y+5, r19	; 0x05
 6e4:	2c 83       	std	Y+4, r18	; 0x04
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	9d 81       	ldd	r25, Y+5	; 0x05
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	91 05       	cpc	r25, r1
 6ee:	e9 f0       	breq	.+58     	; 0x72a <DIO_u8TogglePin+0x74>
 6f0:	2c 81       	ldd	r18, Y+4	; 0x04
 6f2:	3d 81       	ldd	r19, Y+5	; 0x05
 6f4:	22 30       	cpi	r18, 0x02	; 2
 6f6:	31 05       	cpc	r19, r1
 6f8:	61 f1       	breq	.+88     	; 0x752 <DIO_u8TogglePin+0x9c>
 6fa:	8c 81       	ldd	r24, Y+4	; 0x04
 6fc:	9d 81       	ldd	r25, Y+5	; 0x05
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	e9 f5       	brne	.+122    	; 0x77c <DIO_u8TogglePin+0xc6>
        {
        case DIO_u8_PORTB :TOG_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
 702:	a5 e2       	ldi	r26, 0x25	; 37
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e5 e2       	ldi	r30, 0x25	; 37
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	48 2f       	mov	r20, r24
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 2e       	mov	r0, r18
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_u8TogglePin+0x6a>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_u8TogglePin+0x66>
 724:	84 27       	eor	r24, r20
 726:	8c 93       	st	X, r24
 728:	29 c0       	rjmp	.+82     	; 0x77c <DIO_u8TogglePin+0xc6>
        case DIO_u8_PORTC :TOG_BIT(DIO_PORTC_REG,Copy_u8PinId)   ; break;
 72a:	a8 e2       	ldi	r26, 0x28	; 40
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	e8 e2       	ldi	r30, 0x28	; 40
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	48 2f       	mov	r20, r24
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 2e       	mov	r0, r18
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_u8TogglePin+0x92>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	0a 94       	dec	r0
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_u8TogglePin+0x8e>
 74c:	84 27       	eor	r24, r20
 74e:	8c 93       	st	X, r24
 750:	15 c0       	rjmp	.+42     	; 0x77c <DIO_u8TogglePin+0xc6>
        case DIO_u8_PORTD :TOG_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
 752:	ab e2       	ldi	r26, 0x2B	; 43
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	eb e2       	ldi	r30, 0x2B	; 43
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	48 2f       	mov	r20, r24
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 2e       	mov	r0, r18
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_u8TogglePin+0xba>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_u8TogglePin+0xb6>
 774:	84 27       	eor	r24, r20
 776:	8c 93       	st	X, r24
 778:	01 c0       	rjmp	.+2      	; 0x77c <DIO_u8TogglePin+0xc6>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 77a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 77c:	89 81       	ldd	r24, Y+1	; 0x01
}
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	cf 91       	pop	r28
 78a:	df 91       	pop	r29
 78c:	08 95       	ret

0000078e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
 78e:	df 93       	push	r29
 790:	cf 93       	push	r28
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	28 97       	sbiw	r28, 0x08	; 8
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	8b 83       	std	Y+3, r24	; 0x03
 7a4:	6c 83       	std	Y+4, r22	; 0x04
 7a6:	5e 83       	std	Y+6, r21	; 0x06
 7a8:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	83 30       	cpi	r24, 0x03	; 3
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <DIO_u8GetPinValue+0x28>
 7b4:	76 c0       	rjmp	.+236    	; 0x8a2 <DIO_u8GetPinValue+0x114>
 7b6:	8c 81       	ldd	r24, Y+4	; 0x04
 7b8:	88 30       	cpi	r24, 0x08	; 8
 7ba:	08 f0       	brcs	.+2      	; 0x7be <DIO_u8GetPinValue+0x30>
 7bc:	72 c0       	rjmp	.+228    	; 0x8a2 <DIO_u8GetPinValue+0x114>
 7be:	8d 81       	ldd	r24, Y+5	; 0x05
 7c0:	9e 81       	ldd	r25, Y+6	; 0x06
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <DIO_u8GetPinValue+0x3a>
 7c6:	6d c0       	rjmp	.+218    	; 0x8a2 <DIO_u8GetPinValue+0x114>
    {
        switch (Copy_u8PortId)
 7c8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	38 87       	std	Y+8, r19	; 0x08
 7d0:	2f 83       	std	Y+7, r18	; 0x07
 7d2:	4f 81       	ldd	r20, Y+7	; 0x07
 7d4:	58 85       	ldd	r21, Y+8	; 0x08
 7d6:	41 30       	cpi	r20, 0x01	; 1
 7d8:	51 05       	cpc	r21, r1
 7da:	49 f1       	breq	.+82     	; 0x82e <DIO_u8GetPinValue+0xa0>
 7dc:	8f 81       	ldd	r24, Y+7	; 0x07
 7de:	98 85       	ldd	r25, Y+8	; 0x08
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	91 05       	cpc	r25, r1
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <DIO_u8GetPinValue+0x5a>
 7e6:	40 c0       	rjmp	.+128    	; 0x868 <DIO_u8GetPinValue+0xda>
 7e8:	2f 81       	ldd	r18, Y+7	; 0x07
 7ea:	38 85       	ldd	r19, Y+8	; 0x08
 7ec:	21 15       	cp	r18, r1
 7ee:	31 05       	cpc	r19, r1
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <DIO_u8GetPinValue+0x66>
 7f2:	58 c0       	rjmp	.+176    	; 0x8a4 <DIO_u8GetPinValue+0x116>
        {
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
 7f4:	e3 e2       	ldi	r30, 0x23	; 35
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	8c 81       	ldd	r24, Y+4	; 0x04
 800:	88 2f       	mov	r24, r24
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	a9 01       	movw	r20, r18
 806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_u8GetPinValue+0x7e>
 808:	55 95       	asr	r21
 80a:	47 95       	ror	r20
 80c:	8a 95       	dec	r24
 80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_u8GetPinValue+0x7a>
 810:	ca 01       	movw	r24, r20
 812:	81 70       	andi	r24, 0x01	; 1
 814:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	29 f4       	brne	.+10     	; 0x826 <DIO_u8GetPinValue+0x98>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 81c:	ed 81       	ldd	r30, Y+5	; 0x05
 81e:	fe 81       	ldd	r31, Y+6	; 0x06
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 83       	st	Z, r24
 824:	3f c0       	rjmp	.+126    	; 0x8a4 <DIO_u8GetPinValue+0x116>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 826:	ed 81       	ldd	r30, Y+5	; 0x05
 828:	fe 81       	ldd	r31, Y+6	; 0x06
 82a:	10 82       	st	Z, r1
 82c:	3b c0       	rjmp	.+118    	; 0x8a4 <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
 82e:	e6 e2       	ldi	r30, 0x26	; 38
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	8c 81       	ldd	r24, Y+4	; 0x04
 83a:	88 2f       	mov	r24, r24
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	a9 01       	movw	r20, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_u8GetPinValue+0xb8>
 842:	55 95       	asr	r21
 844:	47 95       	ror	r20
 846:	8a 95       	dec	r24
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_u8GetPinValue+0xb4>
 84a:	ca 01       	movw	r24, r20
 84c:	81 70       	andi	r24, 0x01	; 1
 84e:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	29 f4       	brne	.+10     	; 0x860 <DIO_u8GetPinValue+0xd2>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 856:	ed 81       	ldd	r30, Y+5	; 0x05
 858:	fe 81       	ldd	r31, Y+6	; 0x06
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 83       	st	Z, r24
 85e:	22 c0       	rjmp	.+68     	; 0x8a4 <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 860:	ed 81       	ldd	r30, Y+5	; 0x05
 862:	fe 81       	ldd	r31, Y+6	; 0x06
 864:	10 82       	st	Z, r1
 866:	1e c0       	rjmp	.+60     	; 0x8a4 <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
 868:	e9 e2       	ldi	r30, 0x29	; 41
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	8c 81       	ldd	r24, Y+4	; 0x04
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	a9 01       	movw	r20, r18
 87a:	02 c0       	rjmp	.+4      	; 0x880 <DIO_u8GetPinValue+0xf2>
 87c:	55 95       	asr	r21
 87e:	47 95       	ror	r20
 880:	8a 95       	dec	r24
 882:	e2 f7       	brpl	.-8      	; 0x87c <DIO_u8GetPinValue+0xee>
 884:	ca 01       	movw	r24, r20
 886:	81 70       	andi	r24, 0x01	; 1
 888:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	29 f4       	brne	.+10     	; 0x89a <DIO_u8GetPinValue+0x10c>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
 890:	ed 81       	ldd	r30, Y+5	; 0x05
 892:	fe 81       	ldd	r31, Y+6	; 0x06
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	80 83       	st	Z, r24
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
 89a:	ed 81       	ldd	r30, Y+5	; 0x05
 89c:	fe 81       	ldd	r31, Y+6	; 0x06
 89e:	10 82       	st	Z, r1
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <DIO_u8GetPinValue+0x116>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 8a2:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
 8a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
 8a6:	28 96       	adiw	r28, 0x08	; 8
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	f8 94       	cli
 8ac:	de bf       	out	0x3e, r29	; 62
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	cd bf       	out	0x3d, r28	; 61
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	2b 97       	sbiw	r28, 0x0b	; 11
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	8a 83       	std	Y+2, r24	; 0x02
 8ce:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	83 30       	cpi	r24, 0x03	; 3
 8d8:	08 f0       	brcs	.+2      	; 0x8dc <DIO_u8SetPortDirection+0x24>
 8da:	60 c0       	rjmp	.+192    	; 0x99c <__stack+0x9d>
 8dc:	8b 81       	ldd	r24, Y+3	; 0x03
 8de:	88 23       	and	r24, r24
 8e0:	21 f0       	breq	.+8      	; 0x8ea <DIO_u8SetPortDirection+0x32>
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	81 30       	cpi	r24, 0x01	; 1
 8e6:	09 f0       	breq	.+2      	; 0x8ea <DIO_u8SetPortDirection+0x32>
 8e8:	59 c0       	rjmp	.+178    	; 0x99c <__stack+0x9d>
    {
        switch (Copy_u8PortId)
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	3b 87       	std	Y+11, r19	; 0x0b
 8f2:	2a 87       	std	Y+10, r18	; 0x0a
 8f4:	8a 85       	ldd	r24, Y+10	; 0x0a
 8f6:	9b 85       	ldd	r25, Y+11	; 0x0b
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	91 05       	cpc	r25, r1
 8fc:	09 f1       	breq	.+66     	; 0x940 <__stack+0x41>
 8fe:	2a 85       	ldd	r18, Y+10	; 0x0a
 900:	3b 85       	ldd	r19, Y+11	; 0x0b
 902:	22 30       	cpi	r18, 0x02	; 2
 904:	31 05       	cpc	r19, r1
 906:	99 f1       	breq	.+102    	; 0x96e <__stack+0x6f>
 908:	8a 85       	ldd	r24, Y+10	; 0x0a
 90a:	9b 85       	ldd	r25, Y+11	; 0x0b
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
 910:	46 c0       	rjmp	.+140    	; 0x99e <__stack+0x9f>
        {
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
 912:	8b 81       	ldd	r24, Y+3	; 0x03
 914:	28 2f       	mov	r18, r24
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	39 87       	std	Y+9, r19	; 0x09
 91a:	28 87       	std	Y+8, r18	; 0x08
 91c:	88 85       	ldd	r24, Y+8	; 0x08
 91e:	99 85       	ldd	r25, Y+9	; 0x09
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	51 f0       	breq	.+20     	; 0x938 <__stack+0x39>
 924:	28 85       	ldd	r18, Y+8	; 0x08
 926:	39 85       	ldd	r19, Y+9	; 0x09
 928:	21 30       	cpi	r18, 0x01	; 1
 92a:	31 05       	cpc	r19, r1
 92c:	c1 f5       	brne	.+112    	; 0x99e <__stack+0x9f>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
 92e:	e4 e2       	ldi	r30, 0x24	; 36
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	80 83       	st	Z, r24
 936:	33 c0       	rjmp	.+102    	; 0x99e <__stack+0x9f>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
 938:	e4 e2       	ldi	r30, 0x24	; 36
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	10 82       	st	Z, r1
 93e:	2f c0       	rjmp	.+94     	; 0x99e <__stack+0x9f>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	28 2f       	mov	r18, r24
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	3f 83       	std	Y+7, r19	; 0x07
 948:	2e 83       	std	Y+6, r18	; 0x06
 94a:	8e 81       	ldd	r24, Y+6	; 0x06
 94c:	9f 81       	ldd	r25, Y+7	; 0x07
 94e:	00 97       	sbiw	r24, 0x00	; 0
 950:	51 f0       	breq	.+20     	; 0x966 <__stack+0x67>
 952:	2e 81       	ldd	r18, Y+6	; 0x06
 954:	3f 81       	ldd	r19, Y+7	; 0x07
 956:	21 30       	cpi	r18, 0x01	; 1
 958:	31 05       	cpc	r19, r1
 95a:	09 f5       	brne	.+66     	; 0x99e <__stack+0x9f>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
 95c:	e7 e2       	ldi	r30, 0x27	; 39
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	80 83       	st	Z, r24
 964:	1c c0       	rjmp	.+56     	; 0x99e <__stack+0x9f>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
 966:	e7 e2       	ldi	r30, 0x27	; 39
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	10 82       	st	Z, r1
 96c:	18 c0       	rjmp	.+48     	; 0x99e <__stack+0x9f>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
 96e:	8b 81       	ldd	r24, Y+3	; 0x03
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	3d 83       	std	Y+5, r19	; 0x05
 976:	2c 83       	std	Y+4, r18	; 0x04
 978:	8c 81       	ldd	r24, Y+4	; 0x04
 97a:	9d 81       	ldd	r25, Y+5	; 0x05
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	51 f0       	breq	.+20     	; 0x994 <__stack+0x95>
 980:	2c 81       	ldd	r18, Y+4	; 0x04
 982:	3d 81       	ldd	r19, Y+5	; 0x05
 984:	21 30       	cpi	r18, 0x01	; 1
 986:	31 05       	cpc	r19, r1
 988:	51 f4       	brne	.+20     	; 0x99e <__stack+0x9f>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
 98a:	ea e2       	ldi	r30, 0x2A	; 42
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	8f ef       	ldi	r24, 0xFF	; 255
 990:	80 83       	st	Z, r24
 992:	05 c0       	rjmp	.+10     	; 0x99e <__stack+0x9f>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
 994:	ea e2       	ldi	r30, 0x2A	; 42
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	10 82       	st	Z, r1
 99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x9f>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 99c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 99e:	89 81       	ldd	r24, Y+1	; 0x01

}
 9a0:	2b 96       	adiw	r28, 0x0b	; 11
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	00 d0       	rcall	.+0      	; 0x9b8 <DIO_u8SetPortValue+0x6>
 9b8:	00 d0       	rcall	.+0      	; 0x9ba <DIO_u8SetPortValue+0x8>
 9ba:	0f 92       	push	r0
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	8a 83       	std	Y+2, r24	; 0x02
 9c2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
 9c8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ca:	28 2f       	mov	r18, r24
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	3d 83       	std	Y+5, r19	; 0x05
 9d0:	2c 83       	std	Y+4, r18	; 0x04
 9d2:	8c 81       	ldd	r24, Y+4	; 0x04
 9d4:	9d 81       	ldd	r25, Y+5	; 0x05
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	91 05       	cpc	r25, r1
 9da:	71 f0       	breq	.+28     	; 0x9f8 <DIO_u8SetPortValue+0x46>
 9dc:	2c 81       	ldd	r18, Y+4	; 0x04
 9de:	3d 81       	ldd	r19, Y+5	; 0x05
 9e0:	22 30       	cpi	r18, 0x02	; 2
 9e2:	31 05       	cpc	r19, r1
 9e4:	71 f0       	breq	.+28     	; 0xa02 <DIO_u8SetPortValue+0x50>
 9e6:	8c 81       	ldd	r24, Y+4	; 0x04
 9e8:	9d 81       	ldd	r25, Y+5	; 0x05
 9ea:	00 97       	sbiw	r24, 0x00	; 0
 9ec:	79 f4       	brne	.+30     	; 0xa0c <DIO_u8SetPortValue+0x5a>
    {
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
 9ee:	e5 e2       	ldi	r30, 0x25	; 37
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	80 83       	st	Z, r24
 9f6:	0b c0       	rjmp	.+22     	; 0xa0e <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
 9f8:	e8 e2       	ldi	r30, 0x28	; 40
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	8b 81       	ldd	r24, Y+3	; 0x03
 9fe:	80 83       	st	Z, r24
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
 a02:	eb e2       	ldi	r30, 0x2B	; 43
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	80 83       	st	Z, r24
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <DIO_u8SetPortValue+0x5c>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
 a0c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	0f 90       	pop	r0
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	cf 91       	pop	r28
 a1c:	df 91       	pop	r29
 a1e:	08 95       	ret

00000a20 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
 a20:	df 93       	push	r29
 a22:	cf 93       	push	r28
 a24:	00 d0       	rcall	.+0      	; 0xa26 <Dio_u8GetPortValue+0x6>
 a26:	00 d0       	rcall	.+0      	; 0xa28 <Dio_u8GetPortValue+0x8>
 a28:	00 d0       	rcall	.+0      	; 0xa2a <Dio_u8GetPortValue+0xa>
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	8a 83       	std	Y+2, r24	; 0x02
 a30:	7c 83       	std	Y+4, r23	; 0x04
 a32:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
 a38:	8a 81       	ldd	r24, Y+2	; 0x02
 a3a:	82 30       	cpi	r24, 0x02	; 2
 a3c:	60 f1       	brcs	.+88     	; 0xa96 <Dio_u8GetPortValue+0x76>
 a3e:	8b 81       	ldd	r24, Y+3	; 0x03
 a40:	9c 81       	ldd	r25, Y+4	; 0x04
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	41 f1       	breq	.+80     	; 0xa96 <Dio_u8GetPortValue+0x76>
    {
        switch (Copy_u8PortId)
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	28 2f       	mov	r18, r24
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	3e 83       	std	Y+6, r19	; 0x06
 a4e:	2d 83       	std	Y+5, r18	; 0x05
 a50:	8d 81       	ldd	r24, Y+5	; 0x05
 a52:	9e 81       	ldd	r25, Y+6	; 0x06
 a54:	81 30       	cpi	r24, 0x01	; 1
 a56:	91 05       	cpc	r25, r1
 a58:	81 f0       	breq	.+32     	; 0xa7a <Dio_u8GetPortValue+0x5a>
 a5a:	2d 81       	ldd	r18, Y+5	; 0x05
 a5c:	3e 81       	ldd	r19, Y+6	; 0x06
 a5e:	22 30       	cpi	r18, 0x02	; 2
 a60:	31 05       	cpc	r19, r1
 a62:	91 f0       	breq	.+36     	; 0xa88 <Dio_u8GetPortValue+0x68>
 a64:	8d 81       	ldd	r24, Y+5	; 0x05
 a66:	9e 81       	ldd	r25, Y+6	; 0x06
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	b1 f4       	brne	.+44     	; 0xa98 <Dio_u8GetPortValue+0x78>
        {
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
 a6c:	e3 e2       	ldi	r30, 0x23	; 35
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	eb 81       	ldd	r30, Y+3	; 0x03
 a74:	fc 81       	ldd	r31, Y+4	; 0x04
 a76:	80 83       	st	Z, r24
 a78:	0f c0       	rjmp	.+30     	; 0xa98 <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
 a7a:	e6 e2       	ldi	r30, 0x26	; 38
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	80 81       	ld	r24, Z
 a80:	eb 81       	ldd	r30, Y+3	; 0x03
 a82:	fc 81       	ldd	r31, Y+4	; 0x04
 a84:	80 83       	st	Z, r24
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
 a88:	e9 e2       	ldi	r30, 0x29	; 41
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	eb 81       	ldd	r30, Y+3	; 0x03
 a90:	fc 81       	ldd	r31, Y+4	; 0x04
 a92:	80 83       	st	Z, r24
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <Dio_u8GetPortValue+0x78>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
 a96:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
 a98:	89 81       	ldd	r24, Y+1	; 0x01
}
 a9a:	26 96       	adiw	r28, 0x06	; 6
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	08 95       	ret

00000aac <GIE_voidEnable>:
#include "GIE_INTERFACE.h"



void GIE_voidEnable(void)
{
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
 ab4:	af e5       	ldi	r26, 0x5F	; 95
 ab6:	b0 e0       	ldi	r27, 0x00	; 0
 ab8:	ef e5       	ldi	r30, 0x5F	; 95
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	80 68       	ori	r24, 0x80	; 128
 ac0:	8c 93       	st	X, r24
}
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 ac8:	df 93       	push	r29
 aca:	cf 93       	push	r28
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
 ad0:	af e5       	ldi	r26, 0x5F	; 95
 ad2:	b0 e0       	ldi	r27, 0x00	; 0
 ad4:	ef e5       	ldi	r30, 0x5F	; 95
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	8f 77       	andi	r24, 0x7F	; 127
 adc:	8c 93       	st	X, r24
}
 ade:	cf 91       	pop	r28
 ae0:	df 91       	pop	r29
 ae2:	08 95       	ret

00000ae4 <main>:
#define LED_PORT    DIO_u8_PORTB

void App_CallBackFinction (u16 Copy_u16Digitalval);
u16 App_u16DigitalRead = 0xffff;
int main (void)
{
 ae4:	df 93       	push	r29
 ae6:	cf 93       	push	r28
 ae8:	00 d0       	rcall	.+0      	; 0xaea <main+0x6>
 aea:	00 d0       	rcall	.+0      	; 0xaec <main+0x8>
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
    //u16 DigitalVal = 0;
    u32 AnalogVal  = 0;
 af0:	19 82       	std	Y+1, r1	; 0x01
 af2:	1a 82       	std	Y+2, r1	; 0x02
 af4:	1b 82       	std	Y+3, r1	; 0x03
 af6:	1c 82       	std	Y+4, r1	; 0x04
    /*DIO initialization*/
    DIO_voidInit();
 af8:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidInit>
    /*ADC init*/
    ADC_voidinit();
 afc:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_voidinit>
    /*GIE*/
    GIE_voidEnable();
 b00:	0e 94 56 05 	call	0xaac	; 0xaac <GIE_voidEnable>

    while(1)
    {
        ADC_u8GetDigitalValueAsync( ADC_u8_ADC0 , App_CallBackFinction );
 b04:	20 e2       	ldi	r18, 0x20	; 32
 b06:	36 e0       	ldi	r19, 0x06	; 6
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	b9 01       	movw	r22, r18
 b0c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ADC_u8GetDigitalValueAsync>
        if(App_u16DigitalRead != 0xffff)
 b10:	80 91 00 01 	lds	r24, 0x0100
 b14:	90 91 01 01 	lds	r25, 0x0101
 b18:	2f ef       	ldi	r18, 0xFF	; 255
 b1a:	8f 3f       	cpi	r24, 0xFF	; 255
 b1c:	92 07       	cpc	r25, r18
 b1e:	91 f3       	breq	.-28     	; 0xb04 <main+0x20>
        {
            AnalogVal = ((u32)App_u16DigitalRead* 5000UL)/1024;
 b20:	80 91 00 01 	lds	r24, 0x0100
 b24:	90 91 01 01 	lds	r25, 0x0101
 b28:	cc 01       	movw	r24, r24
 b2a:	a0 e0       	ldi	r26, 0x00	; 0
 b2c:	b0 e0       	ldi	r27, 0x00	; 0
 b2e:	28 e8       	ldi	r18, 0x88	; 136
 b30:	33 e1       	ldi	r19, 0x13	; 19
 b32:	40 e0       	ldi	r20, 0x00	; 0
 b34:	50 e0       	ldi	r21, 0x00	; 0
 b36:	bc 01       	movw	r22, r24
 b38:	cd 01       	movw	r24, r26
 b3a:	0e 94 32 06 	call	0xc64	; 0xc64 <__mulsi3>
 b3e:	dc 01       	movw	r26, r24
 b40:	cb 01       	movw	r24, r22
 b42:	07 2e       	mov	r0, r23
 b44:	7a e0       	ldi	r23, 0x0A	; 10
 b46:	b6 95       	lsr	r27
 b48:	a7 95       	ror	r26
 b4a:	97 95       	ror	r25
 b4c:	87 95       	ror	r24
 b4e:	7a 95       	dec	r23
 b50:	d1 f7       	brne	.-12     	; 0xb46 <main+0x62>
 b52:	70 2d       	mov	r23, r0
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	9a 83       	std	Y+2, r25	; 0x02
 b58:	ab 83       	std	Y+3, r26	; 0x03
 b5a:	bc 83       	std	Y+4, r27	; 0x04
            if(AnalogVal < 1500)
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	9a 81       	ldd	r25, Y+2	; 0x02
 b60:	ab 81       	ldd	r26, Y+3	; 0x03
 b62:	bc 81       	ldd	r27, Y+4	; 0x04
 b64:	8c 3d       	cpi	r24, 0xDC	; 220
 b66:	25 e0       	ldi	r18, 0x05	; 5
 b68:	92 07       	cpc	r25, r18
 b6a:	20 e0       	ldi	r18, 0x00	; 0
 b6c:	a2 07       	cpc	r26, r18
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	b2 07       	cpc	r27, r18
 b72:	80 f4       	brcc	.+32     	; 0xb94 <main+0xb0>
            {
                DIO_u8SetPinValue(LED_PORT,LED1_PIN,DIO_u8_HIGH);
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	41 e0       	ldi	r20, 0x01	; 1
 b7a:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED2_PIN,DIO_u8_LOW);
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	61 e0       	ldi	r22, 0x01	; 1
 b82:	40 e0       	ldi	r20, 0x00	; 0
 b84:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED3_PIN,DIO_u8_LOW);
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	62 e0       	ldi	r22, 0x02	; 2
 b8c:	40 e0       	ldi	r20, 0x00	; 0
 b8e:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
 b92:	4f c0       	rjmp	.+158    	; 0xc32 <main+0x14e>
            }
            else if((AnalogVal >= 1500) && (AnalogVal <= 3000))
 b94:	89 81       	ldd	r24, Y+1	; 0x01
 b96:	9a 81       	ldd	r25, Y+2	; 0x02
 b98:	ab 81       	ldd	r26, Y+3	; 0x03
 b9a:	bc 81       	ldd	r27, Y+4	; 0x04
 b9c:	8c 3d       	cpi	r24, 0xDC	; 220
 b9e:	25 e0       	ldi	r18, 0x05	; 5
 ba0:	92 07       	cpc	r25, r18
 ba2:	20 e0       	ldi	r18, 0x00	; 0
 ba4:	a2 07       	cpc	r26, r18
 ba6:	20 e0       	ldi	r18, 0x00	; 0
 ba8:	b2 07       	cpc	r27, r18
 baa:	e0 f0       	brcs	.+56     	; 0xbe4 <main+0x100>
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	9a 81       	ldd	r25, Y+2	; 0x02
 bb0:	ab 81       	ldd	r26, Y+3	; 0x03
 bb2:	bc 81       	ldd	r27, Y+4	; 0x04
 bb4:	89 3b       	cpi	r24, 0xB9	; 185
 bb6:	2b e0       	ldi	r18, 0x0B	; 11
 bb8:	92 07       	cpc	r25, r18
 bba:	20 e0       	ldi	r18, 0x00	; 0
 bbc:	a2 07       	cpc	r26, r18
 bbe:	20 e0       	ldi	r18, 0x00	; 0
 bc0:	b2 07       	cpc	r27, r18
 bc2:	80 f4       	brcc	.+32     	; 0xbe4 <main+0x100>
            {
                DIO_u8SetPinValue(LED_PORT,LED1_PIN,DIO_u8_LOW);
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	60 e0       	ldi	r22, 0x00	; 0
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED2_PIN,DIO_u8_HIGH);
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	61 e0       	ldi	r22, 0x01	; 1
 bd2:	41 e0       	ldi	r20, 0x01	; 1
 bd4:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED3_PIN,DIO_u8_LOW);
 bd8:	80 e0       	ldi	r24, 0x00	; 0
 bda:	62 e0       	ldi	r22, 0x02	; 2
 bdc:	40 e0       	ldi	r20, 0x00	; 0
 bde:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
 be2:	27 c0       	rjmp	.+78     	; 0xc32 <main+0x14e>
            }
            else if((AnalogVal > 3000) && (AnalogVal <= 5000))
 be4:	89 81       	ldd	r24, Y+1	; 0x01
 be6:	9a 81       	ldd	r25, Y+2	; 0x02
 be8:	ab 81       	ldd	r26, Y+3	; 0x03
 bea:	bc 81       	ldd	r27, Y+4	; 0x04
 bec:	89 3b       	cpi	r24, 0xB9	; 185
 bee:	2b e0       	ldi	r18, 0x0B	; 11
 bf0:	92 07       	cpc	r25, r18
 bf2:	20 e0       	ldi	r18, 0x00	; 0
 bf4:	a2 07       	cpc	r26, r18
 bf6:	20 e0       	ldi	r18, 0x00	; 0
 bf8:	b2 07       	cpc	r27, r18
 bfa:	d8 f0       	brcs	.+54     	; 0xc32 <main+0x14e>
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
 bfe:	9a 81       	ldd	r25, Y+2	; 0x02
 c00:	ab 81       	ldd	r26, Y+3	; 0x03
 c02:	bc 81       	ldd	r27, Y+4	; 0x04
 c04:	89 38       	cpi	r24, 0x89	; 137
 c06:	23 e1       	ldi	r18, 0x13	; 19
 c08:	92 07       	cpc	r25, r18
 c0a:	20 e0       	ldi	r18, 0x00	; 0
 c0c:	a2 07       	cpc	r26, r18
 c0e:	20 e0       	ldi	r18, 0x00	; 0
 c10:	b2 07       	cpc	r27, r18
 c12:	78 f4       	brcc	.+30     	; 0xc32 <main+0x14e>
            {
                DIO_u8SetPinValue(LED_PORT,LED1_PIN,DIO_u8_LOW);
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	40 e0       	ldi	r20, 0x00	; 0
 c1a:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED2_PIN,DIO_u8_LOW);
 c1e:	80 e0       	ldi	r24, 0x00	; 0
 c20:	61 e0       	ldi	r22, 0x01	; 1
 c22:	40 e0       	ldi	r20, 0x00	; 0
 c24:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
                DIO_u8SetPinValue(LED_PORT,LED3_PIN,DIO_u8_HIGH);
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	62 e0       	ldi	r22, 0x02	; 2
 c2c:	41 e0       	ldi	r20, 0x01	; 1
 c2e:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
            }
            App_u16DigitalRead = 0xffff;
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	9f ef       	ldi	r25, 0xFF	; 255
 c36:	90 93 01 01 	sts	0x0101, r25
 c3a:	80 93 00 01 	sts	0x0100, r24
 c3e:	62 cf       	rjmp	.-316    	; 0xb04 <main+0x20>

00000c40 <App_CallBackFinction>:
    }
    return 0 ;
}

void App_CallBackFinction (u16 Copy_u16Digitalval)
{
 c40:	df 93       	push	r29
 c42:	cf 93       	push	r28
 c44:	00 d0       	rcall	.+0      	; 0xc46 <App_CallBackFinction+0x6>
 c46:	cd b7       	in	r28, 0x3d	; 61
 c48:	de b7       	in	r29, 0x3e	; 62
 c4a:	9a 83       	std	Y+2, r25	; 0x02
 c4c:	89 83       	std	Y+1, r24	; 0x01
    App_u16DigitalRead = Copy_u16Digitalval;
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	9a 81       	ldd	r25, Y+2	; 0x02
 c52:	90 93 01 01 	sts	0x0101, r25
 c56:	80 93 00 01 	sts	0x0100, r24
}
 c5a:	0f 90       	pop	r0
 c5c:	0f 90       	pop	r0
 c5e:	cf 91       	pop	r28
 c60:	df 91       	pop	r29
 c62:	08 95       	ret

00000c64 <__mulsi3>:
 c64:	62 9f       	mul	r22, r18
 c66:	d0 01       	movw	r26, r0
 c68:	73 9f       	mul	r23, r19
 c6a:	f0 01       	movw	r30, r0
 c6c:	82 9f       	mul	r24, r18
 c6e:	e0 0d       	add	r30, r0
 c70:	f1 1d       	adc	r31, r1
 c72:	64 9f       	mul	r22, r20
 c74:	e0 0d       	add	r30, r0
 c76:	f1 1d       	adc	r31, r1
 c78:	92 9f       	mul	r25, r18
 c7a:	f0 0d       	add	r31, r0
 c7c:	83 9f       	mul	r24, r19
 c7e:	f0 0d       	add	r31, r0
 c80:	74 9f       	mul	r23, r20
 c82:	f0 0d       	add	r31, r0
 c84:	65 9f       	mul	r22, r21
 c86:	f0 0d       	add	r31, r0
 c88:	99 27       	eor	r25, r25
 c8a:	72 9f       	mul	r23, r18
 c8c:	b0 0d       	add	r27, r0
 c8e:	e1 1d       	adc	r30, r1
 c90:	f9 1f       	adc	r31, r25
 c92:	63 9f       	mul	r22, r19
 c94:	b0 0d       	add	r27, r0
 c96:	e1 1d       	adc	r30, r1
 c98:	f9 1f       	adc	r31, r25
 c9a:	bd 01       	movw	r22, r26
 c9c:	cf 01       	movw	r24, r30
 c9e:	11 24       	eor	r1, r1
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
