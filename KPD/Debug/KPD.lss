
KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002606  0000267a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002606  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000019b0  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc1  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008146  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000090c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000950a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e0       	ldi	r30, 0x06	; 6
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 0c 10 	call	0x2018	; 0x2018 <main>
      8e:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	a3 e0       	ldi	r26, 0x03	; 3
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__>

00000636 <__divsf3>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__prologue_saves__+0x10>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	b9 e0       	ldi	r27, 0x09	; 9
     654:	eb 2e       	mov	r14, r27
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     676:	29 85       	ldd	r18, Y+9	; 0x09
     678:	22 30       	cpi	r18, 0x02	; 2
     67a:	08 f4       	brcc	.+2      	; 0x67e <__divsf3+0x48>
     67c:	7e c0       	rjmp	.+252    	; 0x77a <__divsf3+0x144>
     67e:	39 89       	ldd	r19, Y+17	; 0x11
     680:	32 30       	cpi	r19, 0x02	; 2
     682:	10 f4       	brcc	.+4      	; 0x688 <__divsf3+0x52>
     684:	b8 01       	movw	r22, r16
     686:	7c c0       	rjmp	.+248    	; 0x780 <__divsf3+0x14a>
     688:	8a 85       	ldd	r24, Y+10	; 0x0a
     68a:	9a 89       	ldd	r25, Y+18	; 0x12
     68c:	89 27       	eor	r24, r25
     68e:	8a 87       	std	Y+10, r24	; 0x0a
     690:	24 30       	cpi	r18, 0x04	; 4
     692:	11 f0       	breq	.+4      	; 0x698 <__divsf3+0x62>
     694:	22 30       	cpi	r18, 0x02	; 2
     696:	31 f4       	brne	.+12     	; 0x6a4 <__divsf3+0x6e>
     698:	23 17       	cp	r18, r19
     69a:	09 f0       	breq	.+2      	; 0x69e <__divsf3+0x68>
     69c:	6e c0       	rjmp	.+220    	; 0x77a <__divsf3+0x144>
     69e:	63 e0       	ldi	r22, 0x03	; 3
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	6e c0       	rjmp	.+220    	; 0x780 <__divsf3+0x14a>
     6a4:	34 30       	cpi	r19, 0x04	; 4
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <__divsf3+0x80>
     6a8:	1d 86       	std	Y+13, r1	; 0x0d
     6aa:	1e 86       	std	Y+14, r1	; 0x0e
     6ac:	1f 86       	std	Y+15, r1	; 0x0f
     6ae:	18 8a       	std	Y+16, r1	; 0x10
     6b0:	1c 86       	std	Y+12, r1	; 0x0c
     6b2:	1b 86       	std	Y+11, r1	; 0x0b
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__divsf3+0x88>
     6b6:	32 30       	cpi	r19, 0x02	; 2
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <__divsf3+0x8c>
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	89 87       	std	Y+9, r24	; 0x09
     6be:	b7 01       	movw	r22, r14
     6c0:	5f c0       	rjmp	.+190    	; 0x780 <__divsf3+0x14a>
     6c2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	28 1b       	sub	r18, r24
     6cc:	39 0b       	sbc	r19, r25
     6ce:	3c 87       	std	Y+12, r19	; 0x0c
     6d0:	2b 87       	std	Y+11, r18	; 0x0b
     6d2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d8:	18 89       	ldd	r17, Y+16	; 0x10
     6da:	ad 88       	ldd	r10, Y+21	; 0x15
     6dc:	be 88       	ldd	r11, Y+22	; 0x16
     6de:	cf 88       	ldd	r12, Y+23	; 0x17
     6e0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6e2:	ea 14       	cp	r14, r10
     6e4:	fb 04       	cpc	r15, r11
     6e6:	0c 05       	cpc	r16, r12
     6e8:	1d 05       	cpc	r17, r13
     6ea:	40 f4       	brcc	.+16     	; 0x6fc <__divsf3+0xc6>
     6ec:	ee 0c       	add	r14, r14
     6ee:	ff 1c       	adc	r15, r15
     6f0:	00 1f       	adc	r16, r16
     6f2:	11 1f       	adc	r17, r17
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	30 40       	sbci	r19, 0x00	; 0
     6f8:	3c 87       	std	Y+12, r19	; 0x0c
     6fa:	2b 87       	std	Y+11, r18	; 0x0b
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b0 e4       	ldi	r27, 0x40	; 64
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	ea 14       	cp	r14, r10
     712:	fb 04       	cpc	r15, r11
     714:	0c 05       	cpc	r16, r12
     716:	1d 05       	cpc	r17, r13
     718:	40 f0       	brcs	.+16     	; 0x72a <__divsf3+0xf4>
     71a:	28 2b       	or	r18, r24
     71c:	39 2b       	or	r19, r25
     71e:	4a 2b       	or	r20, r26
     720:	5b 2b       	or	r21, r27
     722:	ea 18       	sub	r14, r10
     724:	fb 08       	sbc	r15, r11
     726:	0c 09       	sbc	r16, r12
     728:	1d 09       	sbc	r17, r13
     72a:	b6 95       	lsr	r27
     72c:	a7 95       	ror	r26
     72e:	97 95       	ror	r25
     730:	87 95       	ror	r24
     732:	ee 0c       	add	r14, r14
     734:	ff 1c       	adc	r15, r15
     736:	00 1f       	adc	r16, r16
     738:	11 1f       	adc	r17, r17
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	6f 31       	cpi	r22, 0x1F	; 31
     740:	71 05       	cpc	r23, r1
     742:	31 f7       	brne	.-52     	; 0x710 <__divsf3+0xda>
     744:	da 01       	movw	r26, r20
     746:	c9 01       	movw	r24, r18
     748:	8f 77       	andi	r24, 0x7F	; 127
     74a:	90 70       	andi	r25, 0x00	; 0
     74c:	a0 70       	andi	r26, 0x00	; 0
     74e:	b0 70       	andi	r27, 0x00	; 0
     750:	80 34       	cpi	r24, 0x40	; 64
     752:	91 05       	cpc	r25, r1
     754:	a1 05       	cpc	r26, r1
     756:	b1 05       	cpc	r27, r1
     758:	61 f4       	brne	.+24     	; 0x772 <__divsf3+0x13c>
     75a:	27 fd       	sbrc	r18, 7
     75c:	0a c0       	rjmp	.+20     	; 0x772 <__divsf3+0x13c>
     75e:	e1 14       	cp	r14, r1
     760:	f1 04       	cpc	r15, r1
     762:	01 05       	cpc	r16, r1
     764:	11 05       	cpc	r17, r1
     766:	29 f0       	breq	.+10     	; 0x772 <__divsf3+0x13c>
     768:	20 5c       	subi	r18, 0xC0	; 192
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	4f 4f       	sbci	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	20 78       	andi	r18, 0x80	; 128
     772:	2d 87       	std	Y+13, r18	; 0x0d
     774:	3e 87       	std	Y+14, r19	; 0x0e
     776:	4f 87       	std	Y+15, r20	; 0x0f
     778:	58 8b       	std	Y+16, r21	; 0x10
     77a:	be 01       	movw	r22, r28
     77c:	67 5f       	subi	r22, 0xF7	; 247
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	cb 01       	movw	r24, r22
     782:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     786:	68 96       	adiw	r28, 0x18	; 24
     788:	ea e0       	ldi	r30, 0x0A	; 10
     78a:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__epilogue_restores__+0x10>

0000078e <__gtsf2>:
     78e:	a8 e1       	ldi	r26, 0x18	; 24
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ed ec       	ldi	r30, 0xCD	; 205
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     79a:	69 83       	std	Y+1, r22	; 0x01
     79c:	7a 83       	std	Y+2, r23	; 0x02
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	2d 83       	std	Y+5, r18	; 0x05
     7a4:	3e 83       	std	Y+6, r19	; 0x06
     7a6:	4f 83       	std	Y+7, r20	; 0x07
     7a8:	58 87       	std	Y+8, r21	; 0x08
     7aa:	89 e0       	ldi	r24, 0x09	; 9
     7ac:	e8 2e       	mov	r14, r24
     7ae:	f1 2c       	mov	r15, r1
     7b0:	ec 0e       	add	r14, r28
     7b2:	fd 1e       	adc	r15, r29
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	b7 01       	movw	r22, r14
     7ba:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     7be:	8e 01       	movw	r16, r28
     7c0:	0f 5e       	subi	r16, 0xEF	; 239
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	05 96       	adiw	r24, 0x05	; 5
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	40 f0       	brcs	.+16     	; 0x7e4 <__gtsf2+0x56>
     7d4:	89 89       	ldd	r24, Y+17	; 0x11
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	28 f0       	brcs	.+10     	; 0x7e4 <__gtsf2+0x56>
     7da:	c7 01       	movw	r24, r14
     7dc:	b8 01       	movw	r22, r16
     7de:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <__gtsf2+0x58>
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	68 96       	adiw	r28, 0x18	; 24
     7e8:	e6 e0       	ldi	r30, 0x06	; 6
     7ea:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

000007ee <__gesf2>:
     7ee:	a8 e1       	ldi	r26, 0x18	; 24
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	ed ef       	ldi	r30, 0xFD	; 253
     7f4:	f3 e0       	ldi	r31, 0x03	; 3
     7f6:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	7a 83       	std	Y+2, r23	; 0x02
     7fe:	8b 83       	std	Y+3, r24	; 0x03
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	2d 83       	std	Y+5, r18	; 0x05
     804:	3e 83       	std	Y+6, r19	; 0x06
     806:	4f 83       	std	Y+7, r20	; 0x07
     808:	58 87       	std	Y+8, r21	; 0x08
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	e8 2e       	mov	r14, r24
     80e:	f1 2c       	mov	r15, r1
     810:	ec 0e       	add	r14, r28
     812:	fd 1e       	adc	r15, r29
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	b7 01       	movw	r22, r14
     81a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     81e:	8e 01       	movw	r16, r28
     820:	0f 5e       	subi	r16, 0xEF	; 239
     822:	1f 4f       	sbci	r17, 0xFF	; 255
     824:	ce 01       	movw	r24, r28
     826:	05 96       	adiw	r24, 0x05	; 5
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	40 f0       	brcs	.+16     	; 0x844 <__gesf2+0x56>
     834:	89 89       	ldd	r24, Y+17	; 0x11
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	28 f0       	brcs	.+10     	; 0x844 <__gesf2+0x56>
     83a:	c7 01       	movw	r24, r14
     83c:	b8 01       	movw	r22, r16
     83e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     842:	01 c0       	rjmp	.+2      	; 0x846 <__gesf2+0x58>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	68 96       	adiw	r28, 0x18	; 24
     848:	e6 e0       	ldi	r30, 0x06	; 6
     84a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

0000084e <__ltsf2>:
     84e:	a8 e1       	ldi	r26, 0x18	; 24
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	ed e2       	ldi	r30, 0x2D	; 45
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     85a:	69 83       	std	Y+1, r22	; 0x01
     85c:	7a 83       	std	Y+2, r23	; 0x02
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	2d 83       	std	Y+5, r18	; 0x05
     864:	3e 83       	std	Y+6, r19	; 0x06
     866:	4f 83       	std	Y+7, r20	; 0x07
     868:	58 87       	std	Y+8, r21	; 0x08
     86a:	89 e0       	ldi	r24, 0x09	; 9
     86c:	e8 2e       	mov	r14, r24
     86e:	f1 2c       	mov	r15, r1
     870:	ec 0e       	add	r14, r28
     872:	fd 1e       	adc	r15, r29
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	b7 01       	movw	r22, r14
     87a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     87e:	8e 01       	movw	r16, r28
     880:	0f 5e       	subi	r16, 0xEF	; 239
     882:	1f 4f       	sbci	r17, 0xFF	; 255
     884:	ce 01       	movw	r24, r28
     886:	05 96       	adiw	r24, 0x05	; 5
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	40 f0       	brcs	.+16     	; 0x8a4 <__ltsf2+0x56>
     894:	89 89       	ldd	r24, Y+17	; 0x11
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	28 f0       	brcs	.+10     	; 0x8a4 <__ltsf2+0x56>
     89a:	c7 01       	movw	r24, r14
     89c:	b8 01       	movw	r22, r16
     89e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <__ltsf2+0x58>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	68 96       	adiw	r28, 0x18	; 24
     8a8:	e6 e0       	ldi	r30, 0x06	; 6
     8aa:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

000008ae <__fixsfsi>:
     8ae:	ac e0       	ldi	r26, 0x0C	; 12
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	ed e5       	ldi	r30, 0x5D	; 93
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__prologue_saves__+0x20>
     8ba:	69 83       	std	Y+1, r22	; 0x01
     8bc:	7a 83       	std	Y+2, r23	; 0x02
     8be:	8b 83       	std	Y+3, r24	; 0x03
     8c0:	9c 83       	std	Y+4, r25	; 0x04
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	be 01       	movw	r22, r28
     8c8:	6b 5f       	subi	r22, 0xFB	; 251
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	61 f1       	breq	.+88     	; 0x92e <__stack+0x2f>
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	50 f1       	brcs	.+84     	; 0x92e <__stack+0x2f>
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__fixsfsi+0x38>
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	88 23       	and	r24, r24
     8e2:	51 f1       	breq	.+84     	; 0x938 <__stack+0x39>
     8e4:	2e c0       	rjmp	.+92     	; 0x942 <__stack+0x43>
     8e6:	2f 81       	ldd	r18, Y+7	; 0x07
     8e8:	38 85       	ldd	r19, Y+8	; 0x08
     8ea:	37 fd       	sbrc	r19, 7
     8ec:	20 c0       	rjmp	.+64     	; 0x92e <__stack+0x2f>
     8ee:	6e 81       	ldd	r22, Y+6	; 0x06
     8f0:	2f 31       	cpi	r18, 0x1F	; 31
     8f2:	31 05       	cpc	r19, r1
     8f4:	1c f0       	brlt	.+6      	; 0x8fc <__fixsfsi+0x4e>
     8f6:	66 23       	and	r22, r22
     8f8:	f9 f0       	breq	.+62     	; 0x938 <__stack+0x39>
     8fa:	23 c0       	rjmp	.+70     	; 0x942 <__stack+0x43>
     8fc:	8e e1       	ldi	r24, 0x1E	; 30
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	29 85       	ldd	r18, Y+9	; 0x09
     906:	3a 85       	ldd	r19, Y+10	; 0x0a
     908:	4b 85       	ldd	r20, Y+11	; 0x0b
     90a:	5c 85       	ldd	r21, Y+12	; 0x0c
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0x17>
     90e:	56 95       	lsr	r21
     910:	47 95       	ror	r20
     912:	37 95       	ror	r19
     914:	27 95       	ror	r18
     916:	8a 95       	dec	r24
     918:	d2 f7       	brpl	.-12     	; 0x90e <__stack+0xf>
     91a:	66 23       	and	r22, r22
     91c:	b1 f0       	breq	.+44     	; 0x94a <__stack+0x4b>
     91e:	50 95       	com	r21
     920:	40 95       	com	r20
     922:	30 95       	com	r19
     924:	21 95       	neg	r18
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	4f 4f       	sbci	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	0e c0       	rjmp	.+28     	; 0x94a <__stack+0x4b>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f ef       	ldi	r20, 0xFF	; 255
     93e:	5f e7       	ldi	r21, 0x7F	; 127
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e8       	ldi	r21, 0x80	; 128
     94a:	b9 01       	movw	r22, r18
     94c:	ca 01       	movw	r24, r20
     94e:	2c 96       	adiw	r28, 0x0c	; 12
     950:	e2 e0       	ldi	r30, 0x02	; 2
     952:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__epilogue_restores__+0x20>

00000956 <__pack_f>:
     956:	df 92       	push	r13
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	fc 01       	movw	r30, r24
     962:	e4 80       	ldd	r14, Z+4	; 0x04
     964:	f5 80       	ldd	r15, Z+5	; 0x05
     966:	06 81       	ldd	r16, Z+6	; 0x06
     968:	17 81       	ldd	r17, Z+7	; 0x07
     96a:	d1 80       	ldd	r13, Z+1	; 0x01
     96c:	80 81       	ld	r24, Z
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	48 f4       	brcc	.+18     	; 0x984 <__pack_f+0x2e>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e1       	ldi	r26, 0x10	; 16
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 2a       	or	r14, r24
     97c:	f9 2a       	or	r15, r25
     97e:	0a 2b       	or	r16, r26
     980:	1b 2b       	or	r17, r27
     982:	a5 c0       	rjmp	.+330    	; 0xace <__pack_f+0x178>
     984:	84 30       	cpi	r24, 0x04	; 4
     986:	09 f4       	brne	.+2      	; 0x98a <__pack_f+0x34>
     988:	9f c0       	rjmp	.+318    	; 0xac8 <__pack_f+0x172>
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	21 f4       	brne	.+8      	; 0x996 <__pack_f+0x40>
     98e:	ee 24       	eor	r14, r14
     990:	ff 24       	eor	r15, r15
     992:	87 01       	movw	r16, r14
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <__pack_f+0x4a>
     996:	e1 14       	cp	r14, r1
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	19 f4       	brne	.+6      	; 0x9a6 <__pack_f+0x50>
     9a0:	e0 e0       	ldi	r30, 0x00	; 0
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	96 c0       	rjmp	.+300    	; 0xad2 <__pack_f+0x17c>
     9a6:	62 81       	ldd	r22, Z+2	; 0x02
     9a8:	73 81       	ldd	r23, Z+3	; 0x03
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	62 38       	cpi	r22, 0x82	; 130
     9ae:	79 07       	cpc	r23, r25
     9b0:	0c f0       	brlt	.+2      	; 0x9b4 <__pack_f+0x5e>
     9b2:	5b c0       	rjmp	.+182    	; 0xa6a <__pack_f+0x114>
     9b4:	22 e8       	ldi	r18, 0x82	; 130
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	26 1b       	sub	r18, r22
     9ba:	37 0b       	sbc	r19, r23
     9bc:	2a 31       	cpi	r18, 0x1A	; 26
     9be:	31 05       	cpc	r19, r1
     9c0:	2c f0       	brlt	.+10     	; 0x9cc <__pack_f+0x76>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	2a c0       	rjmp	.+84     	; 0xa20 <__pack_f+0xca>
     9cc:	b8 01       	movw	r22, r16
     9ce:	a7 01       	movw	r20, r14
     9d0:	02 2e       	mov	r0, r18
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__pack_f+0x86>
     9d4:	76 95       	lsr	r23
     9d6:	67 95       	ror	r22
     9d8:	57 95       	ror	r21
     9da:	47 95       	ror	r20
     9dc:	0a 94       	dec	r0
     9de:	d2 f7       	brpl	.-12     	; 0x9d4 <__pack_f+0x7e>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__pack_f+0x9c>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	aa 1f       	adc	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	2a 95       	dec	r18
     9f4:	d2 f7       	brpl	.-12     	; 0x9ea <__pack_f+0x94>
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	a1 09       	sbc	r26, r1
     9fa:	b1 09       	sbc	r27, r1
     9fc:	8e 21       	and	r24, r14
     9fe:	9f 21       	and	r25, r15
     a00:	a0 23       	and	r26, r16
     a02:	b1 23       	and	r27, r17
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	21 f0       	breq	.+8      	; 0xa14 <__pack_f+0xbe>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	9a 01       	movw	r18, r20
     a16:	ab 01       	movw	r20, r22
     a18:	28 2b       	or	r18, r24
     a1a:	39 2b       	or	r19, r25
     a1c:	4a 2b       	or	r20, r26
     a1e:	5b 2b       	or	r21, r27
     a20:	da 01       	movw	r26, r20
     a22:	c9 01       	movw	r24, r18
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	90 70       	andi	r25, 0x00	; 0
     a28:	a0 70       	andi	r26, 0x00	; 0
     a2a:	b0 70       	andi	r27, 0x00	; 0
     a2c:	80 34       	cpi	r24, 0x40	; 64
     a2e:	91 05       	cpc	r25, r1
     a30:	a1 05       	cpc	r26, r1
     a32:	b1 05       	cpc	r27, r1
     a34:	39 f4       	brne	.+14     	; 0xa44 <__pack_f+0xee>
     a36:	27 ff       	sbrs	r18, 7
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <__pack_f+0xf6>
     a3a:	20 5c       	subi	r18, 0xC0	; 192
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	4f 4f       	sbci	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__pack_f+0xf6>
     a44:	21 5c       	subi	r18, 0xC1	; 193
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	4f 4f       	sbci	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	20 30       	cpi	r18, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	3a 07       	cpc	r19, r26
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	4a 07       	cpc	r20, r26
     a5a:	a0 e4       	ldi	r26, 0x40	; 64
     a5c:	5a 07       	cpc	r21, r26
     a5e:	10 f0       	brcs	.+4      	; 0xa64 <__pack_f+0x10e>
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	79 01       	movw	r14, r18
     a66:	8a 01       	movw	r16, r20
     a68:	27 c0       	rjmp	.+78     	; 0xab8 <__pack_f+0x162>
     a6a:	60 38       	cpi	r22, 0x80	; 128
     a6c:	71 05       	cpc	r23, r1
     a6e:	64 f5       	brge	.+88     	; 0xac8 <__pack_f+0x172>
     a70:	fb 01       	movw	r30, r22
     a72:	e1 58       	subi	r30, 0x81	; 129
     a74:	ff 4f       	sbci	r31, 0xFF	; 255
     a76:	d8 01       	movw	r26, r16
     a78:	c7 01       	movw	r24, r14
     a7a:	8f 77       	andi	r24, 0x7F	; 127
     a7c:	90 70       	andi	r25, 0x00	; 0
     a7e:	a0 70       	andi	r26, 0x00	; 0
     a80:	b0 70       	andi	r27, 0x00	; 0
     a82:	80 34       	cpi	r24, 0x40	; 64
     a84:	91 05       	cpc	r25, r1
     a86:	a1 05       	cpc	r26, r1
     a88:	b1 05       	cpc	r27, r1
     a8a:	39 f4       	brne	.+14     	; 0xa9a <__pack_f+0x144>
     a8c:	e7 fe       	sbrs	r14, 7
     a8e:	0d c0       	rjmp	.+26     	; 0xaaa <__pack_f+0x154>
     a90:	80 e4       	ldi	r24, 0x40	; 64
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__pack_f+0x14c>
     a9a:	8f e3       	ldi	r24, 0x3F	; 63
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e8 0e       	add	r14, r24
     aa4:	f9 1e       	adc	r15, r25
     aa6:	0a 1f       	adc	r16, r26
     aa8:	1b 1f       	adc	r17, r27
     aaa:	17 ff       	sbrs	r17, 7
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <__pack_f+0x162>
     aae:	16 95       	lsr	r17
     ab0:	07 95       	ror	r16
     ab2:	f7 94       	ror	r15
     ab4:	e7 94       	ror	r14
     ab6:	31 96       	adiw	r30, 0x01	; 1
     ab8:	87 e0       	ldi	r24, 0x07	; 7
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d1 f7       	brne	.-12     	; 0xaba <__pack_f+0x164>
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__pack_f+0x17c>
     ac8:	ee 24       	eor	r14, r14
     aca:	ff 24       	eor	r15, r15
     acc:	87 01       	movw	r16, r14
     ace:	ef ef       	ldi	r30, 0xFF	; 255
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	6e 2f       	mov	r22, r30
     ad4:	67 95       	ror	r22
     ad6:	66 27       	eor	r22, r22
     ad8:	67 95       	ror	r22
     ada:	90 2f       	mov	r25, r16
     adc:	9f 77       	andi	r25, 0x7F	; 127
     ade:	d7 94       	ror	r13
     ae0:	dd 24       	eor	r13, r13
     ae2:	d7 94       	ror	r13
     ae4:	8e 2f       	mov	r24, r30
     ae6:	86 95       	lsr	r24
     ae8:	49 2f       	mov	r20, r25
     aea:	46 2b       	or	r20, r22
     aec:	58 2f       	mov	r21, r24
     aee:	5d 29       	or	r21, r13
     af0:	b7 01       	movw	r22, r14
     af2:	ca 01       	movw	r24, r20
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	08 95       	ret

00000b00 <__unpack_f>:
     b00:	fc 01       	movw	r30, r24
     b02:	db 01       	movw	r26, r22
     b04:	40 81       	ld	r20, Z
     b06:	51 81       	ldd	r21, Z+1	; 0x01
     b08:	22 81       	ldd	r18, Z+2	; 0x02
     b0a:	62 2f       	mov	r22, r18
     b0c:	6f 77       	andi	r22, 0x7F	; 127
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	22 1f       	adc	r18, r18
     b12:	22 27       	eor	r18, r18
     b14:	22 1f       	adc	r18, r18
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	89 2f       	mov	r24, r25
     b1a:	88 0f       	add	r24, r24
     b1c:	82 2b       	or	r24, r18
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	99 1f       	adc	r25, r25
     b24:	99 27       	eor	r25, r25
     b26:	99 1f       	adc	r25, r25
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	9c 93       	st	X, r25
     b2c:	11 97       	sbiw	r26, 0x01	; 1
     b2e:	21 15       	cp	r18, r1
     b30:	31 05       	cpc	r19, r1
     b32:	a9 f5       	brne	.+106    	; 0xb9e <__unpack_f+0x9e>
     b34:	41 15       	cp	r20, r1
     b36:	51 05       	cpc	r21, r1
     b38:	61 05       	cpc	r22, r1
     b3a:	71 05       	cpc	r23, r1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <__unpack_f+0x42>
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	37 c0       	rjmp	.+110    	; 0xbb0 <__unpack_f+0xb0>
     b42:	82 e8       	ldi	r24, 0x82	; 130
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	13 96       	adiw	r26, 0x03	; 3
     b48:	9c 93       	st	X, r25
     b4a:	8e 93       	st	-X, r24
     b4c:	12 97       	sbiw	r26, 0x02	; 2
     b4e:	9a 01       	movw	r18, r20
     b50:	ab 01       	movw	r20, r22
     b52:	67 e0       	ldi	r22, 0x07	; 7
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	6a 95       	dec	r22
     b5e:	d1 f7       	brne	.-12     	; 0xb54 <__unpack_f+0x54>
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	8c 93       	st	X, r24
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <__unpack_f+0x80>
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	44 1f       	adc	r20, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	12 96       	adiw	r26, 0x02	; 2
     b70:	8d 91       	ld	r24, X+
     b72:	9c 91       	ld	r25, X
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	9c 93       	st	X, r25
     b7c:	8e 93       	st	-X, r24
     b7e:	12 97       	sbiw	r26, 0x02	; 2
     b80:	20 30       	cpi	r18, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	38 07       	cpc	r19, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	48 07       	cpc	r20, r24
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	58 07       	cpc	r21, r24
     b8e:	58 f3       	brcs	.-42     	; 0xb66 <__unpack_f+0x66>
     b90:	14 96       	adiw	r26, 0x04	; 4
     b92:	2d 93       	st	X+, r18
     b94:	3d 93       	st	X+, r19
     b96:	4d 93       	st	X+, r20
     b98:	5c 93       	st	X, r21
     b9a:	17 97       	sbiw	r26, 0x07	; 7
     b9c:	08 95       	ret
     b9e:	2f 3f       	cpi	r18, 0xFF	; 255
     ba0:	31 05       	cpc	r19, r1
     ba2:	79 f4       	brne	.+30     	; 0xbc2 <__unpack_f+0xc2>
     ba4:	41 15       	cp	r20, r1
     ba6:	51 05       	cpc	r21, r1
     ba8:	61 05       	cpc	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	19 f4       	brne	.+6      	; 0xbb4 <__unpack_f+0xb4>
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	8c 93       	st	X, r24
     bb2:	08 95       	ret
     bb4:	64 ff       	sbrs	r22, 4
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__unpack_f+0xbe>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8c 93       	st	X, r24
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <__unpack_f+0xe2>
     bbe:	1c 92       	st	X, r1
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <__unpack_f+0xe2>
     bc2:	2f 57       	subi	r18, 0x7F	; 127
     bc4:	30 40       	sbci	r19, 0x00	; 0
     bc6:	13 96       	adiw	r26, 0x03	; 3
     bc8:	3c 93       	st	X, r19
     bca:	2e 93       	st	-X, r18
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	8c 93       	st	X, r24
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	44 0f       	add	r20, r20
     bd6:	55 1f       	adc	r21, r21
     bd8:	66 1f       	adc	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	8a 95       	dec	r24
     bde:	d1 f7       	brne	.-12     	; 0xbd4 <__unpack_f+0xd4>
     be0:	70 64       	ori	r23, 0x40	; 64
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	4d 93       	st	X+, r20
     be6:	5d 93       	st	X+, r21
     be8:	6d 93       	st	X+, r22
     bea:	7c 93       	st	X, r23
     bec:	17 97       	sbiw	r26, 0x07	; 7
     bee:	08 95       	ret

00000bf0 <__fpcmp_parts_f>:
     bf0:	1f 93       	push	r17
     bf2:	dc 01       	movw	r26, r24
     bf4:	fb 01       	movw	r30, r22
     bf6:	9c 91       	ld	r25, X
     bf8:	92 30       	cpi	r25, 0x02	; 2
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <__fpcmp_parts_f+0xe>
     bfc:	47 c0       	rjmp	.+142    	; 0xc8c <__fpcmp_parts_f+0x9c>
     bfe:	80 81       	ld	r24, Z
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	08 f4       	brcc	.+2      	; 0xc06 <__fpcmp_parts_f+0x16>
     c04:	43 c0       	rjmp	.+134    	; 0xc8c <__fpcmp_parts_f+0x9c>
     c06:	94 30       	cpi	r25, 0x04	; 4
     c08:	51 f4       	brne	.+20     	; 0xc1e <__fpcmp_parts_f+0x2e>
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	1c 91       	ld	r17, X
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	99 f5       	brne	.+102    	; 0xc78 <__fpcmp_parts_f+0x88>
     c12:	81 81       	ldd	r24, Z+1	; 0x01
     c14:	68 2f       	mov	r22, r24
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	61 1b       	sub	r22, r17
     c1a:	71 09       	sbc	r23, r1
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <__fpcmp_parts_f+0xac>
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	21 f0       	breq	.+8      	; 0xc2a <__fpcmp_parts_f+0x3a>
     c22:	92 30       	cpi	r25, 0x02	; 2
     c24:	31 f4       	brne	.+12     	; 0xc32 <__fpcmp_parts_f+0x42>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	b9 f1       	breq	.+110    	; 0xc98 <__fpcmp_parts_f+0xa8>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	88 23       	and	r24, r24
     c2e:	89 f1       	breq	.+98     	; 0xc92 <__fpcmp_parts_f+0xa2>
     c30:	2d c0       	rjmp	.+90     	; 0xc8c <__fpcmp_parts_f+0x9c>
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	1c 91       	ld	r17, X
     c36:	11 97       	sbiw	r26, 0x01	; 1
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	f1 f0       	breq	.+60     	; 0xc78 <__fpcmp_parts_f+0x88>
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	18 17       	cp	r17, r24
     c40:	d9 f4       	brne	.+54     	; 0xc78 <__fpcmp_parts_f+0x88>
     c42:	12 96       	adiw	r26, 0x02	; 2
     c44:	2d 91       	ld	r18, X+
     c46:	3c 91       	ld	r19, X
     c48:	13 97       	sbiw	r26, 0x03	; 3
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	82 17       	cp	r24, r18
     c50:	93 07       	cpc	r25, r19
     c52:	94 f0       	brlt	.+36     	; 0xc78 <__fpcmp_parts_f+0x88>
     c54:	28 17       	cp	r18, r24
     c56:	39 07       	cpc	r19, r25
     c58:	bc f0       	brlt	.+46     	; 0xc88 <__fpcmp_parts_f+0x98>
     c5a:	14 96       	adiw	r26, 0x04	; 4
     c5c:	8d 91       	ld	r24, X+
     c5e:	9d 91       	ld	r25, X+
     c60:	0d 90       	ld	r0, X+
     c62:	bc 91       	ld	r27, X
     c64:	a0 2d       	mov	r26, r0
     c66:	24 81       	ldd	r18, Z+4	; 0x04
     c68:	35 81       	ldd	r19, Z+5	; 0x05
     c6a:	46 81       	ldd	r20, Z+6	; 0x06
     c6c:	57 81       	ldd	r21, Z+7	; 0x07
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	4a 07       	cpc	r20, r26
     c74:	5b 07       	cpc	r21, r27
     c76:	18 f4       	brcc	.+6      	; 0xc7e <__fpcmp_parts_f+0x8e>
     c78:	11 23       	and	r17, r17
     c7a:	41 f0       	breq	.+16     	; 0xc8c <__fpcmp_parts_f+0x9c>
     c7c:	0a c0       	rjmp	.+20     	; 0xc92 <__fpcmp_parts_f+0xa2>
     c7e:	82 17       	cp	r24, r18
     c80:	93 07       	cpc	r25, r19
     c82:	a4 07       	cpc	r26, r20
     c84:	b5 07       	cpc	r27, r21
     c86:	40 f4       	brcc	.+16     	; 0xc98 <__fpcmp_parts_f+0xa8>
     c88:	11 23       	and	r17, r17
     c8a:	19 f0       	breq	.+6      	; 0xc92 <__fpcmp_parts_f+0xa2>
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <__fpcmp_parts_f+0xac>
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	7f ef       	ldi	r23, 0xFF	; 255
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <__fpcmp_parts_f+0xac>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	cb 01       	movw	r24, r22
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
     caa:	e4 e2       	ldi	r30, 0x24	; 36
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
     cb2:	e7 e2       	ldi	r30, 0x27	; 39
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	8f e0       	ldi	r24, 0x0F	; 15
     cb8:	80 83       	st	Z, r24
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
     cba:	ea e2       	ldi	r30, 0x2A	; 42
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
     cc2:	e5 e2       	ldi	r30, 0x25	; 37
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	8c e3       	ldi	r24, 0x3C	; 60
     cc8:	80 83       	st	Z, r24
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	8f e0       	ldi	r24, 0x0F	; 15
     cd0:	80 83       	st	Z, r24
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
     cd2:	eb e2       	ldi	r30, 0x2B	; 43
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	2c 97       	sbiw	r28, 0x0c	; 12
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	8a 83       	std	Y+2, r24	; 0x02
     cf4:	6b 83       	std	Y+3, r22	; 0x03
     cf6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x26>
     d02:	c8 c0       	rjmp	.+400    	; 0xe94 <DIO_u8SetPinDirection+0x1b6>
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x2e>
     d0a:	c4 c0       	rjmp	.+392    	; 0xe94 <DIO_u8SetPinDirection+0x1b6>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	88 23       	and	r24, r24
     d10:	21 f0       	breq	.+8      	; 0xd1a <DIO_u8SetPinDirection+0x3c>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	09 f0       	breq	.+2      	; 0xd1a <DIO_u8SetPinDirection+0x3c>
     d18:	bd c0       	rjmp	.+378    	; 0xe94 <DIO_u8SetPinDirection+0x1b6>
    {
        switch (Copy_u8PortId)
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3c 87       	std	Y+12, r19	; 0x0c
     d22:	2b 87       	std	Y+11, r18	; 0x0b
     d24:	8b 85       	ldd	r24, Y+11	; 0x0b
     d26:	9c 85       	ldd	r25, Y+12	; 0x0c
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <DIO_u8SetPinDirection+0x52>
     d2e:	43 c0       	rjmp	.+134    	; 0xdb6 <DIO_u8SetPinDirection+0xd8>
     d30:	2b 85       	ldd	r18, Y+11	; 0x0b
     d32:	3c 85       	ldd	r19, Y+12	; 0x0c
     d34:	22 30       	cpi	r18, 0x02	; 2
     d36:	31 05       	cpc	r19, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <DIO_u8SetPinDirection+0x5e>
     d3a:	75 c0       	rjmp	.+234    	; 0xe26 <DIO_u8SetPinDirection+0x148>
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	09 f0       	breq	.+2      	; 0xd46 <DIO_u8SetPinDirection+0x68>
     d44:	a8 c0       	rjmp	.+336    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3a 87       	std	Y+10, r19	; 0x0a
     d4e:	29 87       	std	Y+9, r18	; 0x09
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	d1 f0       	breq	.+52     	; 0xd8c <DIO_u8SetPinDirection+0xae>
     d58:	29 85       	ldd	r18, Y+9	; 0x09
     d5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	31 05       	cpc	r19, r1
     d60:	09 f0       	breq	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x86>
     d62:	99 c0       	rjmp	.+306    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     d64:	a4 e2       	ldi	r26, 0x24	; 36
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e4 e2       	ldi	r30, 0x24	; 36
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8SetPinDirection+0xa4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8SetPinDirection+0xa0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	85 c0       	rjmp	.+266    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     d8c:	a4 e2       	ldi	r26, 0x24	; 36
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e4 e2       	ldi	r30, 0x24	; 36
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_u8SetPinDirection+0xcc>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_u8SetPinDirection+0xc8>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	70 c0       	rjmp	.+224    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	38 87       	std	Y+8, r19	; 0x08
     dbe:	2f 83       	std	Y+7, r18	; 0x07
     dc0:	8f 81       	ldd	r24, Y+7	; 0x07
     dc2:	98 85       	ldd	r25, Y+8	; 0x08
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <DIO_u8SetPinDirection+0x11e>
     dc8:	2f 81       	ldd	r18, Y+7	; 0x07
     dca:	38 85       	ldd	r19, Y+8	; 0x08
     dcc:	21 30       	cpi	r18, 0x01	; 1
     dce:	31 05       	cpc	r19, r1
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <DIO_u8SetPinDirection+0xf6>
     dd2:	61 c0       	rjmp	.+194    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_u8SetPinDirection+0x114>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_u8SetPinDirection+0x110>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	4d c0       	rjmp	.+154    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
     dfc:	a7 e2       	ldi	r26, 0x27	; 39
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e2       	ldi	r30, 0x27	; 39
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_u8SetPinDirection+0x13c>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_u8SetPinDirection+0x138>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	38 c0       	rjmp	.+112    	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3e 83       	std	Y+6, r19	; 0x06
     e2e:	2d 83       	std	Y+5, r18	; 0x05
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	c9 f0       	breq	.+50     	; 0xe6a <DIO_u8SetPinDirection+0x18c>
     e38:	2d 81       	ldd	r18, Y+5	; 0x05
     e3a:	3e 81       	ldd	r19, Y+6	; 0x06
     e3c:	21 30       	cpi	r18, 0x01	; 1
     e3e:	31 05       	cpc	r19, r1
     e40:	51 f5       	brne	.+84     	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
     e42:	aa e2       	ldi	r26, 0x2A	; 42
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ea e2       	ldi	r30, 0x2A	; 42
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_u8SetPinDirection+0x182>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_u8SetPinDirection+0x17e>
     e64:	84 2b       	or	r24, r20
     e66:	8c 93       	st	X, r24
     e68:	16 c0       	rjmp	.+44     	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
     e6a:	aa e2       	ldi	r26, 0x2A	; 42
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ea e2       	ldi	r30, 0x2A	; 42
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_u8SetPinDirection+0x1aa>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_u8SetPinDirection+0x1a6>
     e8c:	80 95       	com	r24
     e8e:	84 23       	and	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <DIO_u8SetPinDirection+0x1b8>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
     e94:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	2c 96       	adiw	r28, 0x0c	; 12
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	2c 97       	sbiw	r28, 0x0c	; 12
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	6b 83       	std	Y+3, r22	; 0x03
     ec2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <DIO_u8SetPinValue+0x26>
     ece:	c8 c0       	rjmp	.+400    	; 0x1060 <DIO_u8SetPinValue+0x1b6>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <DIO_u8SetPinValue+0x2e>
     ed6:	c4 c0       	rjmp	.+392    	; 0x1060 <DIO_u8SetPinValue+0x1b6>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	21 f0       	breq	.+8      	; 0xee6 <DIO_u8SetPinValue+0x3c>
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	88 23       	and	r24, r24
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_u8SetPinValue+0x3c>
     ee4:	bd c0       	rjmp	.+378    	; 0x1060 <DIO_u8SetPinValue+0x1b6>
    {
        switch (Copy_u8PortId)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3c 87       	std	Y+12, r19	; 0x0c
     eee:	2b 87       	std	Y+11, r18	; 0x0b
     ef0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_u8SetPinValue+0x52>
     efa:	43 c0       	rjmp	.+134    	; 0xf82 <DIO_u8SetPinValue+0xd8>
     efc:	2b 85       	ldd	r18, Y+11	; 0x0b
     efe:	3c 85       	ldd	r19, Y+12	; 0x0c
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_u8SetPinValue+0x5e>
     f06:	75 c0       	rjmp	.+234    	; 0xff2 <DIO_u8SetPinValue+0x148>
     f08:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_u8SetPinValue+0x68>
     f10:	a8 c0       	rjmp	.+336    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3a 87       	std	Y+10, r19	; 0x0a
     f1a:	29 87       	std	Y+9, r18	; 0x09
     f1c:	89 85       	ldd	r24, Y+9	; 0x09
     f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	d1 f0       	breq	.+52     	; 0xf58 <DIO_u8SetPinValue+0xae>
     f24:	29 85       	ldd	r18, Y+9	; 0x09
     f26:	3a 85       	ldd	r19, Y+10	; 0x0a
     f28:	21 30       	cpi	r18, 0x01	; 1
     f2a:	31 05       	cpc	r19, r1
     f2c:	09 f0       	breq	.+2      	; 0xf30 <DIO_u8SetPinValue+0x86>
     f2e:	99 c0       	rjmp	.+306    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
     f30:	a5 e2       	ldi	r26, 0x25	; 37
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e5 e2       	ldi	r30, 0x25	; 37
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_u8SetPinValue+0xa4>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_u8SetPinValue+0xa0>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	85 c0       	rjmp	.+266    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
     f58:	a5 e2       	ldi	r26, 0x25	; 37
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e2       	ldi	r30, 0x25	; 37
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_u8SetPinValue+0xcc>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_u8SetPinValue+0xc8>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	70 c0       	rjmp	.+224    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	38 87       	std	Y+8, r19	; 0x08
     f8a:	2f 83       	std	Y+7, r18	; 0x07
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	d1 f0       	breq	.+52     	; 0xfc8 <DIO_u8SetPinValue+0x11e>
     f94:	2f 81       	ldd	r18, Y+7	; 0x07
     f96:	38 85       	ldd	r19, Y+8	; 0x08
     f98:	21 30       	cpi	r18, 0x01	; 1
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <DIO_u8SetPinValue+0xf6>
     f9e:	61 c0       	rjmp	.+194    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
     fa0:	a8 e2       	ldi	r26, 0x28	; 40
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e2       	ldi	r30, 0x28	; 40
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8SetPinValue+0x114>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8SetPinValue+0x110>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	4d c0       	rjmp	.+154    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
     fc8:	a8 e2       	ldi	r26, 0x28	; 40
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e2       	ldi	r30, 0x28	; 40
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_u8SetPinValue+0x13c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_u8SetPinValue+0x138>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	38 c0       	rjmp	.+112    	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3e 83       	std	Y+6, r19	; 0x06
     ffa:	2d 83       	std	Y+5, r18	; 0x05
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	c9 f0       	breq	.+50     	; 0x1036 <DIO_u8SetPinValue+0x18c>
    1004:	2d 81       	ldd	r18, Y+5	; 0x05
    1006:	3e 81       	ldd	r19, Y+6	; 0x06
    1008:	21 30       	cpi	r18, 0x01	; 1
    100a:	31 05       	cpc	r19, r1
    100c:	51 f5       	brne	.+84     	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    100e:	ab e2       	ldi	r26, 0x2B	; 43
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e2       	ldi	r30, 0x2B	; 43
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_u8SetPinValue+0x182>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_u8SetPinValue+0x17e>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
    1036:	ab e2       	ldi	r26, 0x2B	; 43
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x1aa>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x1a6>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <DIO_u8SetPinValue+0x1b8>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1060:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	2c 96       	adiw	r28, 0x0c	; 12
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	28 97       	sbiw	r28, 0x08	; 8
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	6c 83       	std	Y+4, r22	; 0x04
    108e:	5e 83       	std	Y+6, r21	; 0x06
    1090:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	08 f0       	brcs	.+2      	; 0x109e <DIO_u8GetPinValue+0x28>
    109c:	76 c0       	rjmp	.+236    	; 0x118a <DIO_u8GetPinValue+0x114>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	88 30       	cpi	r24, 0x08	; 8
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <DIO_u8GetPinValue+0x30>
    10a4:	72 c0       	rjmp	.+228    	; 0x118a <DIO_u8GetPinValue+0x114>
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <DIO_u8GetPinValue+0x3a>
    10ae:	6d c0       	rjmp	.+218    	; 0x118a <DIO_u8GetPinValue+0x114>
    {
        switch (Copy_u8PortId)
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	38 87       	std	Y+8, r19	; 0x08
    10b8:	2f 83       	std	Y+7, r18	; 0x07
    10ba:	4f 81       	ldd	r20, Y+7	; 0x07
    10bc:	58 85       	ldd	r21, Y+8	; 0x08
    10be:	41 30       	cpi	r20, 0x01	; 1
    10c0:	51 05       	cpc	r21, r1
    10c2:	49 f1       	breq	.+82     	; 0x1116 <DIO_u8GetPinValue+0xa0>
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <DIO_u8GetPinValue+0x5a>
    10ce:	40 c0       	rjmp	.+128    	; 0x1150 <DIO_u8GetPinValue+0xda>
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <DIO_u8GetPinValue+0x66>
    10da:	58 c0       	rjmp	.+176    	; 0x118c <DIO_u8GetPinValue+0x116>
        {
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    10dc:	e3 e2       	ldi	r30, 0x23	; 35
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8GetPinValue+0x7e>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8GetPinValue+0x7a>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	29 f4       	brne	.+10     	; 0x110e <DIO_u8GetPinValue+0x98>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1104:	ed 81       	ldd	r30, Y+5	; 0x05
    1106:	fe 81       	ldd	r31, Y+6	; 0x06
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 83       	st	Z, r24
    110c:	3f c0       	rjmp	.+126    	; 0x118c <DIO_u8GetPinValue+0x116>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    110e:	ed 81       	ldd	r30, Y+5	; 0x05
    1110:	fe 81       	ldd	r31, Y+6	; 0x06
    1112:	10 82       	st	Z, r1
    1114:	3b c0       	rjmp	.+118    	; 0x118c <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    1116:	e6 e2       	ldi	r30, 0x26	; 38
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8GetPinValue+0xb8>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_u8GetPinValue+0xb4>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	29 f4       	brne	.+10     	; 0x1148 <DIO_u8GetPinValue+0xd2>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    113e:	ed 81       	ldd	r30, Y+5	; 0x05
    1140:	fe 81       	ldd	r31, Y+6	; 0x06
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 83       	st	Z, r24
    1146:	22 c0       	rjmp	.+68     	; 0x118c <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1148:	ed 81       	ldd	r30, Y+5	; 0x05
    114a:	fe 81       	ldd	r31, Y+6	; 0x06
    114c:	10 82       	st	Z, r1
    114e:	1e c0       	rjmp	.+60     	; 0x118c <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    1150:	e9 e2       	ldi	r30, 0x29	; 41
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8GetPinValue+0xf2>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8GetPinValue+0xee>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	29 f4       	brne	.+10     	; 0x1182 <DIO_u8GetPinValue+0x10c>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1178:	ed 81       	ldd	r30, Y+5	; 0x05
    117a:	fe 81       	ldd	r31, Y+6	; 0x06
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 83       	st	Z, r24
    1180:	05 c0       	rjmp	.+10     	; 0x118c <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1182:	ed 81       	ldd	r30, Y+5	; 0x05
    1184:	fe 81       	ldd	r31, Y+6	; 0x06
    1186:	10 82       	st	Z, r1
    1188:	01 c0       	rjmp	.+2      	; 0x118c <DIO_u8GetPinValue+0x116>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    118a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    118e:	28 96       	adiw	r28, 0x08	; 8
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	2b 97       	sbiw	r28, 0x0b	; 11
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	8a 83       	std	Y+2, r24	; 0x02
    11b6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <DIO_u8SetPortDirection+0x24>
    11c2:	60 c0       	rjmp	.+192    	; 0x1284 <DIO_u8SetPortDirection+0xe4>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 23       	and	r24, r24
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <DIO_u8SetPortDirection+0x32>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <DIO_u8SetPortDirection+0x32>
    11d0:	59 c0       	rjmp	.+178    	; 0x1284 <DIO_u8SetPortDirection+0xe4>
    {
        switch (Copy_u8PortId)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3b 87       	std	Y+11, r19	; 0x0b
    11da:	2a 87       	std	Y+10, r18	; 0x0a
    11dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11de:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	09 f1       	breq	.+66     	; 0x1228 <DIO_u8SetPortDirection+0x88>
    11e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	99 f1       	breq	.+102    	; 0x1256 <DIO_u8SetPortDirection+0xb6>
    11f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	09 f0       	breq	.+2      	; 0x11fa <DIO_u8SetPortDirection+0x5a>
    11f8:	46 c0       	rjmp	.+140    	; 0x1286 <DIO_u8SetPortDirection+0xe6>
        {
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	39 87       	std	Y+9, r19	; 0x09
    1202:	28 87       	std	Y+8, r18	; 0x08
    1204:	88 85       	ldd	r24, Y+8	; 0x08
    1206:	99 85       	ldd	r25, Y+9	; 0x09
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	51 f0       	breq	.+20     	; 0x1220 <DIO_u8SetPortDirection+0x80>
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	39 85       	ldd	r19, Y+9	; 0x09
    1210:	21 30       	cpi	r18, 0x01	; 1
    1212:	31 05       	cpc	r19, r1
    1214:	c1 f5       	brne	.+112    	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
    1216:	e4 e2       	ldi	r30, 0x24	; 36
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 83       	st	Z, r24
    121e:	33 c0       	rjmp	.+102    	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
    1220:	e4 e2       	ldi	r30, 0x24	; 36
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
    1226:	2f c0       	rjmp	.+94     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3f 83       	std	Y+7, r19	; 0x07
    1230:	2e 83       	std	Y+6, r18	; 0x06
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	9f 81       	ldd	r25, Y+7	; 0x07
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	51 f0       	breq	.+20     	; 0x124e <DIO_u8SetPortDirection+0xae>
    123a:	2e 81       	ldd	r18, Y+6	; 0x06
    123c:	3f 81       	ldd	r19, Y+7	; 0x07
    123e:	21 30       	cpi	r18, 0x01	; 1
    1240:	31 05       	cpc	r19, r1
    1242:	09 f5       	brne	.+66     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
    1244:	e7 e2       	ldi	r30, 0x27	; 39
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	80 83       	st	Z, r24
    124c:	1c c0       	rjmp	.+56     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
    124e:	e7 e2       	ldi	r30, 0x27	; 39
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
    1254:	18 c0       	rjmp	.+48     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3d 83       	std	Y+5, r19	; 0x05
    125e:	2c 83       	std	Y+4, r18	; 0x04
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	51 f0       	breq	.+20     	; 0x127c <DIO_u8SetPortDirection+0xdc>
    1268:	2c 81       	ldd	r18, Y+4	; 0x04
    126a:	3d 81       	ldd	r19, Y+5	; 0x05
    126c:	21 30       	cpi	r18, 0x01	; 1
    126e:	31 05       	cpc	r19, r1
    1270:	51 f4       	brne	.+20     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
    1272:	ea e2       	ldi	r30, 0x2A	; 42
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
    127c:	ea e2       	ldi	r30, 0x2A	; 42
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 82       	st	Z, r1
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <DIO_u8SetPortDirection+0xe6>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1284:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1286:	89 81       	ldd	r24, Y+1	; 0x01

}
    1288:	2b 96       	adiw	r28, 0x0b	; 11
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_u8SetPortValue+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_u8SetPortValue+0x8>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3d 83       	std	Y+5, r19	; 0x05
    12b8:	2c 83       	std	Y+4, r18	; 0x04
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	91 05       	cpc	r25, r1
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <DIO_u8SetPortValue+0x46>
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	71 f0       	breq	.+28     	; 0x12ea <DIO_u8SetPortValue+0x50>
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	79 f4       	brne	.+30     	; 0x12f4 <DIO_u8SetPortValue+0x5a>
    {
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
    12d6:	e5 e2       	ldi	r30, 0x25	; 37
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	80 83       	st	Z, r24
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
    12e0:	e8 e2       	ldi	r30, 0x28	; 40
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	80 83       	st	Z, r24
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
    12ea:	eb e2       	ldi	r30, 0x2B	; 43
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	80 83       	st	Z, r24
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <DIO_u8SetPortValue+0x5c>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
    12f4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <Dio_u8GetPortValue+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <Dio_u8GetPortValue+0x8>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <Dio_u8GetPortValue+0xa>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	7c 83       	std	Y+4, r23	; 0x04
    131a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	60 f1       	brcs	.+88     	; 0x137e <Dio_u8GetPortValue+0x76>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	41 f1       	breq	.+80     	; 0x137e <Dio_u8GetPortValue+0x76>
    {
        switch (Copy_u8PortId)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3e 83       	std	Y+6, r19	; 0x06
    1336:	2d 83       	std	Y+5, r18	; 0x05
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <Dio_u8GetPortValue+0x5a>
    1342:	2d 81       	ldd	r18, Y+5	; 0x05
    1344:	3e 81       	ldd	r19, Y+6	; 0x06
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	91 f0       	breq	.+36     	; 0x1370 <Dio_u8GetPortValue+0x68>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	b1 f4       	brne	.+44     	; 0x1380 <Dio_u8GetPortValue+0x78>
        {
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
    1354:	e3 e2       	ldi	r30, 0x23	; 35
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	eb 81       	ldd	r30, Y+3	; 0x03
    135c:	fc 81       	ldd	r31, Y+4	; 0x04
    135e:	80 83       	st	Z, r24
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
    1362:	e6 e2       	ldi	r30, 0x26	; 38
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	80 83       	st	Z, r24
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
    1370:	e9 e2       	ldi	r30, 0x29	; 41
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	eb 81       	ldd	r30, Y+3	; 0x03
    1378:	fc 81       	ldd	r31, Y+4	; 0x04
    137a:	80 83       	st	Z, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <Dio_u8GetPortValue+0x78>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    137e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	26 96       	adiw	r28, 0x06	; 6
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <KPD_u8GetKey>:
u8 KPD_Au8Rows[4]= {KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
u8 KPD_Au8Cols[4]= {KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
u8 KPD_Au8ReturnKey[4][4]=KPD_u8_KEY_VAL;

u8 KPD_u8GetKey(u8 *KPD_Pu8ReturnKey)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	65 97       	sbiw	r28, 0x15	; 21
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	9d 8b       	std	Y+21, r25	; 0x15
    13aa:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8REturnState  = STD_TYPE_OK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter  = 0 ;
    13b0:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8ColsCounter  = 0 ;
    13b2:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8ReturnSwitch = 1 ;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8BreakFlag    = 0 ;     /* we use it to terminate the two for loops as break inside*/
    13b8:	1f 86       	std	Y+15, r1	; 0x0f
                                     /* the cols loop will not terminate rows loop*/
    if(NULL != KPD_Pu8ReturnKey)
    13ba:	8c 89       	ldd	r24, Y+20	; 0x14
    13bc:	9d 89       	ldd	r25, Y+21	; 0x15
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <KPD_u8GetKey+0x30>
    13c2:	e1 c0       	rjmp	.+450    	; 0x1586 <KPD_u8GetKey+0x1f2>
    {
    	/*Initial value to indicate if no key pressed*/
    	*KPD_Pu8ReturnKey = KPD_u8_KEY_NOT_PRESSED;
    13c4:	ec 89       	ldd	r30, Y+20	; 0x14
    13c6:	fd 89       	ldd	r31, Y+21	; 0x15
    13c8:	8a e0       	ldi	r24, 0x0A	; 10
    13ca:	80 83       	st	Z, r24
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    13cc:	19 8a       	std	Y+17, r1	; 0x11
    13ce:	d6 c0       	rjmp	.+428    	; 0x157c <KPD_u8GetKey+0x1e8>
        {
            /*write low on pin*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	fc 01       	movw	r30, r24
    13d8:	e5 5f       	subi	r30, 0xF5	; 245
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	90 81       	ld	r25, Z
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	69 2f       	mov	r22, r25
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
            /*read the cols values*/
            for(Local_u8ColsCounter = 0;Local_u8ColsCounter<=3;Local_u8ColsCounter++)
    13e8:	18 8a       	std	Y+16, r1	; 0x10
    13ea:	b2 c0       	rjmp	.+356    	; 0x1550 <KPD_u8GetKey+0x1bc>
            {
                
                DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
    13ec:	88 89       	ldd	r24, Y+16	; 0x10
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	e1 5f       	subi	r30, 0xF1	; 241
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	90 81       	ld	r25, Z
    13fa:	9e 01       	movw	r18, r28
    13fc:	2d 5e       	subi	r18, 0xED	; 237
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	69 2f       	mov	r22, r25
    1404:	a9 01       	movw	r20, r18
    1406:	0e 94 3b 08 	call	0x1076	; 0x1076 <DIO_u8GetPinValue>
                
                if(DIO_u8_LOW == Local_u8ReturnSwitch)
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	88 23       	and	r24, r24
    140e:	09 f0       	breq	.+2      	; 0x1412 <KPD_u8GetKey+0x7e>
    1410:	9c c0       	rjmp	.+312    	; 0x154a <KPD_u8GetKey+0x1b6>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 ea       	ldi	r26, 0xA0	; 160
    1418:	b1 e4       	ldi	r27, 0x41	; 65
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	55 e4       	ldi	r21, 0x45	; 69
    1432:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <KPD_u8GetKey+0xd0>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <KPD_u8GetKey+0x14e>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <KPD_u8GetKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <KPD_u8GetKey+0x130>
    14a6:	80 e9       	ldi	r24, 0x90	; 144
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <KPD_u8GetKey+0x11e>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <KPD_u8GetKey+0x112>
    14cc:	24 c0       	rjmp	.+72     	; 0x1516 <KPD_u8GetKey+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <KPD_u8GetKey+0x15a>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <KPD_u8GetKey+0x182>
                {
                    _delay_ms(20);   /*debouncing*/
                     /*one press = one output */
                    while(DIO_u8_LOW == Local_u8ReturnSwitch)
                    {
                        DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
    14f8:	88 89       	ldd	r24, Y+16	; 0x10
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	fc 01       	movw	r30, r24
    1500:	e1 5f       	subi	r30, 0xF1	; 241
    1502:	fe 4f       	sbci	r31, 0xFE	; 254
    1504:	90 81       	ld	r25, Z
    1506:	9e 01       	movw	r18, r28
    1508:	2d 5e       	subi	r18, 0xED	; 237
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	69 2f       	mov	r22, r25
    1510:	a9 01       	movw	r20, r18
    1512:	0e 94 3b 08 	call	0x1076	; 0x1076 <DIO_u8GetPinValue>
                
                if(DIO_u8_LOW == Local_u8ReturnSwitch)
                {
                    _delay_ms(20);   /*debouncing*/
                     /*one press = one output */
                    while(DIO_u8_LOW == Local_u8ReturnSwitch)
    1516:	8b 89       	ldd	r24, Y+19	; 0x13
    1518:	88 23       	and	r24, r24
    151a:	71 f3       	breq	.-36     	; 0x14f8 <KPD_u8GetKey+0x164>
                    {
                        DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
                    }

                    /*return the value and terminate the function*/
                    *KPD_Pu8ReturnKey =KPD_Au8ReturnKey[Local_u8RowsCounter][Local_u8ColsCounter] ;
    151c:	89 89       	ldd	r24, Y+17	; 0x11
    151e:	48 2f       	mov	r20, r24
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	88 89       	ldd	r24, Y+16	; 0x10
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	ca 01       	movw	r24, r20
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	fc 01       	movw	r30, r24
    1538:	ed 5e       	subi	r30, 0xED	; 237
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	80 81       	ld	r24, Z
    153e:	ec 89       	ldd	r30, Y+20	; 0x14
    1540:	fd 89       	ldd	r31, Y+21	; 0x15
    1542:	80 83       	st	Z, r24
                    Local_u8BreakFlag = 1; break; // this to break in the row for loop
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	8f 87       	std	Y+15, r24	; 0x0f
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <KPD_u8GetKey+0x1c4>
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
        {
            /*write low on pin*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);
            /*read the cols values*/
            for(Local_u8ColsCounter = 0;Local_u8ColsCounter<=3;Local_u8ColsCounter++)
    154a:	88 89       	ldd	r24, Y+16	; 0x10
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	88 8b       	std	Y+16, r24	; 0x10
    1550:	88 89       	ldd	r24, Y+16	; 0x10
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	08 f4       	brcc	.+2      	; 0x1558 <KPD_u8GetKey+0x1c4>
    1556:	4a cf       	rjmp	.-364    	; 0x13ec <KPD_u8GetKey+0x58>
                    Local_u8BreakFlag = 1; break; // this to break in the row for loop
                }
                
            }
            /*deactivate the row*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_HIGH);
    1558:	89 89       	ldd	r24, Y+17	; 0x11
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	e5 5f       	subi	r30, 0xF5	; 245
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	90 81       	ld	r25, Z
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	69 2f       	mov	r22, r25
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
            if(Local_u8BreakFlag)
    1570:	8f 85       	ldd	r24, Y+15	; 0x0f
    1572:	88 23       	and	r24, r24
    1574:	49 f4       	brne	.+18     	; 0x1588 <KPD_u8GetKey+0x1f4>
                                     /* the cols loop will not terminate rows loop*/
    if(NULL != KPD_Pu8ReturnKey)
    {
    	/*Initial value to indicate if no key pressed*/
    	*KPD_Pu8ReturnKey = KPD_u8_KEY_NOT_PRESSED;
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    1576:	89 89       	ldd	r24, Y+17	; 0x11
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	89 8b       	std	Y+17, r24	; 0x11
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	08 f4       	brcc	.+2      	; 0x1584 <KPD_u8GetKey+0x1f0>
    1582:	26 cf       	rjmp	.-436    	; 0x13d0 <KPD_u8GetKey+0x3c>
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <KPD_u8GetKey+0x1f4>
            }
        }
    }
    else 
    {
        Local_u8REturnState = STD_TYPE_NOK;
    1586:	1a 8a       	std	Y+18, r1	; 0x12
    }

    
    return Local_u8REturnState;
    1588:	8a 89       	ldd	r24, Y+18	; 0x12
}
    158a:	65 96       	adiw	r28, 0x15	; 21
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <LCD_voidEnable>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidEnable(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	68 97       	sbiw	r28, 0x18	; 24
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e8       	ldi	r26, 0x80	; 128
    15c0:	bf e3       	ldi	r27, 0x3F	; 63
    15c2:	8d 8b       	std	Y+21, r24	; 0x15
    15c4:	9e 8b       	std	Y+22, r25	; 0x16
    15c6:	af 8b       	std	Y+23, r26	; 0x17
    15c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	2b ea       	ldi	r18, 0xAB	; 171
    15d4:	3a ea       	ldi	r19, 0xAA	; 170
    15d6:	4a ea       	ldi	r20, 0xAA	; 170
    15d8:	50 e4       	ldi	r21, 0x40	; 64
    15da:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	89 8b       	std	Y+17, r24	; 0x11
    15e4:	9a 8b       	std	Y+18, r25	; 0x12
    15e6:	ab 8b       	std	Y+19, r26	; 0x13
    15e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15ea:	69 89       	ldd	r22, Y+17	; 0x11
    15ec:	7a 89       	ldd	r23, Y+18	; 0x12
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	9c 89       	ldd	r25, Y+20	; 0x14
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	1c f4       	brge	.+6      	; 0x1608 <LCD_voidEnable+0x6c>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	88 8b       	std	Y+16, r24	; 0x10
    1606:	91 c0       	rjmp	.+290    	; 0x172a <LCD_voidEnable+0x18e>
	else if (__tmp > 255)
    1608:	69 89       	ldd	r22, Y+17	; 0x11
    160a:	7a 89       	ldd	r23, Y+18	; 0x12
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	53 e4       	ldi	r21, 0x43	; 67
    1618:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	0c f0       	brlt	.+2      	; 0x1622 <LCD_voidEnable+0x86>
    1620:	7b c0       	rjmp	.+246    	; 0x1718 <LCD_voidEnable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1622:	6d 89       	ldd	r22, Y+21	; 0x15
    1624:	7e 89       	ldd	r23, Y+22	; 0x16
    1626:	8f 89       	ldd	r24, Y+23	; 0x17
    1628:	98 8d       	ldd	r25, Y+24	; 0x18
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	54 e4       	ldi	r21, 0x44	; 68
    1632:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8c 87       	std	Y+12, r24	; 0x0c
    163c:	9d 87       	std	Y+13, r25	; 0x0d
    163e:	ae 87       	std	Y+14, r26	; 0x0e
    1640:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6c 85       	ldd	r22, Y+12	; 0x0c
    1644:	7d 85       	ldd	r23, Y+13	; 0x0d
    1646:	8e 85       	ldd	r24, Y+14	; 0x0e
    1648:	9f 85       	ldd	r25, Y+15	; 0x0f
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	55 e4       	ldi	r21, 0x45	; 69
    1652:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	88 87       	std	Y+8, r24	; 0x08
    165c:	99 87       	std	Y+9, r25	; 0x09
    165e:	aa 87       	std	Y+10, r26	; 0x0a
    1660:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1662:	68 85       	ldd	r22, Y+8	; 0x08
    1664:	79 85       	ldd	r23, Y+9	; 0x09
    1666:	8a 85       	ldd	r24, Y+10	; 0x0a
    1668:	9b 85       	ldd	r25, Y+11	; 0x0b
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <LCD_voidEnable+0xe8>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9f 83       	std	Y+7, r25	; 0x07
    1680:	8e 83       	std	Y+6, r24	; 0x06
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <LCD_voidEnable+0x166>
	else if (__tmp > 65535)
    1684:	68 85       	ldd	r22, Y+8	; 0x08
    1686:	79 85       	ldd	r23, Y+9	; 0x09
    1688:	8a 85       	ldd	r24, Y+10	; 0x0a
    168a:	9b 85       	ldd	r25, Y+11	; 0x0b
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <LCD_voidEnable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6c 85       	ldd	r22, Y+12	; 0x0c
    169e:	7d 85       	ldd	r23, Y+13	; 0x0d
    16a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9f 83       	std	Y+7, r25	; 0x07
    16c2:	8e 83       	std	Y+6, r24	; 0x06
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <LCD_voidEnable+0x148>
    16c6:	80 e9       	ldi	r24, 0x90	; 144
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	9d 83       	std	Y+5, r25	; 0x05
    16cc:	8c 83       	std	Y+4, r24	; 0x04
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_voidEnable+0x136>
    16d6:	9d 83       	std	Y+5, r25	; 0x05
    16d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9f 83       	std	Y+7, r25	; 0x07
    16e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	9f 81       	ldd	r25, Y+7	; 0x07
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <LCD_voidEnable+0x12a>
    16ec:	24 c0       	rjmp	.+72     	; 0x1736 <LCD_voidEnable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	68 85       	ldd	r22, Y+8	; 0x08
    16f0:	79 85       	ldd	r23, Y+9	; 0x09
    16f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9f 83       	std	Y+7, r25	; 0x07
    1700:	8e 83       	std	Y+6, r24	; 0x06
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_voidEnable+0x172>
    1712:	9b 83       	std	Y+3, r25	; 0x03
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <LCD_voidEnable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1718:	69 89       	ldd	r22, Y+17	; 0x11
    171a:	7a 89       	ldd	r23, Y+18	; 0x12
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	9c 89       	ldd	r25, Y+20	; 0x14
    1720:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	88 8b       	std	Y+16, r24	; 0x10
    172a:	88 89       	ldd	r24, Y+16	; 0x10
    172c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	8a 95       	dec	r24
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_voidEnable+0x194>
    1734:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW); 
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
}
    1740:	68 96       	adiw	r28, 0x18	; 24
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <LCD_voidWriteCmnd>:

void LCD_voidWriteCmnd(u8 Copy_u8Cmnd)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	89 83       	std	Y+1, r24	; 0x01
       /* 1- RS pin =0 */
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
    /* 2- RW pin =0 */
    /*connect to GND in hardware*/
    //DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    /* 3- send cmd to data pins */
    DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	69 81       	ldd	r22, Y+1	; 0x01
    176c:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_u8SetPortValue>
    /* 4- latching E  for "Tpw" to pass data from i\o buffer to registers*/
    LCD_voidEnable();
    1770:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_voidEnable>
}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
    /* 1- RS pin =1 */
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_u8SetPinValue>
    /* 2- RW pin =0 */
    /*connect to GND in hardware*/
    // DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    /* 3- send char to data pins */
    DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	69 81       	ldd	r22, Y+1	; 0x01
    1796:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_u8SetPortValue>
    /* 4- latching E  for "Tpw" to pass Data from i\o buffer to registers*/
    LCD_voidEnable();     
    179a:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_voidEnable>
}
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <LCD_voidInit>:

void LCD_voidInit(void)
{
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	cc 54       	subi	r28, 0x4C	; 76
    17b4:	d0 40       	sbci	r29, 0x00	; 0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	fe 01       	movw	r30, r28
    17c2:	e7 5b       	subi	r30, 0xB7	; 183
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e2       	ldi	r26, 0x20	; 32
    17cc:	b2 e4       	ldi	r27, 0x42	; 66
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	8e 01       	movw	r16, r28
    17d8:	0b 5b       	subi	r16, 0xBB	; 187
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
    17dc:	fe 01       	movw	r30, r28
    17de:	e7 5b       	subi	r30, 0xB7	; 183
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a e7       	ldi	r20, 0x7A	; 122
    17f0:	55 e4       	ldi	r21, 0x45	; 69
    17f2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1804:	fe 01       	movw	r30, r28
    1806:	eb 5b       	subi	r30, 0xBB	; 187
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	44 f4       	brge	.+16     	; 0x1832 <LCD_voidInit+0x8c>
		__ticks = 1;
    1822:	fe 01       	movw	r30, r28
    1824:	ed 5b       	subi	r30, 0xBD	; 189
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	64 c0       	rjmp	.+200    	; 0x18fa <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1832:	fe 01       	movw	r30, r28
    1834:	eb 5b       	subi	r30, 0xBB	; 187
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	57 e4       	ldi	r21, 0x47	; 71
    1848:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    184c:	18 16       	cp	r1, r24
    184e:	0c f0       	brlt	.+2      	; 0x1852 <LCD_voidInit+0xac>
    1850:	43 c0       	rjmp	.+134    	; 0x18d8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	fe 01       	movw	r30, r28
    1854:	e7 5b       	subi	r30, 0xB7	; 183
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8e 01       	movw	r16, r28
    1872:	0d 5b       	subi	r16, 0xBD	; 189
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	1f c0       	rjmp	.+62     	; 0x18c8 <LCD_voidInit+0x122>
    188a:	fe 01       	movw	r30, r28
    188c:	ef 5b       	subi	r30, 0xBF	; 191
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 e9       	ldi	r24, 0x90	; 144
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1898:	fe 01       	movw	r30, r28
    189a:	ef 5b       	subi	r30, 0xBF	; 191
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_voidInit+0xfc>
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5b       	subi	r30, 0xBF	; 191
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	de 01       	movw	r26, r28
    18b2:	ad 5b       	subi	r26, 0xBD	; 189
    18b4:	bf 4f       	sbci	r27, 0xFF	; 255
    18b6:	fe 01       	movw	r30, r28
    18b8:	ed 5b       	subi	r30, 0xBD	; 189
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	9c 93       	st	X, r25
    18c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	fe 01       	movw	r30, r28
    18ca:	ed 5b       	subi	r30, 0xBD	; 189
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	d1 f6       	brne	.-76     	; 0x188a <LCD_voidInit+0xe4>
    18d6:	24 c0       	rjmp	.+72     	; 0x1920 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	8e 01       	movw	r16, r28
    18da:	0d 5b       	subi	r16, 0xBD	; 189
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	eb 5b       	subi	r30, 0xBB	; 187
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	f8 01       	movw	r30, r16
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 5b       	subi	r30, 0xBD	; 189
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	fe 01       	movw	r30, r28
    1906:	ff 96       	adiw	r30, 0x3f	; 63
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
    190c:	fe 01       	movw	r30, r28
    190e:	ff 96       	adiw	r30, 0x3f	; 63
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_voidInit+0x16e>
    1918:	fe 01       	movw	r30, r28
    191a:	ff 96       	adiw	r30, 0x3f	; 63
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
     _delay_ms(40);
    /* function set Command */
    LCD_voidWriteCmnd(0b00111000);
    1920:	88 e3       	ldi	r24, 0x38	; 56
    1922:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e2       	ldi	r26, 0x20	; 32
    192c:	b2 e4       	ldi	r27, 0x42	; 66
    192e:	8b af       	std	Y+59, r24	; 0x3b
    1930:	9c af       	std	Y+60, r25	; 0x3c
    1932:	ad af       	std	Y+61, r26	; 0x3d
    1934:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1936:	6b ad       	ldd	r22, Y+59	; 0x3b
    1938:	7c ad       	ldd	r23, Y+60	; 0x3c
    193a:	8d ad       	ldd	r24, Y+61	; 0x3d
    193c:	9e ad       	ldd	r25, Y+62	; 0x3e
    193e:	2b ea       	ldi	r18, 0xAB	; 171
    1940:	3a ea       	ldi	r19, 0xAA	; 170
    1942:	4a ea       	ldi	r20, 0xAA	; 170
    1944:	50 e4       	ldi	r21, 0x40	; 64
    1946:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f ab       	std	Y+55, r24	; 0x37
    1950:	98 af       	std	Y+56, r25	; 0x38
    1952:	a9 af       	std	Y+57, r26	; 0x39
    1954:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1956:	6f a9       	ldd	r22, Y+55	; 0x37
    1958:	78 ad       	ldd	r23, Y+56	; 0x38
    195a:	89 ad       	ldd	r24, Y+57	; 0x39
    195c:	9a ad       	ldd	r25, Y+58	; 0x3a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	1c f4       	brge	.+6      	; 0x1974 <LCD_voidInit+0x1ce>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	8e ab       	std	Y+54, r24	; 0x36
    1972:	91 c0       	rjmp	.+290    	; 0x1a96 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1974:	6f a9       	ldd	r22, Y+55	; 0x37
    1976:	78 ad       	ldd	r23, Y+56	; 0x38
    1978:	89 ad       	ldd	r24, Y+57	; 0x39
    197a:	9a ad       	ldd	r25, Y+58	; 0x3a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	0c f0       	brlt	.+2      	; 0x198e <LCD_voidInit+0x1e8>
    198c:	7b c0       	rjmp	.+246    	; 0x1a84 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    198e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1990:	7c ad       	ldd	r23, Y+60	; 0x3c
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8a ab       	std	Y+50, r24	; 0x32
    19a8:	9b ab       	std	Y+51, r25	; 0x33
    19aa:	ac ab       	std	Y+52, r26	; 0x34
    19ac:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6a a9       	ldd	r22, Y+50	; 0x32
    19b0:	7b a9       	ldd	r23, Y+51	; 0x33
    19b2:	8c a9       	ldd	r24, Y+52	; 0x34
    19b4:	9d a9       	ldd	r25, Y+53	; 0x35
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	55 e4       	ldi	r21, 0x45	; 69
    19be:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8e a7       	std	Y+46, r24	; 0x2e
    19c8:	9f a7       	std	Y+47, r25	; 0x2f
    19ca:	a8 ab       	std	Y+48, r26	; 0x30
    19cc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    19d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    19d2:	88 a9       	ldd	r24, Y+48	; 0x30
    19d4:	99 a9       	ldd	r25, Y+49	; 0x31
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_voidInit+0x24a>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9d a7       	std	Y+45, r25	; 0x2d
    19ec:	8c a7       	std	Y+44, r24	; 0x2c
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    19f0:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f2:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f4:	88 a9       	ldd	r24, Y+48	; 0x30
    19f6:	99 a9       	ldd	r25, Y+49	; 0x31
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6a a9       	ldd	r22, Y+50	; 0x32
    1a0a:	7b a9       	ldd	r23, Y+51	; 0x33
    1a0c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a0e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9d a7       	std	Y+45, r25	; 0x2d
    1a2e:	8c a7       	std	Y+44, r24	; 0x2c
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_voidInit+0x2aa>
    1a32:	80 e9       	ldi	r24, 0x90	; 144
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	9b a7       	std	Y+43, r25	; 0x2b
    1a38:	8a a7       	std	Y+42, r24	; 0x2a
    1a3a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_voidInit+0x298>
    1a42:	9b a7       	std	Y+43, r25	; 0x2b
    1a44:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9d a7       	std	Y+45, r25	; 0x2d
    1a4e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a52:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_voidInit+0x28c>
    1a58:	24 c0       	rjmp	.+72     	; 0x1aa2 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a5e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a60:	99 a9       	ldd	r25, Y+49	; 0x31
    1a62:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9d a7       	std	Y+45, r25	; 0x2d
    1a6c:	8c a7       	std	Y+44, r24	; 0x2c
    1a6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a70:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a72:	99 a7       	std	Y+41, r25	; 0x29
    1a74:	88 a7       	std	Y+40, r24	; 0x28
    1a76:	88 a5       	ldd	r24, Y+40	; 0x28
    1a78:	99 a5       	ldd	r25, Y+41	; 0x29
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidInit+0x2d4>
    1a7e:	99 a7       	std	Y+41, r25	; 0x29
    1a80:	88 a7       	std	Y+40, r24	; 0x28
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a84:	6f a9       	ldd	r22, Y+55	; 0x37
    1a86:	78 ad       	ldd	r23, Y+56	; 0x38
    1a88:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8e ab       	std	Y+54, r24	; 0x36
    1a96:	8e a9       	ldd	r24, Y+54	; 0x36
    1a98:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a9a:	8f a1       	ldd	r24, Y+39	; 0x27
    1a9c:	8a 95       	dec	r24
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_voidInit+0x2f6>
    1aa0:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    /* Display on off control */
    LCD_voidWriteCmnd(0b00001110);
    1aa2:	8e e0       	ldi	r24, 0x0E	; 14
    1aa4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e2       	ldi	r26, 0x20	; 32
    1aae:	b2 e4       	ldi	r27, 0x42	; 66
    1ab0:	8b a3       	std	Y+35, r24	; 0x23
    1ab2:	9c a3       	std	Y+36, r25	; 0x24
    1ab4:	ad a3       	std	Y+37, r26	; 0x25
    1ab6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	2b ea       	ldi	r18, 0xAB	; 171
    1ac2:	3a ea       	ldi	r19, 0xAA	; 170
    1ac4:	4a ea       	ldi	r20, 0xAA	; 170
    1ac6:	50 e4       	ldi	r21, 0x40	; 64
    1ac8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad2:	98 a3       	std	Y+32, r25	; 0x20
    1ad4:	a9 a3       	std	Y+33, r26	; 0x21
    1ad6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ad8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ada:	78 a1       	ldd	r23, Y+32	; 0x20
    1adc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ade:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	1c f4       	brge	.+6      	; 0x1af6 <LCD_voidInit+0x350>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8e 8f       	std	Y+30, r24	; 0x1e
    1af4:	91 c0       	rjmp	.+290    	; 0x1c18 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1af6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1af8:	78 a1       	ldd	r23, Y+32	; 0x20
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	53 e4       	ldi	r21, 0x43	; 67
    1b06:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <LCD_voidInit+0x36a>
    1b0e:	7b c0       	rjmp	.+246    	; 0x1c06 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b10:	6b a1       	ldd	r22, Y+35	; 0x23
    1b12:	7c a1       	ldd	r23, Y+36	; 0x24
    1b14:	8d a1       	ldd	r24, Y+37	; 0x25
    1b16:	9e a1       	ldd	r25, Y+38	; 0x26
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a e7       	ldi	r20, 0x7A	; 122
    1b1e:	54 e4       	ldi	r21, 0x44	; 68
    1b20:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8a 8f       	std	Y+26, r24	; 0x1a
    1b2a:	9b 8f       	std	Y+27, r25	; 0x1b
    1b2c:	ac 8f       	std	Y+28, r26	; 0x1c
    1b2e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b32:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a e7       	ldi	r20, 0x7A	; 122
    1b3e:	55 e4       	ldi	r21, 0x45	; 69
    1b40:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8e 8b       	std	Y+22, r24	; 0x16
    1b4a:	9f 8b       	std	Y+23, r25	; 0x17
    1b4c:	a8 8f       	std	Y+24, r26	; 0x18
    1b4e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b50:	6e 89       	ldd	r22, Y+22	; 0x16
    1b52:	7f 89       	ldd	r23, Y+23	; 0x17
    1b54:	88 8d       	ldd	r24, Y+24	; 0x18
    1b56:	99 8d       	ldd	r25, Y+25	; 0x19
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9d 8b       	std	Y+21, r25	; 0x15
    1b6e:	8c 8b       	std	Y+20, r24	; 0x14
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1b72:	6e 89       	ldd	r22, Y+22	; 0x16
    1b74:	7f 89       	ldd	r23, Y+23	; 0x17
    1b76:	88 8d       	ldd	r24, Y+24	; 0x18
    1b78:	99 8d       	ldd	r25, Y+25	; 0x19
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b8c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9d 8b       	std	Y+21, r25	; 0x15
    1bb0:	8c 8b       	std	Y+20, r24	; 0x14
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_voidInit+0x42c>
    1bb4:	80 e9       	ldi	r24, 0x90	; 144
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	9b 8b       	std	Y+19, r25	; 0x13
    1bba:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bbc:	8a 89       	ldd	r24, Y+18	; 0x12
    1bbe:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_voidInit+0x41a>
    1bc4:	9b 8b       	std	Y+19, r25	; 0x13
    1bc6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bca:	9d 89       	ldd	r25, Y+21	; 0x15
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9d 8b       	std	Y+21, r25	; 0x15
    1bd0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd4:	9d 89       	ldd	r25, Y+21	; 0x15
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_voidInit+0x40e>
    1bda:	24 c0       	rjmp	.+72     	; 0x1c24 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6e 89       	ldd	r22, Y+22	; 0x16
    1bde:	7f 89       	ldd	r23, Y+23	; 0x17
    1be0:	88 8d       	ldd	r24, Y+24	; 0x18
    1be2:	99 8d       	ldd	r25, Y+25	; 0x19
    1be4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9d 8b       	std	Y+21, r25	; 0x15
    1bee:	8c 8b       	std	Y+20, r24	; 0x14
    1bf0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf2:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf4:	99 8b       	std	Y+17, r25	; 0x11
    1bf6:	88 8b       	std	Y+16, r24	; 0x10
    1bf8:	88 89       	ldd	r24, Y+16	; 0x10
    1bfa:	99 89       	ldd	r25, Y+17	; 0x11
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_voidInit+0x456>
    1c00:	99 8b       	std	Y+17, r25	; 0x11
    1c02:	88 8b       	std	Y+16, r24	; 0x10
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c08:	78 a1       	ldd	r23, Y+32	; 0x20
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8e 8f       	std	Y+30, r24	; 0x1e
    1c18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1e:	8a 95       	dec	r24
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidInit+0x478>
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    /*clear display*/
    LCD_voidWriteCmnd(0b00000001);
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e4       	ldi	r27, 0x40	; 64
    1c32:	8b 87       	std	Y+11, r24	; 0x0b
    1c34:	9c 87       	std	Y+12, r25	; 0x0c
    1c36:	ad 87       	std	Y+13, r26	; 0x0d
    1c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	55 e4       	ldi	r21, 0x45	; 69
    1c4a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8f 83       	std	Y+7, r24	; 0x07
    1c54:	98 87       	std	Y+8, r25	; 0x08
    1c56:	a9 87       	std	Y+9, r26	; 0x09
    1c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <LCD_voidInit+0x4d6>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <LCD_voidInit+0x536>
    1cbe:	80 e9       	ldi	r24, 0x90	; 144
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_voidInit+0x524>
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <LCD_voidInit+0x518>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_voidInit+0x560>
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /*Entry mode set*/
    LCD_voidWriteCmnd(0b00000110);
    1d0e:	86 e0       	ldi	r24, 0x06	; 6
    1d10:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
}
    1d14:	c4 5b       	subi	r28, 0xB4	; 180
    1d16:	df 4f       	sbci	r29, 0xFF	; 255
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <LCD_voidWriteString+0x6>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8CharCounter = 0 ;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <LCD_voidWriteString+0x30>
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	80 81       	ld	r24, Z
    1d52:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteChar>
        Local_u8CharCounter ++;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    u8 Local_u8CharCounter = 0 ;
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	9b 81       	ldd	r25, Y+3	; 0x03
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	39 f7       	brne	.-50     	; 0x1d40 <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
        Local_u8CharCounter ++;
    }
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNo ,u8 Copy_u8Location)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <LCD_u8GoToXY+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <LCD_u8GoToXY+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Location < 40)
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 32       	cpi	r24, 0x28	; 40
    1d98:	e0 f4       	brcc	.+56     	; 0x1dd2 <LCD_u8GoToXY+0x54>
    {
        switch (Copy_u8LineNo)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3d 83       	std	Y+5, r19	; 0x05
    1da2:	2c 83       	std	Y+4, r18	; 0x04
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	31 f0       	breq	.+12     	; 0x1dba <LCD_u8GoToXY+0x3c>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <LCD_u8GoToXY+0x46>
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <LCD_u8GoToXY+0x50>
        {
            case LCD_u8_LINE1 : LCD_voidWriteCmnd(Copy_u8Location + 0x80 );break;           
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	80 58       	subi	r24, 0x80	; 128
    1dbe:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <LCD_u8GoToXY+0x56>
            case LCD_u8_LINE2 : LCD_voidWriteCmnd(Copy_u8Location + 0xC0 );break;  
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 54       	subi	r24, 0x40	; 64
    1dc8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <LCD_u8GoToXY+0x56>
            default           : Local_u8ReturnState = STD_TYPE_NOK;        break;
    1dce:	19 82       	std	Y+1, r1	; 0x01
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <LCD_u8GoToXY+0x56>
        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK; 
    1dd2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    0x00 : first location in line 1
    0x40 (64) : first location in line 2
    when we represent these nummbers in the stars of IR this will result the 
    instructions above 
    */
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <LCD_voidShift>:

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <LCD_voidShift+0x6>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <LCD_voidShift+0x8>
    1dee:	0f 92       	push	r0
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Counter = 0;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	19 c0       	rjmp	.+50     	; 0x1e30 <LCD_voidShift+0x4a>
    {
        switch (Copy_u8ShiftDirection)
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3d 83       	std	Y+5, r19	; 0x05
    1e06:	2c 83       	std	Y+4, r18	; 0x04
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	31 f0       	breq	.+12     	; 0x1e1c <LCD_voidShift+0x36>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	21 30       	cpi	r18, 0x01	; 1
    1e16:	31 05       	cpc	r19, r1
    1e18:	29 f0       	breq	.+10     	; 0x1e24 <LCD_voidShift+0x3e>
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <LCD_voidShift+0x44>
        {
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
    1e1c:	8c e1       	ldi	r24, 0x1C	; 28
    1e1e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <LCD_voidShift+0x44>
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
    1e24:	88 e1       	ldi	r24, 0x18	; 24
    1e26:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
}

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    u8 Local_u8Counter = 0;
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    1e30:	99 81       	ldd	r25, Y+1	; 0x01
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	98 17       	cp	r25, r24
    1e36:	18 f3       	brcs	.-58     	; 0x1dfe <LCD_voidShift+0x18>
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
        _delay_ms(1);
        }
    }
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <LCD_voidXYString>:

void LCD_voidXYString(u8 Copy_u8LineNo ,u8 Copy_u8Location,u8 *Copy_Pu8Srting)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LCD_voidXYString+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <LCD_voidXYString+0x8>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	6a 83       	std	Y+2, r22	; 0x02
    1e58:	5c 83       	std	Y+4, r21	; 0x04
    1e5a:	4b 83       	std	Y+3, r20	; 0x03
    LCD_u8GoToXY(Copy_u8LineNo,Copy_u8Location);
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e60:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_u8GoToXY>
    LCD_voidWriteString(Copy_Pu8Srting);
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_voidWriteString>
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <LCD_u8WriteSpecialChar>:

u8 LCD_u8WriteSpecialChar(u8 Copy_u8CharIndex,u8 *Copy_Au8Char)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	27 97       	sbiw	r28, 0x07	; 7
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	7d 83       	std	Y+5, r23	; 0x05
    1e92:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Conter = 0;
    1e98:	19 82       	std	Y+1, r1	; 0x01
    /*choose the place in CGRAM to write your special character*/
    switch (Copy_u8CharIndex)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3f 83       	std	Y+7, r19	; 0x07
    1ea2:	2e 83       	std	Y+6, r18	; 0x06
    1ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	a9 f1       	breq	.+106    	; 0x1f18 <LCD_u8WriteSpecialChar+0x9e>
    1eae:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb2:	24 30       	cpi	r18, 0x04	; 4
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	7c f4       	brge	.+30     	; 0x1ed6 <LCD_u8WriteSpecialChar+0x5c>
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	19 f1       	breq	.+70     	; 0x1f08 <LCD_u8WriteSpecialChar+0x8e>
    1ec2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	14 f5       	brge	.+68     	; 0x1f10 <LCD_u8WriteSpecialChar+0x96>
    1ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ece:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	b1 f0       	breq	.+44     	; 0x1f00 <LCD_u8WriteSpecialChar+0x86>
    1ed4:	35 c0       	rjmp	.+106    	; 0x1f40 <LCD_u8WriteSpecialChar+0xc6>
    1ed6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eda:	25 30       	cpi	r18, 0x05	; 5
    1edc:	31 05       	cpc	r19, r1
    1ede:	21 f1       	breq	.+72     	; 0x1f28 <LCD_u8WriteSpecialChar+0xae>
    1ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee4:	85 30       	cpi	r24, 0x05	; 5
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	dc f0       	brlt	.+54     	; 0x1f20 <LCD_u8WriteSpecialChar+0xa6>
    1eea:	2e 81       	ldd	r18, Y+6	; 0x06
    1eec:	3f 81       	ldd	r19, Y+7	; 0x07
    1eee:	26 30       	cpi	r18, 0x06	; 6
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	f1 f0       	breq	.+60     	; 0x1f30 <LCD_u8WriteSpecialChar+0xb6>
    1ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef8:	87 30       	cpi	r24, 0x07	; 7
    1efa:	91 05       	cpc	r25, r1
    1efc:	e9 f0       	breq	.+58     	; 0x1f38 <LCD_u8WriteSpecialChar+0xbe>
    1efe:	20 c0       	rjmp	.+64     	; 0x1f40 <LCD_u8WriteSpecialChar+0xc6>
    {
    case LCD_u8_SPECHIAL0: LCD_voidWriteCmnd(0b01000000); break;
    1f00:	80 e4       	ldi	r24, 0x40	; 64
    1f02:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f06:	1d c0       	rjmp	.+58     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL1: LCD_voidWriteCmnd(0b01001000); break;
    1f08:	88 e4       	ldi	r24, 0x48	; 72
    1f0a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f0e:	19 c0       	rjmp	.+50     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL2: LCD_voidWriteCmnd(0b01010000); break;
    1f10:	80 e5       	ldi	r24, 0x50	; 80
    1f12:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f16:	15 c0       	rjmp	.+42     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL3: LCD_voidWriteCmnd(0b01011000); break;
    1f18:	88 e5       	ldi	r24, 0x58	; 88
    1f1a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f1e:	11 c0       	rjmp	.+34     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL4: LCD_voidWriteCmnd(0b01100000); break;
    1f20:	80 e6       	ldi	r24, 0x60	; 96
    1f22:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL5: LCD_voidWriteCmnd(0b01101000); break;
    1f28:	88 e6       	ldi	r24, 0x68	; 104
    1f2a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f2e:	09 c0       	rjmp	.+18     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    1f30:	80 e7       	ldi	r24, 0x70	; 112
    1f32:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    1f38:	88 e7       	ldi	r24, 0x78	; 120
    1f3a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteCmnd>
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <LCD_u8WriteSpecialChar+0xc8>
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    1f40:	1a 82       	std	Y+2, r1	; 0x02
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    1f42:	19 82       	std	Y+1, r1	; 0x01
    1f44:	0e c0       	rjmp	.+28     	; 0x1f62 <LCD_u8WriteSpecialChar+0xe8>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	fc 01       	movw	r30, r24
    1f52:	e2 0f       	add	r30, r18
    1f54:	f3 1f       	adc	r31, r19
    1f56:	80 81       	ld	r24, Z
    1f58:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteChar>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	88 30       	cpi	r24, 0x08	; 8
    1f66:	78 f3       	brcs	.-34     	; 0x1f46 <LCD_u8WriteSpecialChar+0xcc>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    }
    return Local_u8ReturnState;
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f6a:	27 96       	adiw	r28, 0x07	; 7
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <Num_u16ToString>:

void Num_u16ToString(u16 Copu_u16Num, u8 *Copu_Au8Str)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <Num_u16ToString+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <Num_u16ToString+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	7c 83       	std	Y+4, r23	; 0x04
    1f8e:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(Copu_Au8Str, "%d", Copu_u16Num);
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <Num_u16ToString+0x16>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Num_u16ToString+0x18>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <Num_u16ToString+0x1a>
    1f96:	ed b7       	in	r30, 0x3d	; 61
    1f98:	fe b7       	in	r31, 0x3e	; 62
    1f9a:	31 96       	adiw	r30, 0x01	; 1
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	93 83       	std	Z+3, r25	; 0x03
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	95 83       	std	Z+5, r25	; 0x05
    1fb2:	84 83       	std	Z+4, r24	; 0x04
    1fb4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <sprintf>
    1fb8:	8d b7       	in	r24, 0x3d	; 61
    1fba:	9e b7       	in	r25, 0x3e	; 62
    1fbc:	06 96       	adiw	r24, 0x06	; 6
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	9e bf       	out	0x3e, r25	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	8d bf       	out	0x3d, r24	; 61
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Num)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	2c 97       	sbiw	r28, 0x0c	; 12
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	9c 87       	std	Y+12, r25	; 0x0c
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    u8 Local_u8Buffer[10];
    Num_u16ToString(Copy_u16Num,Local_u8Buffer);
    1fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ff2:	9e 01       	movw	r18, r28
    1ff4:	2f 5f       	subi	r18, 0xFF	; 255
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <Num_u16ToString>
    LCD_voidWriteString(Local_u8Buffer);
    1ffe:	ce 01       	movw	r24, r28
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_voidWriteString>
}
    2006:	2c 96       	adiw	r28, 0x0c	; 12
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <main>:
#include "KPD_interface.h"
#define LCD_CLEARTEXT "                                        "


int main(void)
 {
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	0f 92       	push	r0
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	/*DIO init */
	DIO_voidInit();
    2022:	0e 94 51 06 	call	0xca2	; 0xca2 <DIO_voidInit>
	/*LCD init*/
	LCD_voidInit();
    2026:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidInit>


	u8 Local_u8KPDVal = KPD_u8_KEY_NOT_PRESSED;
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	89 83       	std	Y+1, r24	; 0x01
	KPD_u8GetKey(&Local_u8KPDVal);
    202e:	ce 01       	movw	r24, r28
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	0e 94 ca 09 	call	0x1394	; 0x1394 <KPD_u8GetKey>
	while(1)
	{		

		if (Local_u8KPDVal == KPD_u8_KEY_NOT_PRESSED)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	8a 30       	cpi	r24, 0x0A	; 10
    203a:	29 f4       	brne	.+10     	; 0x2046 <main+0x2e>
		{
			KPD_u8GetKey(&Local_u8KPDVal);
    203c:	ce 01       	movw	r24, r28
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	0e 94 ca 09 	call	0x1394	; 0x1394 <KPD_u8GetKey>
    2044:	f8 cf       	rjmp	.-16     	; 0x2036 <main+0x1e>
		}
		else
		{
			LCD_voidWriteChar(Local_u8KPDVal);
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteChar>
			Local_u8KPDVal = KPD_u8_KEY_NOT_PRESSED;
    204c:	8a e0       	ldi	r24, 0x0A	; 10
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	f2 cf       	rjmp	.-28     	; 0x2036 <main+0x1e>

00002052 <__prologue_saves__>:
    2052:	2f 92       	push	r2
    2054:	3f 92       	push	r3
    2056:	4f 92       	push	r4
    2058:	5f 92       	push	r5
    205a:	6f 92       	push	r6
    205c:	7f 92       	push	r7
    205e:	8f 92       	push	r8
    2060:	9f 92       	push	r9
    2062:	af 92       	push	r10
    2064:	bf 92       	push	r11
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	ca 1b       	sub	r28, r26
    207c:	db 0b       	sbc	r29, r27
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	09 94       	ijmp

0000208a <__epilogue_restores__>:
    208a:	2a 88       	ldd	r2, Y+18	; 0x12
    208c:	39 88       	ldd	r3, Y+17	; 0x11
    208e:	48 88       	ldd	r4, Y+16	; 0x10
    2090:	5f 84       	ldd	r5, Y+15	; 0x0f
    2092:	6e 84       	ldd	r6, Y+14	; 0x0e
    2094:	7d 84       	ldd	r7, Y+13	; 0x0d
    2096:	8c 84       	ldd	r8, Y+12	; 0x0c
    2098:	9b 84       	ldd	r9, Y+11	; 0x0b
    209a:	aa 84       	ldd	r10, Y+10	; 0x0a
    209c:	b9 84       	ldd	r11, Y+9	; 0x09
    209e:	c8 84       	ldd	r12, Y+8	; 0x08
    20a0:	df 80       	ldd	r13, Y+7	; 0x07
    20a2:	ee 80       	ldd	r14, Y+6	; 0x06
    20a4:	fd 80       	ldd	r15, Y+5	; 0x05
    20a6:	0c 81       	ldd	r16, Y+4	; 0x04
    20a8:	1b 81       	ldd	r17, Y+3	; 0x03
    20aa:	aa 81       	ldd	r26, Y+2	; 0x02
    20ac:	b9 81       	ldd	r27, Y+1	; 0x01
    20ae:	ce 0f       	add	r28, r30
    20b0:	d1 1d       	adc	r29, r1
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	ed 01       	movw	r28, r26
    20be:	08 95       	ret

000020c0 <sprintf>:
    20c0:	ae e0       	ldi	r26, 0x0E	; 14
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e6       	ldi	r30, 0x66	; 102
    20c6:	f0 e1       	ldi	r31, 0x10	; 16
    20c8:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x1c>
    20cc:	0d 89       	ldd	r16, Y+21	; 0x15
    20ce:	1e 89       	ldd	r17, Y+22	; 0x16
    20d0:	86 e0       	ldi	r24, 0x06	; 6
    20d2:	8c 83       	std	Y+4, r24	; 0x04
    20d4:	1a 83       	std	Y+2, r17	; 0x02
    20d6:	09 83       	std	Y+1, r16	; 0x01
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f e7       	ldi	r25, 0x7F	; 127
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	9e 01       	movw	r18, r28
    20e2:	27 5e       	subi	r18, 0xE7	; 231
    20e4:	3f 4f       	sbci	r19, 0xFF	; 255
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	6f 89       	ldd	r22, Y+23	; 0x17
    20ec:	78 8d       	ldd	r23, Y+24	; 0x18
    20ee:	a9 01       	movw	r20, r18
    20f0:	0e 94 84 10 	call	0x2108	; 0x2108 <vfprintf>
    20f4:	2f 81       	ldd	r18, Y+7	; 0x07
    20f6:	38 85       	ldd	r19, Y+8	; 0x08
    20f8:	02 0f       	add	r16, r18
    20fa:	13 1f       	adc	r17, r19
    20fc:	f8 01       	movw	r30, r16
    20fe:	10 82       	st	Z, r1
    2100:	2e 96       	adiw	r28, 0x0e	; 14
    2102:	e4 e0       	ldi	r30, 0x04	; 4
    2104:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x1c>

00002108 <vfprintf>:
    2108:	ab e0       	ldi	r26, 0x0B	; 11
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ea e8       	ldi	r30, 0x8A	; 138
    210e:	f0 e1       	ldi	r31, 0x10	; 16
    2110:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__>
    2114:	3c 01       	movw	r6, r24
    2116:	2b 01       	movw	r4, r22
    2118:	5a 01       	movw	r10, r20
    211a:	fc 01       	movw	r30, r24
    211c:	17 82       	std	Z+7, r1	; 0x07
    211e:	16 82       	std	Z+6, r1	; 0x06
    2120:	83 81       	ldd	r24, Z+3	; 0x03
    2122:	81 fd       	sbrc	r24, 1
    2124:	03 c0       	rjmp	.+6      	; 0x212c <vfprintf+0x24>
    2126:	6f ef       	ldi	r22, 0xFF	; 255
    2128:	7f ef       	ldi	r23, 0xFF	; 255
    212a:	c6 c1       	rjmp	.+908    	; 0x24b8 <vfprintf+0x3b0>
    212c:	9a e0       	ldi	r25, 0x0A	; 10
    212e:	89 2e       	mov	r8, r25
    2130:	1e 01       	movw	r2, r28
    2132:	08 94       	sec
    2134:	21 1c       	adc	r2, r1
    2136:	31 1c       	adc	r3, r1
    2138:	f3 01       	movw	r30, r6
    213a:	23 81       	ldd	r18, Z+3	; 0x03
    213c:	f2 01       	movw	r30, r4
    213e:	23 fd       	sbrc	r18, 3
    2140:	85 91       	lpm	r24, Z+
    2142:	23 ff       	sbrs	r18, 3
    2144:	81 91       	ld	r24, Z+
    2146:	2f 01       	movw	r4, r30
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <vfprintf+0x46>
    214c:	b2 c1       	rjmp	.+868    	; 0x24b2 <vfprintf+0x3aa>
    214e:	85 32       	cpi	r24, 0x25	; 37
    2150:	39 f4       	brne	.+14     	; 0x2160 <vfprintf+0x58>
    2152:	23 fd       	sbrc	r18, 3
    2154:	85 91       	lpm	r24, Z+
    2156:	23 ff       	sbrs	r18, 3
    2158:	81 91       	ld	r24, Z+
    215a:	2f 01       	movw	r4, r30
    215c:	85 32       	cpi	r24, 0x25	; 37
    215e:	29 f4       	brne	.+10     	; 0x216a <vfprintf+0x62>
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	b3 01       	movw	r22, r6
    2164:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    2168:	e7 cf       	rjmp	.-50     	; 0x2138 <vfprintf+0x30>
    216a:	98 2f       	mov	r25, r24
    216c:	ff 24       	eor	r15, r15
    216e:	ee 24       	eor	r14, r14
    2170:	99 24       	eor	r9, r9
    2172:	ff e1       	ldi	r31, 0x1F	; 31
    2174:	ff 15       	cp	r31, r15
    2176:	d0 f0       	brcs	.+52     	; 0x21ac <vfprintf+0xa4>
    2178:	9b 32       	cpi	r25, 0x2B	; 43
    217a:	69 f0       	breq	.+26     	; 0x2196 <vfprintf+0x8e>
    217c:	9c 32       	cpi	r25, 0x2C	; 44
    217e:	28 f4       	brcc	.+10     	; 0x218a <vfprintf+0x82>
    2180:	90 32       	cpi	r25, 0x20	; 32
    2182:	59 f0       	breq	.+22     	; 0x219a <vfprintf+0x92>
    2184:	93 32       	cpi	r25, 0x23	; 35
    2186:	91 f4       	brne	.+36     	; 0x21ac <vfprintf+0xa4>
    2188:	0e c0       	rjmp	.+28     	; 0x21a6 <vfprintf+0x9e>
    218a:	9d 32       	cpi	r25, 0x2D	; 45
    218c:	49 f0       	breq	.+18     	; 0x21a0 <vfprintf+0x98>
    218e:	90 33       	cpi	r25, 0x30	; 48
    2190:	69 f4       	brne	.+26     	; 0x21ac <vfprintf+0xa4>
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	24 c0       	rjmp	.+72     	; 0x21de <vfprintf+0xd6>
    2196:	52 e0       	ldi	r21, 0x02	; 2
    2198:	f5 2a       	or	r15, r21
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	f8 2a       	or	r15, r24
    219e:	28 c0       	rjmp	.+80     	; 0x21f0 <vfprintf+0xe8>
    21a0:	98 e0       	ldi	r25, 0x08	; 8
    21a2:	f9 2a       	or	r15, r25
    21a4:	25 c0       	rjmp	.+74     	; 0x21f0 <vfprintf+0xe8>
    21a6:	e0 e1       	ldi	r30, 0x10	; 16
    21a8:	fe 2a       	or	r15, r30
    21aa:	22 c0       	rjmp	.+68     	; 0x21f0 <vfprintf+0xe8>
    21ac:	f7 fc       	sbrc	r15, 7
    21ae:	29 c0       	rjmp	.+82     	; 0x2202 <vfprintf+0xfa>
    21b0:	89 2f       	mov	r24, r25
    21b2:	80 53       	subi	r24, 0x30	; 48
    21b4:	8a 30       	cpi	r24, 0x0A	; 10
    21b6:	70 f4       	brcc	.+28     	; 0x21d4 <vfprintf+0xcc>
    21b8:	f6 fe       	sbrs	r15, 6
    21ba:	05 c0       	rjmp	.+10     	; 0x21c6 <vfprintf+0xbe>
    21bc:	98 9c       	mul	r9, r8
    21be:	90 2c       	mov	r9, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	98 0e       	add	r9, r24
    21c4:	15 c0       	rjmp	.+42     	; 0x21f0 <vfprintf+0xe8>
    21c6:	e8 9c       	mul	r14, r8
    21c8:	e0 2c       	mov	r14, r0
    21ca:	11 24       	eor	r1, r1
    21cc:	e8 0e       	add	r14, r24
    21ce:	f0 e2       	ldi	r31, 0x20	; 32
    21d0:	ff 2a       	or	r15, r31
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <vfprintf+0xe8>
    21d4:	9e 32       	cpi	r25, 0x2E	; 46
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <vfprintf+0xda>
    21d8:	f6 fc       	sbrc	r15, 6
    21da:	6b c1       	rjmp	.+726    	; 0x24b2 <vfprintf+0x3aa>
    21dc:	40 e4       	ldi	r20, 0x40	; 64
    21de:	f4 2a       	or	r15, r20
    21e0:	07 c0       	rjmp	.+14     	; 0x21f0 <vfprintf+0xe8>
    21e2:	9c 36       	cpi	r25, 0x6C	; 108
    21e4:	19 f4       	brne	.+6      	; 0x21ec <vfprintf+0xe4>
    21e6:	50 e8       	ldi	r21, 0x80	; 128
    21e8:	f5 2a       	or	r15, r21
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <vfprintf+0xe8>
    21ec:	98 36       	cpi	r25, 0x68	; 104
    21ee:	49 f4       	brne	.+18     	; 0x2202 <vfprintf+0xfa>
    21f0:	f2 01       	movw	r30, r4
    21f2:	23 fd       	sbrc	r18, 3
    21f4:	95 91       	lpm	r25, Z+
    21f6:	23 ff       	sbrs	r18, 3
    21f8:	91 91       	ld	r25, Z+
    21fa:	2f 01       	movw	r4, r30
    21fc:	99 23       	and	r25, r25
    21fe:	09 f0       	breq	.+2      	; 0x2202 <vfprintf+0xfa>
    2200:	b8 cf       	rjmp	.-144    	; 0x2172 <vfprintf+0x6a>
    2202:	89 2f       	mov	r24, r25
    2204:	85 54       	subi	r24, 0x45	; 69
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	18 f0       	brcs	.+6      	; 0x2210 <vfprintf+0x108>
    220a:	80 52       	subi	r24, 0x20	; 32
    220c:	83 30       	cpi	r24, 0x03	; 3
    220e:	38 f4       	brcc	.+14     	; 0x221e <vfprintf+0x116>
    2210:	44 e0       	ldi	r20, 0x04	; 4
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	a4 0e       	add	r10, r20
    2216:	b5 1e       	adc	r11, r21
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	59 83       	std	Y+1, r21	; 0x01
    221c:	0f c0       	rjmp	.+30     	; 0x223c <vfprintf+0x134>
    221e:	93 36       	cpi	r25, 0x63	; 99
    2220:	31 f0       	breq	.+12     	; 0x222e <vfprintf+0x126>
    2222:	93 37       	cpi	r25, 0x73	; 115
    2224:	79 f0       	breq	.+30     	; 0x2244 <vfprintf+0x13c>
    2226:	93 35       	cpi	r25, 0x53	; 83
    2228:	09 f0       	breq	.+2      	; 0x222c <vfprintf+0x124>
    222a:	56 c0       	rjmp	.+172    	; 0x22d8 <vfprintf+0x1d0>
    222c:	20 c0       	rjmp	.+64     	; 0x226e <vfprintf+0x166>
    222e:	f5 01       	movw	r30, r10
    2230:	80 81       	ld	r24, Z
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	42 e0       	ldi	r20, 0x02	; 2
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	a4 0e       	add	r10, r20
    223a:	b5 1e       	adc	r11, r21
    223c:	61 01       	movw	r12, r2
    223e:	01 e0       	ldi	r16, 0x01	; 1
    2240:	10 e0       	ldi	r17, 0x00	; 0
    2242:	12 c0       	rjmp	.+36     	; 0x2268 <vfprintf+0x160>
    2244:	f5 01       	movw	r30, r10
    2246:	c0 80       	ld	r12, Z
    2248:	d1 80       	ldd	r13, Z+1	; 0x01
    224a:	f6 fc       	sbrc	r15, 6
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <vfprintf+0x14c>
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	7f ef       	ldi	r23, 0xFF	; 255
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <vfprintf+0x150>
    2254:	69 2d       	mov	r22, r9
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	42 e0       	ldi	r20, 0x02	; 2
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	a4 0e       	add	r10, r20
    225e:	b5 1e       	adc	r11, r21
    2260:	c6 01       	movw	r24, r12
    2262:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strnlen>
    2266:	8c 01       	movw	r16, r24
    2268:	5f e7       	ldi	r21, 0x7F	; 127
    226a:	f5 22       	and	r15, r21
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <vfprintf+0x18e>
    226e:	f5 01       	movw	r30, r10
    2270:	c0 80       	ld	r12, Z
    2272:	d1 80       	ldd	r13, Z+1	; 0x01
    2274:	f6 fc       	sbrc	r15, 6
    2276:	03 c0       	rjmp	.+6      	; 0x227e <vfprintf+0x176>
    2278:	6f ef       	ldi	r22, 0xFF	; 255
    227a:	7f ef       	ldi	r23, 0xFF	; 255
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <vfprintf+0x17a>
    227e:	69 2d       	mov	r22, r9
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	42 e0       	ldi	r20, 0x02	; 2
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	a4 0e       	add	r10, r20
    2288:	b5 1e       	adc	r11, r21
    228a:	c6 01       	movw	r24, r12
    228c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <strnlen_P>
    2290:	8c 01       	movw	r16, r24
    2292:	50 e8       	ldi	r21, 0x80	; 128
    2294:	f5 2a       	or	r15, r21
    2296:	f3 fe       	sbrs	r15, 3
    2298:	07 c0       	rjmp	.+14     	; 0x22a8 <vfprintf+0x1a0>
    229a:	1a c0       	rjmp	.+52     	; 0x22d0 <vfprintf+0x1c8>
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	b3 01       	movw	r22, r6
    22a2:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    22a6:	ea 94       	dec	r14
    22a8:	8e 2d       	mov	r24, r14
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	08 17       	cp	r16, r24
    22ae:	19 07       	cpc	r17, r25
    22b0:	a8 f3       	brcs	.-22     	; 0x229c <vfprintf+0x194>
    22b2:	0e c0       	rjmp	.+28     	; 0x22d0 <vfprintf+0x1c8>
    22b4:	f6 01       	movw	r30, r12
    22b6:	f7 fc       	sbrc	r15, 7
    22b8:	85 91       	lpm	r24, Z+
    22ba:	f7 fe       	sbrs	r15, 7
    22bc:	81 91       	ld	r24, Z+
    22be:	6f 01       	movw	r12, r30
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	b3 01       	movw	r22, r6
    22c4:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    22c8:	e1 10       	cpse	r14, r1
    22ca:	ea 94       	dec	r14
    22cc:	01 50       	subi	r16, 0x01	; 1
    22ce:	10 40       	sbci	r17, 0x00	; 0
    22d0:	01 15       	cp	r16, r1
    22d2:	11 05       	cpc	r17, r1
    22d4:	79 f7       	brne	.-34     	; 0x22b4 <vfprintf+0x1ac>
    22d6:	ea c0       	rjmp	.+468    	; 0x24ac <vfprintf+0x3a4>
    22d8:	94 36       	cpi	r25, 0x64	; 100
    22da:	11 f0       	breq	.+4      	; 0x22e0 <vfprintf+0x1d8>
    22dc:	99 36       	cpi	r25, 0x69	; 105
    22de:	69 f5       	brne	.+90     	; 0x233a <vfprintf+0x232>
    22e0:	f7 fe       	sbrs	r15, 7
    22e2:	08 c0       	rjmp	.+16     	; 0x22f4 <vfprintf+0x1ec>
    22e4:	f5 01       	movw	r30, r10
    22e6:	20 81       	ld	r18, Z
    22e8:	31 81       	ldd	r19, Z+1	; 0x01
    22ea:	42 81       	ldd	r20, Z+2	; 0x02
    22ec:	53 81       	ldd	r21, Z+3	; 0x03
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0a c0       	rjmp	.+20     	; 0x2308 <vfprintf+0x200>
    22f4:	f5 01       	movw	r30, r10
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	9c 01       	movw	r18, r24
    22fc:	44 27       	eor	r20, r20
    22fe:	37 fd       	sbrc	r19, 7
    2300:	40 95       	com	r20
    2302:	54 2f       	mov	r21, r20
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a8 0e       	add	r10, r24
    230a:	b9 1e       	adc	r11, r25
    230c:	9f e6       	ldi	r25, 0x6F	; 111
    230e:	f9 22       	and	r15, r25
    2310:	57 ff       	sbrs	r21, 7
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <vfprintf+0x21e>
    2314:	50 95       	com	r21
    2316:	40 95       	com	r20
    2318:	30 95       	com	r19
    231a:	21 95       	neg	r18
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	4f 4f       	sbci	r20, 0xFF	; 255
    2320:	5f 4f       	sbci	r21, 0xFF	; 255
    2322:	e0 e8       	ldi	r30, 0x80	; 128
    2324:	fe 2a       	or	r15, r30
    2326:	ca 01       	movw	r24, r20
    2328:	b9 01       	movw	r22, r18
    232a:	a1 01       	movw	r20, r2
    232c:	2a e0       	ldi	r18, 0x0A	; 10
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	0e 94 a3 12 	call	0x2546	; 0x2546 <__ultoa_invert>
    2334:	d8 2e       	mov	r13, r24
    2336:	d2 18       	sub	r13, r2
    2338:	40 c0       	rjmp	.+128    	; 0x23ba <vfprintf+0x2b2>
    233a:	95 37       	cpi	r25, 0x75	; 117
    233c:	29 f4       	brne	.+10     	; 0x2348 <vfprintf+0x240>
    233e:	1f 2d       	mov	r17, r15
    2340:	1f 7e       	andi	r17, 0xEF	; 239
    2342:	2a e0       	ldi	r18, 0x0A	; 10
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	1d c0       	rjmp	.+58     	; 0x2382 <vfprintf+0x27a>
    2348:	1f 2d       	mov	r17, r15
    234a:	19 7f       	andi	r17, 0xF9	; 249
    234c:	9f 36       	cpi	r25, 0x6F	; 111
    234e:	61 f0       	breq	.+24     	; 0x2368 <vfprintf+0x260>
    2350:	90 37       	cpi	r25, 0x70	; 112
    2352:	20 f4       	brcc	.+8      	; 0x235c <vfprintf+0x254>
    2354:	98 35       	cpi	r25, 0x58	; 88
    2356:	09 f0       	breq	.+2      	; 0x235a <vfprintf+0x252>
    2358:	ac c0       	rjmp	.+344    	; 0x24b2 <vfprintf+0x3aa>
    235a:	0f c0       	rjmp	.+30     	; 0x237a <vfprintf+0x272>
    235c:	90 37       	cpi	r25, 0x70	; 112
    235e:	39 f0       	breq	.+14     	; 0x236e <vfprintf+0x266>
    2360:	98 37       	cpi	r25, 0x78	; 120
    2362:	09 f0       	breq	.+2      	; 0x2366 <vfprintf+0x25e>
    2364:	a6 c0       	rjmp	.+332    	; 0x24b2 <vfprintf+0x3aa>
    2366:	04 c0       	rjmp	.+8      	; 0x2370 <vfprintf+0x268>
    2368:	28 e0       	ldi	r18, 0x08	; 8
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	0a c0       	rjmp	.+20     	; 0x2382 <vfprintf+0x27a>
    236e:	10 61       	ori	r17, 0x10	; 16
    2370:	14 fd       	sbrc	r17, 4
    2372:	14 60       	ori	r17, 0x04	; 4
    2374:	20 e1       	ldi	r18, 0x10	; 16
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <vfprintf+0x27a>
    237a:	14 fd       	sbrc	r17, 4
    237c:	16 60       	ori	r17, 0x06	; 6
    237e:	20 e1       	ldi	r18, 0x10	; 16
    2380:	32 e0       	ldi	r19, 0x02	; 2
    2382:	17 ff       	sbrs	r17, 7
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <vfprintf+0x28e>
    2386:	f5 01       	movw	r30, r10
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	44 e0       	ldi	r20, 0x04	; 4
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	08 c0       	rjmp	.+16     	; 0x23a6 <vfprintf+0x29e>
    2396:	f5 01       	movw	r30, r10
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	bc 01       	movw	r22, r24
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	42 e0       	ldi	r20, 0x02	; 2
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	a4 0e       	add	r10, r20
    23a8:	b5 1e       	adc	r11, r21
    23aa:	a1 01       	movw	r20, r2
    23ac:	0e 94 a3 12 	call	0x2546	; 0x2546 <__ultoa_invert>
    23b0:	d8 2e       	mov	r13, r24
    23b2:	d2 18       	sub	r13, r2
    23b4:	8f e7       	ldi	r24, 0x7F	; 127
    23b6:	f8 2e       	mov	r15, r24
    23b8:	f1 22       	and	r15, r17
    23ba:	f6 fe       	sbrs	r15, 6
    23bc:	0b c0       	rjmp	.+22     	; 0x23d4 <vfprintf+0x2cc>
    23be:	5e ef       	ldi	r21, 0xFE	; 254
    23c0:	f5 22       	and	r15, r21
    23c2:	d9 14       	cp	r13, r9
    23c4:	38 f4       	brcc	.+14     	; 0x23d4 <vfprintf+0x2cc>
    23c6:	f4 fe       	sbrs	r15, 4
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <vfprintf+0x2d0>
    23ca:	f2 fc       	sbrc	r15, 2
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <vfprintf+0x2d0>
    23ce:	8f ee       	ldi	r24, 0xEF	; 239
    23d0:	f8 22       	and	r15, r24
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <vfprintf+0x2d0>
    23d4:	1d 2d       	mov	r17, r13
    23d6:	01 c0       	rjmp	.+2      	; 0x23da <vfprintf+0x2d2>
    23d8:	19 2d       	mov	r17, r9
    23da:	f4 fe       	sbrs	r15, 4
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <vfprintf+0x2f0>
    23de:	fe 01       	movw	r30, r28
    23e0:	ed 0d       	add	r30, r13
    23e2:	f1 1d       	adc	r31, r1
    23e4:	80 81       	ld	r24, Z
    23e6:	80 33       	cpi	r24, 0x30	; 48
    23e8:	19 f4       	brne	.+6      	; 0x23f0 <vfprintf+0x2e8>
    23ea:	99 ee       	ldi	r25, 0xE9	; 233
    23ec:	f9 22       	and	r15, r25
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <vfprintf+0x2f8>
    23f0:	1f 5f       	subi	r17, 0xFF	; 255
    23f2:	f2 fe       	sbrs	r15, 2
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <vfprintf+0x2f8>
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <vfprintf+0x2f6>
    23f8:	8f 2d       	mov	r24, r15
    23fa:	86 78       	andi	r24, 0x86	; 134
    23fc:	09 f0       	breq	.+2      	; 0x2400 <vfprintf+0x2f8>
    23fe:	1f 5f       	subi	r17, 0xFF	; 255
    2400:	0f 2d       	mov	r16, r15
    2402:	f3 fc       	sbrc	r15, 3
    2404:	14 c0       	rjmp	.+40     	; 0x242e <vfprintf+0x326>
    2406:	f0 fe       	sbrs	r15, 0
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <vfprintf+0x320>
    240a:	1e 15       	cp	r17, r14
    240c:	10 f0       	brcs	.+4      	; 0x2412 <vfprintf+0x30a>
    240e:	9d 2c       	mov	r9, r13
    2410:	0b c0       	rjmp	.+22     	; 0x2428 <vfprintf+0x320>
    2412:	9d 2c       	mov	r9, r13
    2414:	9e 0c       	add	r9, r14
    2416:	91 1a       	sub	r9, r17
    2418:	1e 2d       	mov	r17, r14
    241a:	06 c0       	rjmp	.+12     	; 0x2428 <vfprintf+0x320>
    241c:	80 e2       	ldi	r24, 0x20	; 32
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	b3 01       	movw	r22, r6
    2422:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    2426:	1f 5f       	subi	r17, 0xFF	; 255
    2428:	1e 15       	cp	r17, r14
    242a:	c0 f3       	brcs	.-16     	; 0x241c <vfprintf+0x314>
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <vfprintf+0x32e>
    242e:	1e 15       	cp	r17, r14
    2430:	10 f4       	brcc	.+4      	; 0x2436 <vfprintf+0x32e>
    2432:	e1 1a       	sub	r14, r17
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <vfprintf+0x330>
    2436:	ee 24       	eor	r14, r14
    2438:	04 ff       	sbrs	r16, 4
    243a:	0f c0       	rjmp	.+30     	; 0x245a <vfprintf+0x352>
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b3 01       	movw	r22, r6
    2442:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    2446:	02 ff       	sbrs	r16, 2
    2448:	1d c0       	rjmp	.+58     	; 0x2484 <vfprintf+0x37c>
    244a:	01 fd       	sbrc	r16, 1
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <vfprintf+0x34c>
    244e:	88 e7       	ldi	r24, 0x78	; 120
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <vfprintf+0x368>
    2454:	88 e5       	ldi	r24, 0x58	; 88
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0b c0       	rjmp	.+22     	; 0x2470 <vfprintf+0x368>
    245a:	80 2f       	mov	r24, r16
    245c:	86 78       	andi	r24, 0x86	; 134
    245e:	91 f0       	breq	.+36     	; 0x2484 <vfprintf+0x37c>
    2460:	01 ff       	sbrs	r16, 1
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <vfprintf+0x360>
    2464:	8b e2       	ldi	r24, 0x2B	; 43
    2466:	01 c0       	rjmp	.+2      	; 0x246a <vfprintf+0x362>
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	f7 fc       	sbrc	r15, 7
    246c:	8d e2       	ldi	r24, 0x2D	; 45
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	b3 01       	movw	r22, r6
    2472:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <vfprintf+0x37c>
    2478:	80 e3       	ldi	r24, 0x30	; 48
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	b3 01       	movw	r22, r6
    247e:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    2482:	9a 94       	dec	r9
    2484:	d9 14       	cp	r13, r9
    2486:	c0 f3       	brcs	.-16     	; 0x2478 <vfprintf+0x370>
    2488:	da 94       	dec	r13
    248a:	f1 01       	movw	r30, r2
    248c:	ed 0d       	add	r30, r13
    248e:	f1 1d       	adc	r31, r1
    2490:	80 81       	ld	r24, Z
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	b3 01       	movw	r22, r6
    2496:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    249a:	dd 20       	and	r13, r13
    249c:	a9 f7       	brne	.-22     	; 0x2488 <vfprintf+0x380>
    249e:	06 c0       	rjmp	.+12     	; 0x24ac <vfprintf+0x3a4>
    24a0:	80 e2       	ldi	r24, 0x20	; 32
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	b3 01       	movw	r22, r6
    24a6:	0e 94 77 12 	call	0x24ee	; 0x24ee <fputc>
    24aa:	ea 94       	dec	r14
    24ac:	ee 20       	and	r14, r14
    24ae:	c1 f7       	brne	.-16     	; 0x24a0 <vfprintf+0x398>
    24b0:	43 ce       	rjmp	.-890    	; 0x2138 <vfprintf+0x30>
    24b2:	f3 01       	movw	r30, r6
    24b4:	66 81       	ldd	r22, Z+6	; 0x06
    24b6:	77 81       	ldd	r23, Z+7	; 0x07
    24b8:	cb 01       	movw	r24, r22
    24ba:	2b 96       	adiw	r28, 0x0b	; 11
    24bc:	e2 e1       	ldi	r30, 0x12	; 18
    24be:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__>

000024c2 <strnlen_P>:
    24c2:	fc 01       	movw	r30, r24
    24c4:	05 90       	lpm	r0, Z+
    24c6:	61 50       	subi	r22, 0x01	; 1
    24c8:	70 40       	sbci	r23, 0x00	; 0
    24ca:	01 10       	cpse	r0, r1
    24cc:	d8 f7       	brcc	.-10     	; 0x24c4 <strnlen_P+0x2>
    24ce:	80 95       	com	r24
    24d0:	90 95       	com	r25
    24d2:	8e 0f       	add	r24, r30
    24d4:	9f 1f       	adc	r25, r31
    24d6:	08 95       	ret

000024d8 <strnlen>:
    24d8:	fc 01       	movw	r30, r24
    24da:	61 50       	subi	r22, 0x01	; 1
    24dc:	70 40       	sbci	r23, 0x00	; 0
    24de:	01 90       	ld	r0, Z+
    24e0:	01 10       	cpse	r0, r1
    24e2:	d8 f7       	brcc	.-10     	; 0x24da <strnlen+0x2>
    24e4:	80 95       	com	r24
    24e6:	90 95       	com	r25
    24e8:	8e 0f       	add	r24, r30
    24ea:	9f 1f       	adc	r25, r31
    24ec:	08 95       	ret

000024ee <fputc>:
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	8c 01       	movw	r16, r24
    24f8:	eb 01       	movw	r28, r22
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	81 ff       	sbrs	r24, 1
    24fe:	1b c0       	rjmp	.+54     	; 0x2536 <fputc+0x48>
    2500:	82 ff       	sbrs	r24, 2
    2502:	0d c0       	rjmp	.+26     	; 0x251e <fputc+0x30>
    2504:	2e 81       	ldd	r18, Y+6	; 0x06
    2506:	3f 81       	ldd	r19, Y+7	; 0x07
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	28 17       	cp	r18, r24
    250e:	39 07       	cpc	r19, r25
    2510:	64 f4       	brge	.+24     	; 0x252a <fputc+0x3c>
    2512:	e8 81       	ld	r30, Y
    2514:	f9 81       	ldd	r31, Y+1	; 0x01
    2516:	01 93       	st	Z+, r16
    2518:	f9 83       	std	Y+1, r31	; 0x01
    251a:	e8 83       	st	Y, r30
    251c:	06 c0       	rjmp	.+12     	; 0x252a <fputc+0x3c>
    251e:	e8 85       	ldd	r30, Y+8	; 0x08
    2520:	f9 85       	ldd	r31, Y+9	; 0x09
    2522:	80 2f       	mov	r24, r16
    2524:	09 95       	icall
    2526:	89 2b       	or	r24, r25
    2528:	31 f4       	brne	.+12     	; 0x2536 <fputc+0x48>
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	9f 81       	ldd	r25, Y+7	; 0x07
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	02 c0       	rjmp	.+4      	; 0x253a <fputc+0x4c>
    2536:	0f ef       	ldi	r16, 0xFF	; 255
    2538:	1f ef       	ldi	r17, 0xFF	; 255
    253a:	c8 01       	movw	r24, r16
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	08 95       	ret

00002546 <__ultoa_invert>:
    2546:	fa 01       	movw	r30, r20
    2548:	aa 27       	eor	r26, r26
    254a:	28 30       	cpi	r18, 0x08	; 8
    254c:	51 f1       	breq	.+84     	; 0x25a2 <__ultoa_invert+0x5c>
    254e:	20 31       	cpi	r18, 0x10	; 16
    2550:	81 f1       	breq	.+96     	; 0x25b2 <__ultoa_invert+0x6c>
    2552:	e8 94       	clt
    2554:	6f 93       	push	r22
    2556:	6e 7f       	andi	r22, 0xFE	; 254
    2558:	6e 5f       	subi	r22, 0xFE	; 254
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	8f 4f       	sbci	r24, 0xFF	; 255
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	af 4f       	sbci	r26, 0xFF	; 255
    2562:	b1 e0       	ldi	r27, 0x01	; 1
    2564:	3e d0       	rcall	.+124    	; 0x25e2 <__ultoa_invert+0x9c>
    2566:	b4 e0       	ldi	r27, 0x04	; 4
    2568:	3c d0       	rcall	.+120    	; 0x25e2 <__ultoa_invert+0x9c>
    256a:	67 0f       	add	r22, r23
    256c:	78 1f       	adc	r23, r24
    256e:	89 1f       	adc	r24, r25
    2570:	9a 1f       	adc	r25, r26
    2572:	a1 1d       	adc	r26, r1
    2574:	68 0f       	add	r22, r24
    2576:	79 1f       	adc	r23, r25
    2578:	8a 1f       	adc	r24, r26
    257a:	91 1d       	adc	r25, r1
    257c:	a1 1d       	adc	r26, r1
    257e:	6a 0f       	add	r22, r26
    2580:	71 1d       	adc	r23, r1
    2582:	81 1d       	adc	r24, r1
    2584:	91 1d       	adc	r25, r1
    2586:	a1 1d       	adc	r26, r1
    2588:	20 d0       	rcall	.+64     	; 0x25ca <__ultoa_invert+0x84>
    258a:	09 f4       	brne	.+2      	; 0x258e <__ultoa_invert+0x48>
    258c:	68 94       	set
    258e:	3f 91       	pop	r19
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	26 9f       	mul	r18, r22
    2594:	11 24       	eor	r1, r1
    2596:	30 19       	sub	r19, r0
    2598:	30 5d       	subi	r19, 0xD0	; 208
    259a:	31 93       	st	Z+, r19
    259c:	de f6       	brtc	.-74     	; 0x2554 <__ultoa_invert+0xe>
    259e:	cf 01       	movw	r24, r30
    25a0:	08 95       	ret
    25a2:	46 2f       	mov	r20, r22
    25a4:	47 70       	andi	r20, 0x07	; 7
    25a6:	40 5d       	subi	r20, 0xD0	; 208
    25a8:	41 93       	st	Z+, r20
    25aa:	b3 e0       	ldi	r27, 0x03	; 3
    25ac:	0f d0       	rcall	.+30     	; 0x25cc <__ultoa_invert+0x86>
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__ultoa_invert+0x5c>
    25b0:	f6 cf       	rjmp	.-20     	; 0x259e <__ultoa_invert+0x58>
    25b2:	46 2f       	mov	r20, r22
    25b4:	4f 70       	andi	r20, 0x0F	; 15
    25b6:	40 5d       	subi	r20, 0xD0	; 208
    25b8:	4a 33       	cpi	r20, 0x3A	; 58
    25ba:	18 f0       	brcs	.+6      	; 0x25c2 <__ultoa_invert+0x7c>
    25bc:	49 5d       	subi	r20, 0xD9	; 217
    25be:	31 fd       	sbrc	r19, 1
    25c0:	40 52       	subi	r20, 0x20	; 32
    25c2:	41 93       	st	Z+, r20
    25c4:	02 d0       	rcall	.+4      	; 0x25ca <__ultoa_invert+0x84>
    25c6:	a9 f7       	brne	.-22     	; 0x25b2 <__ultoa_invert+0x6c>
    25c8:	ea cf       	rjmp	.-44     	; 0x259e <__ultoa_invert+0x58>
    25ca:	b4 e0       	ldi	r27, 0x04	; 4
    25cc:	a6 95       	lsr	r26
    25ce:	97 95       	ror	r25
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	ba 95       	dec	r27
    25d8:	c9 f7       	brne	.-14     	; 0x25cc <__ultoa_invert+0x86>
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	61 05       	cpc	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	08 95       	ret
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	0a 2e       	mov	r0, r26
    25e8:	06 94       	lsr	r0
    25ea:	57 95       	ror	r21
    25ec:	47 95       	ror	r20
    25ee:	37 95       	ror	r19
    25f0:	27 95       	ror	r18
    25f2:	ba 95       	dec	r27
    25f4:	c9 f7       	brne	.-14     	; 0x25e8 <__ultoa_invert+0xa2>
    25f6:	62 0f       	add	r22, r18
    25f8:	73 1f       	adc	r23, r19
    25fa:	84 1f       	adc	r24, r20
    25fc:	95 1f       	adc	r25, r21
    25fe:	a0 1d       	adc	r26, r0
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
