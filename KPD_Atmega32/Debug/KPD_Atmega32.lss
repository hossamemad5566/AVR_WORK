
KPD_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ef4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002ef4  00002f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000020f4  00000000  00000000  00002f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d5f  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000060ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7d 14 	call	0x28fa	; 0x28fa <main>
      7a:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRA_REG = CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 83       	st	Z, r24
    				   ,DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8d eb       	ldi	r24, 0xBD	; 189
     cac:	80 83       	st	Z, r24
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTA_REG = CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE
     cb4:	eb e3       	ldi	r30, 0x3B	; 59
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
                         ,DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
     cc0:	e5 e3       	ldi	r30, 0x35	; 53
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8c e3       	ldi	r24, 0x3C	; 60
     cc6:	80 83       	st	Z, r24
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	88 ee       	ldi	r24, 0xE8	; 232
     cce:	80 83       	st	Z, r24
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <DIO_u8SetPinDirection+0x26>
     cfa:	0c c1       	rjmp	.+536    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x2e>
     d02:	08 c1       	rjmp	.+528    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	88 23       	and	r24, r24
     d08:	21 f0       	breq	.+8      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	09 f0       	breq	.+2      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d10:	01 c1       	rjmp	.+514    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3e 87       	std	Y+14, r19	; 0x0e
     d1a:	2d 87       	std	Y+13, r18	; 0x0d
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO_u8SetPinDirection+0x52>
     d26:	4f c0       	rjmp	.+158    	; 0xdc6 <DIO_u8SetPinDirection+0xf0>
     d28:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <DIO_u8SetPinDirection+0x66>
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <DIO_u8SetPinDirection+0x80>
     d3a:	ed c0       	rjmp	.+474    	; 0xf16 <DIO_u8SetPinDirection+0x240>
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <DIO_u8SetPinDirection+0x72>
     d46:	77 c0       	rjmp	.+238    	; 0xe36 <DIO_u8SetPinDirection+0x160>
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO_u8SetPinDirection+0x7e>
     d52:	a9 c0       	rjmp	.+338    	; 0xea6 <DIO_u8SetPinDirection+0x1d0>
     d54:	e0 c0       	rjmp	.+448    	; 0xf16 <DIO_u8SetPinDirection+0x240>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinDirection)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 87       	std	Y+12, r19	; 0x0c
     d5e:	2b 87       	std	Y+11, r18	; 0x0b
     d60:	8b 85       	ldd	r24, Y+11	; 0x0b
     d62:	9c 85       	ldd	r25, Y+12	; 0x0c
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	d1 f0       	breq	.+52     	; 0xd9c <DIO_u8SetPinDirection+0xc6>
     d68:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6c:	21 30       	cpi	r18, 0x01	; 1
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO_u8SetPinDirection+0x9e>
     d72:	d1 c0       	rjmp	.+418    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     d74:	a4 e3       	ldi	r26, 0x34	; 52
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e4 e3       	ldi	r30, 0x34	; 52
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_u8SetPinDirection+0xbc>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_u8SetPinDirection+0xb8>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	bd c0       	rjmp	.+378    	; 0xf16 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     d9c:	a4 e3       	ldi	r26, 0x34	; 52
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 e3       	ldi	r30, 0x34	; 52
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_u8SetPinDirection+0xe4>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_u8SetPinDirection+0xe0>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	a8 c0       	rjmp	.+336    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3a 87       	std	Y+10, r19	; 0x0a
     dce:	29 87       	std	Y+9, r18	; 0x09
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_u8SetPinDirection+0x136>
     dd8:	29 85       	ldd	r18, Y+9	; 0x09
     dda:	3a 85       	ldd	r19, Y+10	; 0x0a
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	31 05       	cpc	r19, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <DIO_u8SetPinDirection+0x10e>
     de2:	99 c0       	rjmp	.+306    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     de4:	a7 e3       	ldi	r26, 0x37	; 55
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e3       	ldi	r30, 0x37	; 55
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_u8SetPinDirection+0x12c>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_u8SetPinDirection+0x128>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	85 c0       	rjmp	.+266    	; 0xf16 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_u8SetPinDirection+0x154>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_u8SetPinDirection+0x150>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	70 c0       	rjmp	.+224    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	38 87       	std	Y+8, r19	; 0x08
     e3e:	2f 83       	std	Y+7, r18	; 0x07
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	d1 f0       	breq	.+52     	; 0xe7c <DIO_u8SetPinDirection+0x1a6>
     e48:	2f 81       	ldd	r18, Y+7	; 0x07
     e4a:	38 85       	ldd	r19, Y+8	; 0x08
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_u8SetPinDirection+0x17e>
     e52:	61 c0       	rjmp	.+194    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_u8SetPinDirection+0x19c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_u8SetPinDirection+0x198>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	4d c0       	rjmp	.+154    	; 0xf16 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8SetPinDirection+0x1c4>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8SetPinDirection+0x1c0>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	38 c0       	rjmp	.+112    	; 0xf16 <DIO_u8SetPinDirection+0x240>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3e 83       	std	Y+6, r19	; 0x06
     eae:	2d 83       	std	Y+5, r18	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	c9 f0       	breq	.+50     	; 0xeea <DIO_u8SetPinDirection+0x214>
     eb8:	2d 81       	ldd	r18, Y+5	; 0x05
     eba:	3e 81       	ldd	r19, Y+6	; 0x06
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	51 f5       	brne	.+84     	; 0xf16 <DIO_u8SetPinDirection+0x240>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
     ec2:	a1 e3       	ldi	r26, 0x31	; 49
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e1 e3       	ldi	r30, 0x31	; 49
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8SetPinDirection+0x20a>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8SetPinDirection+0x206>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <DIO_u8SetPinDirection+0x240>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8SetPinDirection+0x232>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8SetPinDirection+0x22e>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <DIO_u8SetPinDirection+0x240>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
     f14:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	2e 96       	adiw	r28, 0x0e	; 14
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	2e 97       	sbiw	r28, 0x0e	; 14
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	6b 83       	std	Y+3, r22	; 0x03
     f42:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <DIO_u8SetPinValue+0x26>
     f4e:	0c c1       	rjmp	.+536    	; 0x1168 <DIO_u8SetPinValue+0x23e>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 30       	cpi	r24, 0x08	; 8
     f54:	08 f0       	brcs	.+2      	; 0xf58 <DIO_u8SetPinValue+0x2e>
     f56:	08 c1       	rjmp	.+528    	; 0x1168 <DIO_u8SetPinValue+0x23e>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	21 f0       	breq	.+8      	; 0xf66 <DIO_u8SetPinValue+0x3c>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO_u8SetPinValue+0x3c>
     f64:	01 c1       	rjmp	.+514    	; 0x1168 <DIO_u8SetPinValue+0x23e>
    {
        switch (Copy_u8PortId)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3e 87       	std	Y+14, r19	; 0x0e
     f6e:	2d 87       	std	Y+13, r18	; 0x0d
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO_u8SetPinValue+0x52>
     f7a:	4f c0       	rjmp	.+158    	; 0x101a <DIO_u8SetPinValue+0xf0>
     f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	2c f4       	brge	.+10     	; 0xf90 <DIO_u8SetPinValue+0x66>
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f0       	breq	.+28     	; 0xfaa <DIO_u8SetPinValue+0x80>
     f8e:	ed c0       	rjmp	.+474    	; 0x116a <DIO_u8SetPinValue+0x240>
     f90:	2d 85       	ldd	r18, Y+13	; 0x0d
     f92:	3e 85       	ldd	r19, Y+14	; 0x0e
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <DIO_u8SetPinValue+0x72>
     f9a:	77 c0       	rjmp	.+238    	; 0x108a <DIO_u8SetPinValue+0x160>
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <DIO_u8SetPinValue+0x7e>
     fa6:	a9 c0       	rjmp	.+338    	; 0x10fa <DIO_u8SetPinValue+0x1d0>
     fa8:	e0 c0       	rjmp	.+448    	; 0x116a <DIO_u8SetPinValue+0x240>
        {
        case DIO_u8_PORTA : 
            switch (Copy_u8PinValue)
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3c 87       	std	Y+12, r19	; 0x0c
     fb2:	2b 87       	std	Y+11, r18	; 0x0b
     fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	d1 f0       	breq	.+52     	; 0xff0 <DIO_u8SetPinValue+0xc6>
     fbc:	2b 85       	ldd	r18, Y+11	; 0x0b
     fbe:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <DIO_u8SetPinValue+0x9e>
     fc6:	d1 c0       	rjmp	.+418    	; 0x116a <DIO_u8SetPinValue+0x240>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_u8SetPinValue+0xbc>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_u8SetPinValue+0xb8>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	bd c0       	rjmp	.+378    	; 0x116a <DIO_u8SetPinValue+0x240>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;  
     ff0:	ab e3       	ldi	r26, 0x3B	; 59
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e3       	ldi	r30, 0x3B	; 59
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_u8SetPinValue+0xe4>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_u8SetPinValue+0xe0>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	a8 c0       	rjmp	.+336    	; 0x116a <DIO_u8SetPinValue+0x240>
            }    
            break;
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3a 87       	std	Y+10, r19	; 0x0a
    1022:	29 87       	std	Y+9, r18	; 0x09
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	d1 f0       	breq	.+52     	; 0x1060 <DIO_u8SetPinValue+0x136>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	21 30       	cpi	r18, 0x01	; 1
    1032:	31 05       	cpc	r19, r1
    1034:	09 f0       	breq	.+2      	; 0x1038 <DIO_u8SetPinValue+0x10e>
    1036:	99 c0       	rjmp	.+306    	; 0x116a <DIO_u8SetPinValue+0x240>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0x12c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0x128>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	85 c0       	rjmp	.+266    	; 0x116a <DIO_u8SetPinValue+0x240>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinValue+0x154>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_u8SetPinValue+0x150>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	70 c0       	rjmp	.+224    	; 0x116a <DIO_u8SetPinValue+0x240>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	38 87       	std	Y+8, r19	; 0x08
    1092:	2f 83       	std	Y+7, r18	; 0x07
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	d1 f0       	breq	.+52     	; 0x10d0 <DIO_u8SetPinValue+0x1a6>
    109c:	2f 81       	ldd	r18, Y+7	; 0x07
    109e:	38 85       	ldd	r19, Y+8	; 0x08
    10a0:	21 30       	cpi	r18, 0x01	; 1
    10a2:	31 05       	cpc	r19, r1
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <DIO_u8SetPinValue+0x17e>
    10a6:	61 c0       	rjmp	.+194    	; 0x116a <DIO_u8SetPinValue+0x240>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
    10a8:	a5 e3       	ldi	r26, 0x35	; 53
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8SetPinValue+0x19c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8SetPinValue+0x198>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	4d c0       	rjmp	.+154    	; 0x116a <DIO_u8SetPinValue+0x240>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
    10d0:	a5 e3       	ldi	r26, 0x35	; 53
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_u8SetPinValue+0x1c4>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_u8SetPinValue+0x1c0>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	38 c0       	rjmp	.+112    	; 0x116a <DIO_u8SetPinValue+0x240>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3e 83       	std	Y+6, r19	; 0x06
    1102:	2d 83       	std	Y+5, r18	; 0x05
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	c9 f0       	breq	.+50     	; 0x113e <DIO_u8SetPinValue+0x214>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	21 30       	cpi	r18, 0x01	; 1
    1112:	31 05       	cpc	r19, r1
    1114:	51 f5       	brne	.+84     	; 0x116a <DIO_u8SetPinValue+0x240>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    1116:	a2 e3       	ldi	r26, 0x32	; 50
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_u8SetPinValue+0x20a>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_u8SetPinValue+0x206>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	16 c0       	rjmp	.+44     	; 0x116a <DIO_u8SetPinValue+0x240>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
    113e:	a2 e3       	ldi	r26, 0x32	; 50
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8SetPinValue+0x232>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8SetPinValue+0x22e>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	01 c0       	rjmp	.+2      	; 0x116a <DIO_u8SetPinValue+0x240>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1168:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
}
    116c:	2e 96       	adiw	r28, 0x0e	; 14
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <DIO_u8TogglePin>:

u8 DIO_u8TogglePin     (u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_u8TogglePin+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <DIO_u8TogglePin+0x8>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
    118e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7))
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	08 f0       	brcs	.+2      	; 0x119c <DIO_u8TogglePin+0x1e>
    119a:	73 c0       	rjmp	.+230    	; 0x1282 <DIO_u8TogglePin+0x104>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_u8TogglePin+0x26>
    11a2:	6f c0       	rjmp	.+222    	; 0x1282 <DIO_u8TogglePin+0x104>
    {
        switch (Copy_u8PortId)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3d 83       	std	Y+5, r19	; 0x05
    11ac:	2c 83       	std	Y+4, r18	; 0x04
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	49 f1       	breq	.+82     	; 0x120a <DIO_u8TogglePin+0x8c>
    11b8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ba:	3d 81       	ldd	r19, Y+5	; 0x05
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <DIO_u8TogglePin+0x4e>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <DIO_u8TogglePin+0x64>
    11ca:	5c c0       	rjmp	.+184    	; 0x1284 <DIO_u8TogglePin+0x106>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	71 f1       	breq	.+92     	; 0x1232 <DIO_u8TogglePin+0xb4>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	e9 f1       	breq	.+122    	; 0x125a <DIO_u8TogglePin+0xdc>
    11e0:	51 c0       	rjmp	.+162    	; 0x1284 <DIO_u8TogglePin+0x106>
        {
        case DIO_u8_PORTA :TOG_BIT(DIO_PORTA_REG,Copy_u8PinId)   ; break;
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8TogglePin+0x82>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_u8TogglePin+0x7e>
    1204:	84 27       	eor	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	3d c0       	rjmp	.+122    	; 0x1284 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTB :TOG_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8TogglePin+0xaa>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8TogglePin+0xa6>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	29 c0       	rjmp	.+82     	; 0x1284 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTC :TOG_BIT(DIO_PORTC_REG,Copy_u8PinId)   ; break;
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8TogglePin+0xd2>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8TogglePin+0xce>
    1254:	84 27       	eor	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	15 c0       	rjmp	.+42     	; 0x1284 <DIO_u8TogglePin+0x106>
        case DIO_u8_PORTD :TOG_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8TogglePin+0xfa>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8TogglePin+0xf6>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <DIO_u8TogglePin+0x106>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1282:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	28 97       	sbiw	r28, 0x08	; 8
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	6c 83       	std	Y+4, r22	; 0x04
    12ae:	5e 83       	std	Y+6, r21	; 0x06
    12b0:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	08 f0       	brcs	.+2      	; 0x12be <DIO_u8GetPinValue+0x28>
    12bc:	9f c0       	rjmp	.+318    	; 0x13fc <DIO_u8GetPinValue+0x166>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <DIO_u8GetPinValue+0x30>
    12c4:	9b c0       	rjmp	.+310    	; 0x13fc <DIO_u8GetPinValue+0x166>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <DIO_u8GetPinValue+0x3a>
    12ce:	96 c0       	rjmp	.+300    	; 0x13fc <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	38 87       	std	Y+8, r19	; 0x08
    12d8:	2f 83       	std	Y+7, r18	; 0x07
    12da:	4f 81       	ldd	r20, Y+7	; 0x07
    12dc:	58 85       	ldd	r21, Y+8	; 0x08
    12de:	41 30       	cpi	r20, 0x01	; 1
    12e0:	51 05       	cpc	r21, r1
    12e2:	a9 f1       	breq	.+106    	; 0x134e <DIO_u8GetPinValue+0xb8>
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	91 05       	cpc	r25, r1
    12ec:	34 f4       	brge	.+12     	; 0x12fa <DIO_u8GetPinValue+0x64>
    12ee:	2f 81       	ldd	r18, Y+7	; 0x07
    12f0:	38 85       	ldd	r19, Y+8	; 0x08
    12f2:	21 15       	cp	r18, r1
    12f4:	31 05       	cpc	r19, r1
    12f6:	71 f0       	breq	.+28     	; 0x1314 <DIO_u8GetPinValue+0x7e>
    12f8:	82 c0       	rjmp	.+260    	; 0x13fe <DIO_u8GetPinValue+0x168>
    12fa:	4f 81       	ldd	r20, Y+7	; 0x07
    12fc:	58 85       	ldd	r21, Y+8	; 0x08
    12fe:	42 30       	cpi	r20, 0x02	; 2
    1300:	51 05       	cpc	r21, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <DIO_u8GetPinValue+0x70>
    1304:	41 c0       	rjmp	.+130    	; 0x1388 <DIO_u8GetPinValue+0xf2>
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	98 85       	ldd	r25, Y+8	; 0x08
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <DIO_u8GetPinValue+0x7c>
    1310:	58 c0       	rjmp	.+176    	; 0x13c2 <DIO_u8GetPinValue+0x12c>
    1312:	75 c0       	rjmp	.+234    	; 0x13fe <DIO_u8GetPinValue+0x168>
        {
            case DIO_u8_PORTA :
                Local_u8PinValue = GET_BIT(DIO_PINA_REG,Copy_u8PinId);
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_u8GetPinValue+0x96>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_u8GetPinValue+0x92>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	29 f4       	brne	.+10     	; 0x1346 <DIO_u8GetPinValue+0xb0>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    133c:	ed 81       	ldd	r30, Y+5	; 0x05
    133e:	fe 81       	ldd	r31, Y+6	; 0x06
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 83       	st	Z, r24
    1344:	5c c0       	rjmp	.+184    	; 0x13fe <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1346:	ed 81       	ldd	r30, Y+5	; 0x05
    1348:	fe 81       	ldd	r31, Y+6	; 0x06
    134a:	10 82       	st	Z, r1
    134c:	58 c0       	rjmp	.+176    	; 0x13fe <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    134e:	e6 e3       	ldi	r30, 0x36	; 54
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a9 01       	movw	r20, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_u8GetPinValue+0xd0>
    1362:	55 95       	asr	r21
    1364:	47 95       	ror	r20
    1366:	8a 95       	dec	r24
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_u8GetPinValue+0xcc>
    136a:	ca 01       	movw	r24, r20
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	29 f4       	brne	.+10     	; 0x1380 <DIO_u8GetPinValue+0xea>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1376:	ed 81       	ldd	r30, Y+5	; 0x05
    1378:	fe 81       	ldd	r31, Y+6	; 0x06
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 83       	st	Z, r24
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <DIO_u8GetPinValue+0x168>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1380:	ed 81       	ldd	r30, Y+5	; 0x05
    1382:	fe 81       	ldd	r31, Y+6	; 0x06
    1384:	10 82       	st	Z, r1
    1386:	3b c0       	rjmp	.+118    	; 0x13fe <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    1388:	e3 e3       	ldi	r30, 0x33	; 51
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8GetPinValue+0x10a>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8GetPinValue+0x106>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	29 f4       	brne	.+10     	; 0x13ba <DIO_u8GetPinValue+0x124>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    13b0:	ed 81       	ldd	r30, Y+5	; 0x05
    13b2:	fe 81       	ldd	r31, Y+6	; 0x06
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 83       	st	Z, r24
    13b8:	22 c0       	rjmp	.+68     	; 0x13fe <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    13ba:	ed 81       	ldd	r30, Y+5	; 0x05
    13bc:	fe 81       	ldd	r31, Y+6	; 0x06
    13be:	10 82       	st	Z, r1
    13c0:	1e c0       	rjmp	.+60     	; 0x13fe <DIO_u8GetPinValue+0x168>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    13c2:	e0 e3       	ldi	r30, 0x30	; 48
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a9 01       	movw	r20, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8GetPinValue+0x144>
    13d6:	55 95       	asr	r21
    13d8:	47 95       	ror	r20
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_u8GetPinValue+0x140>
    13de:	ca 01       	movw	r24, r20
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <DIO_u8GetPinValue+0x15e>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    13ea:	ed 81       	ldd	r30, Y+5	; 0x05
    13ec:	fe 81       	ldd	r31, Y+6	; 0x06
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <DIO_u8GetPinValue+0x168>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    13f4:	ed 81       	ldd	r30, Y+5	; 0x05
    13f6:	fe 81       	ldd	r31, Y+6	; 0x06
    13f8:	10 82       	st	Z, r1
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <DIO_u8GetPinValue+0x168>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    13fc:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1400:	28 96       	adiw	r28, 0x08	; 8
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2d 97       	sbiw	r28, 0x0d	; 13
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	8a 83       	std	Y+2, r24	; 0x02
    1428:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_u8SetPortDirection+0x24>
    1434:	84 c0       	rjmp	.+264    	; 0x153e <DIO_u8SetPortDirection+0x12c>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 23       	and	r24, r24
    143a:	21 f0       	breq	.+8      	; 0x1444 <DIO_u8SetPortDirection+0x32>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	09 f0       	breq	.+2      	; 0x1444 <DIO_u8SetPortDirection+0x32>
    1442:	7d c0       	rjmp	.+250    	; 0x153e <DIO_u8SetPortDirection+0x12c>
    {
        switch (Copy_u8PortId)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 87       	std	Y+13, r19	; 0x0d
    144c:	2c 87       	std	Y+12, r18	; 0x0c
    144e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1450:	9d 85       	ldd	r25, Y+13	; 0x0d
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	71 f1       	breq	.+92     	; 0x14b4 <DIO_u8SetPortDirection+0xa2>
    1458:	2c 85       	ldd	r18, Y+12	; 0x0c
    145a:	3d 85       	ldd	r19, Y+13	; 0x0d
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	2c f4       	brge	.+10     	; 0x146c <DIO_u8SetPortDirection+0x5a>
    1462:	8c 85       	ldd	r24, Y+12	; 0x0c
    1464:	9d 85       	ldd	r25, Y+13	; 0x0d
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f0       	breq	.+26     	; 0x1484 <DIO_u8SetPortDirection+0x72>
    146a:	6a c0       	rjmp	.+212    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
    146c:	2c 85       	ldd	r18, Y+12	; 0x0c
    146e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	b1 f1       	breq	.+108    	; 0x14e2 <DIO_u8SetPortDirection+0xd0>
    1476:	8c 85       	ldd	r24, Y+12	; 0x0c
    1478:	9d 85       	ldd	r25, Y+13	; 0x0d
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <DIO_u8SetPortDirection+0x70>
    1480:	47 c0       	rjmp	.+142    	; 0x1510 <DIO_u8SetPortDirection+0xfe>
    1482:	5e c0       	rjmp	.+188    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
        {
            case DIO_u8_PORTA : 
                switch (Copy_u8PortDirection)
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3b 87       	std	Y+11, r19	; 0x0b
    148c:	2a 87       	std	Y+10, r18	; 0x0a
    148e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1490:	9b 85       	ldd	r25, Y+11	; 0x0b
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	59 f0       	breq	.+22     	; 0x14ac <DIO_u8SetPortDirection+0x9a>
    1496:	2a 85       	ldd	r18, Y+10	; 0x0a
    1498:	3b 85       	ldd	r19, Y+11	; 0x0b
    149a:	21 30       	cpi	r18, 0x01	; 1
    149c:	31 05       	cpc	r19, r1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <DIO_u8SetPortDirection+0x90>
    14a0:	4f c0       	rjmp	.+158    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRA_REG =0xff; break;
    14a2:	ea e3       	ldi	r30, 0x3A	; 58
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	80 83       	st	Z, r24
    14aa:	4a c0       	rjmp	.+148    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRA_REG =0x00; break;
    14ac:	ea e3       	ldi	r30, 0x3A	; 58
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	10 82       	st	Z, r1
    14b2:	46 c0       	rjmp	.+140    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	39 87       	std	Y+9, r19	; 0x09
    14bc:	28 87       	std	Y+8, r18	; 0x08
    14be:	88 85       	ldd	r24, Y+8	; 0x08
    14c0:	99 85       	ldd	r25, Y+9	; 0x09
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	51 f0       	breq	.+20     	; 0x14da <DIO_u8SetPortDirection+0xc8>
    14c6:	28 85       	ldd	r18, Y+8	; 0x08
    14c8:	39 85       	ldd	r19, Y+9	; 0x09
    14ca:	21 30       	cpi	r18, 0x01	; 1
    14cc:	31 05       	cpc	r19, r1
    14ce:	c1 f5       	brne	.+112    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	80 83       	st	Z, r24
    14d8:	33 c0       	rjmp	.+102    	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	10 82       	st	Z, r1
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3f 83       	std	Y+7, r19	; 0x07
    14ea:	2e 83       	std	Y+6, r18	; 0x06
    14ec:	8e 81       	ldd	r24, Y+6	; 0x06
    14ee:	9f 81       	ldd	r25, Y+7	; 0x07
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	51 f0       	breq	.+20     	; 0x1508 <DIO_u8SetPortDirection+0xf6>
    14f4:	2e 81       	ldd	r18, Y+6	; 0x06
    14f6:	3f 81       	ldd	r19, Y+7	; 0x07
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f5       	brne	.+66     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
    14fe:	e4 e3       	ldi	r30, 0x34	; 52
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	80 83       	st	Z, r24
    1506:	1c c0       	rjmp	.+56     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	10 82       	st	Z, r1
    150e:	18 c0       	rjmp	.+48     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3d 83       	std	Y+5, r19	; 0x05
    1518:	2c 83       	std	Y+4, r18	; 0x04
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	51 f0       	breq	.+20     	; 0x1536 <DIO_u8SetPortDirection+0x124>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	21 30       	cpi	r18, 0x01	; 1
    1528:	31 05       	cpc	r19, r1
    152a:	51 f4       	brne	.+20     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
    152c:	e1 e3       	ldi	r30, 0x31	; 49
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	80 83       	st	Z, r24
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <DIO_u8SetPortDirection+0x12e>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
    1536:	e1 e3       	ldi	r30, 0x31	; 49
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	10 82       	st	Z, r1
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <DIO_u8SetPortDirection+0x12e>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    153e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1540:	89 81       	ldd	r24, Y+1	; 0x01

}
    1542:	2d 96       	adiw	r28, 0x0d	; 13
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_u8SetPortValue+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <DIO_u8SetPortValue+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3d 83       	std	Y+5, r19	; 0x05
    1572:	2c 83       	std	Y+4, r18	; 0x04
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	d1 f0       	breq	.+52     	; 0x15b2 <DIO_u8SetPortValue+0x5e>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <DIO_u8SetPortValue+0x3e>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <DIO_u8SetPortValue+0x54>
    1590:	1f c0       	rjmp	.+62     	; 0x15d0 <DIO_u8SetPortValue+0x7c>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <DIO_u8SetPortValue+0x68>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <DIO_u8SetPortValue+0x72>
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <DIO_u8SetPortValue+0x7c>
    {
        case DIO_u8_PORTA : DIO_PORTA_REG = Copy_u8PortValue; break;
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	80 83       	st	Z, r24
    15b0:	10 c0       	rjmp	.+32     	; 0x15d2 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
    15b2:	e8 e3       	ldi	r30, 0x38	; 56
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	80 83       	st	Z, r24
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
    15bc:	e5 e3       	ldi	r30, 0x35	; 53
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	80 83       	st	Z, r24
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	80 83       	st	Z, r24
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <DIO_u8SetPortValue+0x7e>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
    15d0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Dio_u8GetPortValue+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <Dio_u8GetPortValue+0x8>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <Dio_u8GetPortValue+0xa>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	7c 83       	std	Y+4, r23	; 0x04
    15f6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	08 f4       	brcc	.+2      	; 0x1604 <Dio_u8GetPortValue+0x20>
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <Dio_u8GetPortValue+0x9e>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	d9 f1       	breq	.+118    	; 0x1682 <Dio_u8GetPortValue+0x9e>
    {
        switch (Copy_u8PortId)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3e 83       	std	Y+6, r19	; 0x06
    1614:	2d 83       	std	Y+5, r18	; 0x05
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	e1 f0       	breq	.+56     	; 0x1658 <Dio_u8GetPortValue+0x74>
    1620:	2d 81       	ldd	r18, Y+5	; 0x05
    1622:	3e 81       	ldd	r19, Y+6	; 0x06
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <Dio_u8GetPortValue+0x50>
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	61 f0       	breq	.+24     	; 0x164a <Dio_u8GetPortValue+0x66>
    1632:	28 c0       	rjmp	.+80     	; 0x1684 <Dio_u8GetPortValue+0xa0>
    1634:	2d 81       	ldd	r18, Y+5	; 0x05
    1636:	3e 81       	ldd	r19, Y+6	; 0x06
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	a1 f0       	breq	.+40     	; 0x1666 <Dio_u8GetPortValue+0x82>
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	b1 f0       	breq	.+44     	; 0x1674 <Dio_u8GetPortValue+0x90>
    1648:	1d c0       	rjmp	.+58     	; 0x1684 <Dio_u8GetPortValue+0xa0>
        {
        case DIO_u8_PORTA :*Copy_Pu8PortValue = DIO_PINA_REG; break;
    164a:	e9 e3       	ldi	r30, 0x39	; 57
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	eb 81       	ldd	r30, Y+3	; 0x03
    1652:	fc 81       	ldd	r31, Y+4	; 0x04
    1654:	80 83       	st	Z, r24
    1656:	16 c0       	rjmp	.+44     	; 0x1684 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
    1658:	e6 e3       	ldi	r30, 0x36	; 54
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	80 83       	st	Z, r24
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
    1666:	e3 e3       	ldi	r30, 0x33	; 51
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	80 83       	st	Z, r24
    1672:	08 c0       	rjmp	.+16     	; 0x1684 <Dio_u8GetPortValue+0xa0>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
    1674:	e0 e3       	ldi	r30, 0x30	; 48
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	eb 81       	ldd	r30, Y+3	; 0x03
    167c:	fc 81       	ldd	r31, Y+4	; 0x04
    167e:	80 83       	st	Z, r24
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <Dio_u8GetPortValue+0xa0>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1682:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	26 96       	adiw	r28, 0x06	; 6
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <KPD_voidInit>:
u8 KPD_Au8Rows[4]= {KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
u8 KPD_Au8Cols[4]= {KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
u8 KPD_Au8ReturnKey[4][4]=KPD_u8_KEY_VAL;

void KPD_voidInit(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinDirection(KPD_u8_ROWPORT,KPD_u8_R0_PIN,DIO_u8_OUTPUT);
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	65 e0       	ldi	r22, 0x05	; 5
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_ROWPORT,KPD_u8_R1_PIN,DIO_u8_OUTPUT);
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_ROWPORT,KPD_u8_R2_PIN,DIO_u8_OUTPUT);
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	63 e0       	ldi	r22, 0x03	; 3
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_ROWPORT,KPD_u8_R3_PIN,DIO_u8_OUTPUT);
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_u8_R0_PIN,DIO_u8_HIGH);
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	65 e0       	ldi	r22, 0x05	; 5
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_u8_R1_PIN,DIO_u8_HIGH);
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	64 e0       	ldi	r22, 0x04	; 4
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_u8_R2_PIN,DIO_u8_HIGH);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	63 e0       	ldi	r22, 0x03	; 3
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_u8_R3_PIN,DIO_u8_HIGH);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>

    DIO_u8SetPinDirection(KPD_u8_COLPORT,KPD_u8_C0_PIN,DIO_u8_INPUT);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	67 e0       	ldi	r22, 0x07	; 7
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_COLPORT,KPD_u8_C1_PIN,DIO_u8_INPUT);
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	66 e0       	ldi	r22, 0x06	; 6
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_COLPORT,KPD_u8_C2_PIN,DIO_u8_INPUT);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	65 e0       	ldi	r22, 0x05	; 5
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_COLPORT,KPD_u8_C3_PIN,DIO_u8_INPUT);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	63 e0       	ldi	r22, 0x03	; 3
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_u8SetPinDirection>


}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <KPD_u8GetKey>:

u8 KPD_u8GetKey(u8 *KPD_Pu8ReturnKey)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	65 97       	sbiw	r28, 0x15	; 21
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	9d 8b       	std	Y+21, r25	; 0x15
    1734:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8REturnState  = STD_TYPE_OK;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter  = 0 ;
    173a:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8ColsCounter  = 0 ;
    173c:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8ReturnSwitch = 1 ;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8BreakFlag    = 0 ;     /* we use it to terminate the two for loops as break inside*/
    1742:	1f 86       	std	Y+15, r1	; 0x0f
                                     /* the cols loop will not terminate rows loop*/
    if(NULL != KPD_Pu8ReturnKey)
    1744:	8c 89       	ldd	r24, Y+20	; 0x14
    1746:	9d 89       	ldd	r25, Y+21	; 0x15
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	09 f4       	brne	.+2      	; 0x174e <KPD_u8GetKey+0x30>
    174c:	e1 c0       	rjmp	.+450    	; 0x1910 <KPD_u8GetKey+0x1f2>
    {
    	/*Initial value to indicate if no key pressed*/
    	*KPD_Pu8ReturnKey = KPD_u8_KEY_NOT_PRESSED;
    174e:	ec 89       	ldd	r30, Y+20	; 0x14
    1750:	fd 89       	ldd	r31, Y+21	; 0x15
    1752:	8a e0       	ldi	r24, 0x0A	; 10
    1754:	80 83       	st	Z, r24
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    1756:	19 8a       	std	Y+17, r1	; 0x11
    1758:	d6 c0       	rjmp	.+428    	; 0x1906 <KPD_u8GetKey+0x1e8>
        {
            /*write low on pin*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);
    175a:	89 89       	ldd	r24, Y+17	; 0x11
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	fc 01       	movw	r30, r24
    1762:	e5 59       	subi	r30, 0x95	; 149
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	90 81       	ld	r25, Z
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	69 2f       	mov	r22, r25
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
            /*read the cols values*/
            for(Local_u8ColsCounter = 0;Local_u8ColsCounter<=3;Local_u8ColsCounter++)
    1772:	18 8a       	std	Y+16, r1	; 0x10
    1774:	b2 c0       	rjmp	.+356    	; 0x18da <KPD_u8GetKey+0x1bc>
            {
                
                DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
    1776:	88 89       	ldd	r24, Y+16	; 0x10
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	fc 01       	movw	r30, r24
    177e:	e1 59       	subi	r30, 0x91	; 145
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	90 81       	ld	r25, Z
    1784:	9e 01       	movw	r18, r28
    1786:	2d 5e       	subi	r18, 0xED	; 237
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	69 2f       	mov	r22, r25
    178e:	a9 01       	movw	r20, r18
    1790:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_u8GetPinValue>
                
                if(DIO_u8_LOW == Local_u8ReturnSwitch)
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	88 23       	and	r24, r24
    1798:	09 f0       	breq	.+2      	; 0x179c <KPD_u8GetKey+0x7e>
    179a:	9c c0       	rjmp	.+312    	; 0x18d4 <KPD_u8GetKey+0x1b6>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 ea       	ldi	r26, 0xA0	; 160
    17a2:	b1 e4       	ldi	r27, 0x41	; 65
    17a4:	8b 87       	std	Y+11, r24	; 0x0b
    17a6:	9c 87       	std	Y+12, r25	; 0x0c
    17a8:	ad 87       	std	Y+13, r26	; 0x0d
    17aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a e7       	ldi	r20, 0x7A	; 122
    17ba:	53 e4       	ldi	r21, 0x43	; 67
    17bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8f 83       	std	Y+7, r24	; 0x07
    17c6:	98 87       	std	Y+8, r25	; 0x08
    17c8:	a9 87       	std	Y+9, r26	; 0x09
    17ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <KPD_u8GetKey+0xd0>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    17ec:	3f c0       	rjmp	.+126    	; 0x186c <KPD_u8GetKey+0x14e>
	else if (__tmp > 65535)
    17ee:	6f 81       	ldd	r22, Y+7	; 0x07
    17f0:	78 85       	ldd	r23, Y+8	; 0x08
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	4c f5       	brge	.+82     	; 0x1858 <KPD_u8GetKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	0f c0       	rjmp	.+30     	; 0x184e <KPD_u8GetKey+0x130>
    1830:	89 e1       	ldi	r24, 0x19	; 25
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <KPD_u8GetKey+0x11e>
    1840:	9c 83       	std	Y+4, r25	; 0x04
    1842:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
    1846:	9e 81       	ldd	r25, Y+6	; 0x06
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <KPD_u8GetKey+0x112>
    1856:	24 c0       	rjmp	.+72     	; 0x18a0 <KPD_u8GetKey+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <KPD_u8GetKey+0x15a>
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <KPD_u8GetKey+0x182>
                {
                    _delay_ms(20);   /*debouncing*/
                     /*one press = one output */
                    while(DIO_u8_LOW == Local_u8ReturnSwitch)
                    {
                        DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
    1882:	88 89       	ldd	r24, Y+16	; 0x10
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	e1 59       	subi	r30, 0x91	; 145
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	90 81       	ld	r25, Z
    1890:	9e 01       	movw	r18, r28
    1892:	2d 5e       	subi	r18, 0xED	; 237
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	69 2f       	mov	r22, r25
    189a:	a9 01       	movw	r20, r18
    189c:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_u8GetPinValue>
                
                if(DIO_u8_LOW == Local_u8ReturnSwitch)
                {
                    _delay_ms(20);   /*debouncing*/
                     /*one press = one output */
                    while(DIO_u8_LOW == Local_u8ReturnSwitch)
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	88 23       	and	r24, r24
    18a4:	71 f3       	breq	.-36     	; 0x1882 <KPD_u8GetKey+0x164>
                    {
                        DIO_u8GetPinValue(KPD_u8_COLPORT,KPD_Au8Cols[Local_u8ColsCounter],&Local_u8ReturnSwitch);
                    }
                    /*return the value and terminate the function*/
                    *KPD_Pu8ReturnKey =KPD_Au8ReturnKey[Local_u8RowsCounter][Local_u8ColsCounter] ;
    18a6:	89 89       	ldd	r24, Y+17	; 0x11
    18a8:	48 2f       	mov	r20, r24
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	88 89       	ldd	r24, Y+16	; 0x10
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	ca 01       	movw	r24, r20
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	82 0f       	add	r24, r18
    18be:	93 1f       	adc	r25, r19
    18c0:	fc 01       	movw	r30, r24
    18c2:	ed 58       	subi	r30, 0x8D	; 141
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	ec 89       	ldd	r30, Y+20	; 0x14
    18ca:	fd 89       	ldd	r31, Y+21	; 0x15
    18cc:	80 83       	st	Z, r24
                    Local_u8BreakFlag = 1; break; // this to break in the row for loop
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	8f 87       	std	Y+15, r24	; 0x0f
    18d2:	07 c0       	rjmp	.+14     	; 0x18e2 <KPD_u8GetKey+0x1c4>
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
        {
            /*write low on pin*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);
            /*read the cols values*/
            for(Local_u8ColsCounter = 0;Local_u8ColsCounter<=3;Local_u8ColsCounter++)
    18d4:	88 89       	ldd	r24, Y+16	; 0x10
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	88 8b       	std	Y+16, r24	; 0x10
    18da:	88 89       	ldd	r24, Y+16	; 0x10
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <KPD_u8GetKey+0x1c4>
    18e0:	4a cf       	rjmp	.-364    	; 0x1776 <KPD_u8GetKey+0x58>
                    Local_u8BreakFlag = 1; break; // this to break in the row for loop
                }
                
            }
            /*deactivate the row*/
            DIO_u8SetPinValue(KPD_u8_ROWPORT,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_HIGH);
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	e5 59       	subi	r30, 0x95	; 149
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	90 81       	ld	r25, Z
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	69 2f       	mov	r22, r25
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
            if(Local_u8BreakFlag)
    18fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fc:	88 23       	and	r24, r24
    18fe:	49 f4       	brne	.+18     	; 0x1912 <KPD_u8GetKey+0x1f4>
                                     /* the cols loop will not terminate rows loop*/
    if(NULL != KPD_Pu8ReturnKey)
    {
    	/*Initial value to indicate if no key pressed*/
    	*KPD_Pu8ReturnKey = KPD_u8_KEY_NOT_PRESSED;
        for (Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    1900:	89 89       	ldd	r24, Y+17	; 0x11
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	89 8b       	std	Y+17, r24	; 0x11
    1906:	89 89       	ldd	r24, Y+17	; 0x11
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	08 f4       	brcc	.+2      	; 0x190e <KPD_u8GetKey+0x1f0>
    190c:	26 cf       	rjmp	.-436    	; 0x175a <KPD_u8GetKey+0x3c>
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <KPD_u8GetKey+0x1f4>
            }
        }
    }
    else 
    {
        Local_u8REturnState = STD_TYPE_NOK;
    1910:	1a 8a       	std	Y+18, r1	; 0x12
    }

    
    return Local_u8REturnState;
    1912:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1914:	65 96       	adiw	r28, 0x15	; 21
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <LCD_voidEnable>:
void LCD_4bitCmndDivider(u8 Copy_u8Cmnd);
void LCD_4bitCharDivider(u8 Copy_u8Cmnd);


void LCD_voidEnable(void)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	68 97       	sbiw	r28, 0x18	; 24
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 e8       	ldi	r26, 0x80	; 128
    194a:	bf e3       	ldi	r27, 0x3F	; 63
    194c:	8d 8b       	std	Y+21, r24	; 0x15
    194e:	9e 8b       	std	Y+22, r25	; 0x16
    1950:	af 8b       	std	Y+23, r26	; 0x17
    1952:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	2b ea       	ldi	r18, 0xAB	; 171
    195e:	3a ea       	ldi	r19, 0xAA	; 170
    1960:	4a ea       	ldi	r20, 0xAA	; 170
    1962:	5e e3       	ldi	r21, 0x3E	; 62
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	89 8b       	std	Y+17, r24	; 0x11
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	ab 8b       	std	Y+19, r26	; 0x13
    1972:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1974:	69 89       	ldd	r22, Y+17	; 0x11
    1976:	7a 89       	ldd	r23, Y+18	; 0x12
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	1c f4       	brge	.+6      	; 0x1992 <LCD_voidEnable+0x6c>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	88 8b       	std	Y+16, r24	; 0x10
    1990:	91 c0       	rjmp	.+290    	; 0x1ab4 <LCD_voidEnable+0x18e>
	else if (__tmp > 255)
    1992:	69 89       	ldd	r22, Y+17	; 0x11
    1994:	7a 89       	ldd	r23, Y+18	; 0x12
    1996:	8b 89       	ldd	r24, Y+19	; 0x13
    1998:	9c 89       	ldd	r25, Y+20	; 0x14
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	53 e4       	ldi	r21, 0x43	; 67
    19a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <LCD_voidEnable+0x86>
    19aa:	7b c0       	rjmp	.+246    	; 0x1aa2 <LCD_voidEnable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    19ac:	6d 89       	ldd	r22, Y+21	; 0x15
    19ae:	7e 89       	ldd	r23, Y+22	; 0x16
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	98 8d       	ldd	r25, Y+24	; 0x18
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8c 87       	std	Y+12, r24	; 0x0c
    19c6:	9d 87       	std	Y+13, r25	; 0x0d
    19c8:	ae 87       	std	Y+14, r26	; 0x0e
    19ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    19ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	88 87       	std	Y+8, r24	; 0x08
    19e6:	99 87       	std	Y+9, r25	; 0x09
    19e8:	aa 87       	std	Y+10, r26	; 0x0a
    19ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19ec:	68 85       	ldd	r22, Y+8	; 0x08
    19ee:	79 85       	ldd	r23, Y+9	; 0x09
    19f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <LCD_voidEnable+0xe8>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9f 83       	std	Y+7, r25	; 0x07
    1a0a:	8e 83       	std	Y+6, r24	; 0x06
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <LCD_voidEnable+0x166>
	else if (__tmp > 65535)
    1a0e:	68 85       	ldd	r22, Y+8	; 0x08
    1a10:	79 85       	ldd	r23, Y+9	; 0x09
    1a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <LCD_voidEnable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9f 83       	std	Y+7, r25	; 0x07
    1a4c:	8e 83       	std	Y+6, r24	; 0x06
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <LCD_voidEnable+0x148>
    1a50:	89 e1       	ldi	r24, 0x19	; 25
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9d 83       	std	Y+5, r25	; 0x05
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_voidEnable+0x136>
    1a60:	9d 83       	std	Y+5, r25	; 0x05
    1a62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9f 83       	std	Y+7, r25	; 0x07
    1a6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <LCD_voidEnable+0x12a>
    1a76:	24 c0       	rjmp	.+72     	; 0x1ac0 <LCD_voidEnable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	68 85       	ldd	r22, Y+8	; 0x08
    1a7a:	79 85       	ldd	r23, Y+9	; 0x09
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9f 83       	std	Y+7, r25	; 0x07
    1a8a:	8e 83       	std	Y+6, r24	; 0x06
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	9b 83       	std	Y+3, r25	; 0x03
    1a92:	8a 83       	std	Y+2, r24	; 0x02
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_voidEnable+0x172>
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_voidEnable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa2:	69 89       	ldd	r22, Y+17	; 0x11
    1aa4:	7a 89       	ldd	r23, Y+18	; 0x12
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	88 8b       	std	Y+16, r24	; 0x10
    1ab4:	88 89       	ldd	r24, Y+16	; 0x10
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	8a 95       	dec	r24
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_voidEnable+0x194>
    1abe:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW); 
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
}
    1aca:	68 96       	adiw	r28, 0x18	; 24
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <LCD_4bitCmndDivider>:

void LCD_4bitCmndDivider(u8 Copy_u8Cmnd)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	6d 97       	sbiw	r28, 0x1d	; 29
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitCmnd(Copy_u8Cmnd);
    1af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidSend4BitCmnd>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e8       	ldi	r26, 0x80	; 128
    1afe:	bf e3       	ldi	r27, 0x3F	; 63
    1b00:	89 8f       	std	Y+25, r24	; 0x19
    1b02:	9a 8f       	std	Y+26, r25	; 0x1a
    1b04:	ab 8f       	std	Y+27, r26	; 0x1b
    1b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	53 e4       	ldi	r21, 0x43	; 67
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8d 8b       	std	Y+21, r24	; 0x15
    1b22:	9e 8b       	std	Y+22, r25	; 0x16
    1b24:	af 8b       	std	Y+23, r26	; 0x17
    1b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b28:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <LCD_4bitCmndDivider+0x6e>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <LCD_4bitCmndDivider+0xec>
	else if (__tmp > 65535)
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <LCD_4bitCmndDivider+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	69 8d       	ldd	r22, Y+25	; 0x19
    1b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <LCD_4bitCmndDivider+0xce>
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9a 8b       	std	Y+18, r25	; 0x12
    1b92:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b94:	89 89       	ldd	r24, Y+17	; 0x11
    1b96:	9a 89       	ldd	r25, Y+18	; 0x12
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_4bitCmndDivider+0xbc>
    1b9c:	9a 8b       	std	Y+18, r25	; 0x12
    1b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <LCD_4bitCmndDivider+0xb0>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <LCD_4bitCmndDivider+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bba:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	98 8b       	std	Y+16, r25	; 0x10
    1bce:	8f 87       	std	Y+15, r24	; 0x0f
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	98 89       	ldd	r25, Y+16	; 0x10
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_4bitCmndDivider+0xf8>
    1bd8:	98 8b       	std	Y+16, r25	; 0x10
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitCmnd(Copy_u8Cmnd<<4);
    1bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bde:	82 95       	swap	r24
    1be0:	80 7f       	andi	r24, 0xF0	; 240
    1be2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidSend4BitCmnd>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e8       	ldi	r26, 0x80	; 128
    1bec:	bf e3       	ldi	r27, 0x3F	; 63
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	ad 87       	std	Y+13, r26	; 0x0d
    1bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a e7       	ldi	r20, 0x7A	; 122
    1c04:	53 e4       	ldi	r21, 0x43	; 67
    1c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	98 87       	std	Y+8, r25	; 0x08
    1c12:	a9 87       	std	Y+9, r26	; 0x09
    1c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <LCD_4bitCmndDivider+0x15c>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <LCD_4bitCmndDivider+0x1da>
	else if (__tmp > 65535)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	4c f5       	brge	.+82     	; 0x1ca2 <LCD_4bitCmndDivider+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <LCD_4bitCmndDivider+0x1bc>
    1c7a:	89 e1       	ldi	r24, 0x19	; 25
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_4bitCmndDivider+0x1aa>
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	69 f7       	brne	.-38     	; 0x1c7a <LCD_4bitCmndDivider+0x19e>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <LCD_4bitCmndDivider+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_4bitCmndDivider+0x1e6>
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1cca:	6d 96       	adiw	r28, 0x1d	; 29
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <LCD_4bitCharDivider>:

void LCD_4bitCharDivider(u8 Copy_u8Cmnd)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	6d 97       	sbiw	r28, 0x1d	; 29
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitChar(Copy_u8Cmnd);
    1cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidSend4BitChar>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e8       	ldi	r26, 0x80	; 128
    1d02:	bf e3       	ldi	r27, 0x3F	; 63
    1d04:	89 8f       	std	Y+25, r24	; 0x19
    1d06:	9a 8f       	std	Y+26, r25	; 0x1a
    1d08:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8d 8b       	std	Y+21, r24	; 0x15
    1d26:	9e 8b       	std	Y+22, r25	; 0x16
    1d28:	af 8b       	std	Y+23, r26	; 0x17
    1d2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d30:	8f 89       	ldd	r24, Y+23	; 0x17
    1d32:	98 8d       	ldd	r25, Y+24	; 0x18
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <LCD_4bitCharDivider+0x72>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <LCD_4bitCharDivider+0xf0>
	else if (__tmp > 65535)
    1d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d50:	7e 89       	ldd	r23, Y+22	; 0x16
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <LCD_4bitCharDivider+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	69 8d       	ldd	r22, Y+25	; 0x19
    1d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9c 8b       	std	Y+20, r25	; 0x14
    1d8c:	8b 8b       	std	Y+19, r24	; 0x13
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <LCD_4bitCharDivider+0xd2>
    1d90:	89 e1       	ldi	r24, 0x19	; 25
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9a 8b       	std	Y+18, r25	; 0x12
    1d96:	89 8b       	std	Y+17, r24	; 0x11
    1d98:	89 89       	ldd	r24, Y+17	; 0x11
    1d9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_4bitCharDivider+0xc0>
    1da0:	9a 8b       	std	Y+18, r25	; 0x12
    1da2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9c 8b       	std	Y+20, r25	; 0x14
    1dac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <LCD_4bitCharDivider+0xb4>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <LCD_4bitCharDivider+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14
    1dca:	8b 8b       	std	Y+19, r24	; 0x13
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	98 8b       	std	Y+16, r25	; 0x10
    1dd2:	8f 87       	std	Y+15, r24	; 0x0f
    1dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd6:	98 89       	ldd	r25, Y+16	; 0x10
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_4bitCharDivider+0xfc>
    1ddc:	98 8b       	std	Y+16, r25	; 0x10
    1dde:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitChar(Copy_u8Cmnd<<4);
    1de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	82 95       	swap	r24
    1de8:	92 95       	swap	r25
    1dea:	90 7f       	andi	r25, 0xF0	; 240
    1dec:	98 27       	eor	r25, r24
    1dee:	80 7f       	andi	r24, 0xF0	; 240
    1df0:	98 27       	eor	r25, r24
    1df2:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_voidSend4BitChar>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e8       	ldi	r26, 0x80	; 128
    1dfc:	bf e3       	ldi	r27, 0x3F	; 63
    1dfe:	8b 87       	std	Y+11, r24	; 0x0b
    1e00:	9c 87       	std	Y+12, r25	; 0x0c
    1e02:	ad 87       	std	Y+13, r26	; 0x0d
    1e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	53 e4       	ldi	r21, 0x43	; 67
    1e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
    1e20:	98 87       	std	Y+8, r25	; 0x08
    1e22:	a9 87       	std	Y+9, r26	; 0x09
    1e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <LCD_4bitCharDivider+0x16c>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <LCD_4bitCharDivider+0x1ea>
	else if (__tmp > 65535)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <LCD_4bitCharDivider+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <LCD_4bitCharDivider+0x1cc>
    1e8a:	89 e1       	ldi	r24, 0x19	; 25
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_4bitCharDivider+0x1ba>
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <LCD_4bitCharDivider+0x1ae>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <LCD_4bitCharDivider+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_4bitCharDivider+0x1f6>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1eda:	6d 96       	adiw	r28, 0x1d	; 29
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LCD_voidSend4BitCmnd>:

void LCD_voidSend4BitCmnd(u8 Copy_u8Cmnd)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	63 e0       	ldi	r22, 0x03	; 3
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    1f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0e:	98 2f       	mov	r25, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	99 27       	eor	r25, r25
    1f14:	99 1f       	adc	r25, r25
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	64 e0       	ldi	r22, 0x04	; 4
    1f1a:	49 2f       	mov	r20, r25
    1f1c:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	82 95       	swap	r24
    1f24:	86 95       	lsr	r24
    1f26:	86 95       	lsr	r24
    1f28:	83 70       	andi	r24, 0x03	; 3
    1f2a:	98 2f       	mov	r25, r24
    1f2c:	91 70       	andi	r25, 0x01	; 1
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	49 2f       	mov	r20, r25
    1f34:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    1f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3a:	82 95       	swap	r24
    1f3c:	86 95       	lsr	r24
    1f3e:	87 70       	andi	r24, 0x07	; 7
    1f40:	98 2f       	mov	r25, r24
    1f42:	91 70       	andi	r25, 0x01	; 1
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	49 2f       	mov	r20, r25
    1f4a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    1f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f50:	82 95       	swap	r24
    1f52:	8f 70       	andi	r24, 0x0F	; 15
    1f54:	98 2f       	mov	r25, r24
    1f56:	91 70       	andi	r25, 0x01	; 1
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	49 2f       	mov	r20, r25
    1f5e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    LCD_voidEnable();
    1f62:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_voidEnable>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e8       	ldi	r26, 0x80	; 128
    1f6c:	bf e3       	ldi	r27, 0x3F	; 63
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a e7       	ldi	r20, 0x7A	; 122
    1f84:	53 e4       	ldi	r21, 0x43	; 67
    1f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <LCD_voidSend4BitCmnd+0xcc>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <LCD_voidSend4BitCmnd+0x14a>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <LCD_voidSend4BitCmnd+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_voidSend4BitCmnd+0x12c>
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_voidSend4BitCmnd+0x11a>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <LCD_voidSend4BitCmnd+0x10e>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LCD_voidSend4BitCmnd+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_voidSend4BitCmnd+0x156>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    204a:	2f 96       	adiw	r28, 0x0f	; 15
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_voidSend4BitChar>:

void LCD_voidSend4BitChar(u8 Copy_u8Cmnd)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	2f 97       	sbiw	r28, 0x0f	; 15
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	63 e0       	ldi	r22, 0x03	; 3
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 2f       	mov	r25, r24
    2080:	99 1f       	adc	r25, r25
    2082:	99 27       	eor	r25, r25
    2084:	99 1f       	adc	r25, r25
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	64 e0       	ldi	r22, 0x04	; 4
    208a:	49 2f       	mov	r20, r25
    208c:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	82 95       	swap	r24
    2094:	86 95       	lsr	r24
    2096:	86 95       	lsr	r24
    2098:	83 70       	andi	r24, 0x03	; 3
    209a:	98 2f       	mov	r25, r24
    209c:	91 70       	andi	r25, 0x01	; 1
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	62 e0       	ldi	r22, 0x02	; 2
    20a2:	49 2f       	mov	r20, r25
    20a4:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    20a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20aa:	82 95       	swap	r24
    20ac:	86 95       	lsr	r24
    20ae:	87 70       	andi	r24, 0x07	; 7
    20b0:	98 2f       	mov	r25, r24
    20b2:	91 70       	andi	r25, 0x01	; 1
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	49 2f       	mov	r20, r25
    20ba:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    20be:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c0:	82 95       	swap	r24
    20c2:	8f 70       	andi	r24, 0x0F	; 15
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 70       	andi	r25, 0x01	; 1
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    LCD_voidEnable();
    20d2:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_voidEnable>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e8       	ldi	r26, 0x80	; 128
    20dc:	bf e3       	ldi	r27, 0x3F	; 63
    20de:	8b 87       	std	Y+11, r24	; 0x0b
    20e0:	9c 87       	std	Y+12, r25	; 0x0c
    20e2:	ad 87       	std	Y+13, r26	; 0x0d
    20e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4a e7       	ldi	r20, 0x7A	; 122
    20f4:	53 e4       	ldi	r21, 0x43	; 67
    20f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8f 83       	std	Y+7, r24	; 0x07
    2100:	98 87       	std	Y+8, r25	; 0x08
    2102:	a9 87       	std	Y+9, r26	; 0x09
    2104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_voidSend4BitChar+0xcc>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <LCD_voidSend4BitChar+0x14a>
	else if (__tmp > 65535)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <LCD_voidSend4BitChar+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_voidSend4BitChar+0x12c>
    216a:	89 e1       	ldi	r24, 0x19	; 25
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_voidSend4BitChar+0x11a>
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_voidSend4BitChar+0x10e>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <LCD_voidSend4BitChar+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_voidSend4BitChar+0x156>
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    21ba:	2f 96       	adiw	r28, 0x0f	; 15
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <LCD_voidWriteCmnd>:


void LCD_voidWriteCmnd(u8 Copy_u8Cmnd)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	89 83       	std	Y+1, r24	; 0x01
    /* 4- latching E  for "Tpw" to pass data from i\o buffer to registers*/
    LCD_voidEnable();
    #endif
    /*4 bit init*/
    #if LCD4BIT
    LCD_4bitCmndDivider(Copy_u8Cmnd);
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_4bitCmndDivider>
    #endif
}
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
    #endif
    /* 4 bit */
    #if LCD4BIT    
    /*4 bit */
    
    LCD_4bitCharDivider(Copy_u8Char);
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_4bitCharDivider>
      
    #endif 
}
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <LCD_voidInit>:

void LCD_voidInit(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	e8 97       	sbiw	r28, 0x38	; 56
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 ea       	ldi	r26, 0xA0	; 160
    221a:	b1 e4       	ldi	r27, 0x41	; 65
    221c:	8d ab       	std	Y+53, r24	; 0x35
    221e:	9e ab       	std	Y+54, r25	; 0x36
    2220:	af ab       	std	Y+55, r26	; 0x37
    2222:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6d a9       	ldd	r22, Y+53	; 0x35
    2226:	7e a9       	ldd	r23, Y+54	; 0x36
    2228:	8f a9       	ldd	r24, Y+55	; 0x37
    222a:	98 ad       	ldd	r25, Y+56	; 0x38
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	53 e4       	ldi	r21, 0x43	; 67
    2234:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	89 ab       	std	Y+49, r24	; 0x31
    223e:	9a ab       	std	Y+50, r25	; 0x32
    2240:	ab ab       	std	Y+51, r26	; 0x33
    2242:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2244:	69 a9       	ldd	r22, Y+49	; 0x31
    2246:	7a a9       	ldd	r23, Y+50	; 0x32
    2248:	8b a9       	ldd	r24, Y+51	; 0x33
    224a:	9c a9       	ldd	r25, Y+52	; 0x34
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_voidInit+0x66>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	98 ab       	std	Y+48, r25	; 0x30
    2262:	8f a7       	std	Y+47, r24	; 0x2f
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2266:	69 a9       	ldd	r22, Y+49	; 0x31
    2268:	7a a9       	ldd	r23, Y+50	; 0x32
    226a:	8b a9       	ldd	r24, Y+51	; 0x33
    226c:	9c a9       	ldd	r25, Y+52	; 0x34
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6d a9       	ldd	r22, Y+53	; 0x35
    2280:	7e a9       	ldd	r23, Y+54	; 0x36
    2282:	8f a9       	ldd	r24, Y+55	; 0x37
    2284:	98 ad       	ldd	r25, Y+56	; 0x38
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	98 ab       	std	Y+48, r25	; 0x30
    22a4:	8f a7       	std	Y+47, r24	; 0x2f
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_voidInit+0xc6>
    22a8:	89 e1       	ldi	r24, 0x19	; 25
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e a7       	std	Y+46, r25	; 0x2e
    22ae:	8d a7       	std	Y+45, r24	; 0x2d
    22b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_voidInit+0xb4>
    22b8:	9e a7       	std	Y+46, r25	; 0x2e
    22ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	98 ab       	std	Y+48, r25	; 0x30
    22c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_voidInit+0xa8>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	69 a9       	ldd	r22, Y+49	; 0x31
    22d2:	7a a9       	ldd	r23, Y+50	; 0x32
    22d4:	8b a9       	ldd	r24, Y+51	; 0x33
    22d6:	9c a9       	ldd	r25, Y+52	; 0x34
    22d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	98 ab       	std	Y+48, r25	; 0x30
    22e2:	8f a7       	std	Y+47, r24	; 0x2f
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	9c a7       	std	Y+44, r25	; 0x2c
    22ea:	8b a7       	std	Y+43, r24	; 0x2b
    22ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_voidInit+0xf0>
    22f4:	9c a7       	std	Y+44, r25	; 0x2c
    22f6:	8b a7       	std	Y+43, r24	; 0x2b
    LCD_voidWriteCmnd(0b00000110);
    #endif
    /*4 bit*/
    #if LCD4BIT
    _delay_ms(20);
    LCD_voidWriteCmnd(0x03); // N =F =0
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 ea       	ldi	r26, 0xA0	; 160
    2304:	b0 e4       	ldi	r27, 0x40	; 64
    2306:	8f a3       	std	Y+39, r24	; 0x27
    2308:	98 a7       	std	Y+40, r25	; 0x28
    230a:	a9 a7       	std	Y+41, r26	; 0x29
    230c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	6f a1       	ldd	r22, Y+39	; 0x27
    2310:	78 a5       	ldd	r23, Y+40	; 0x28
    2312:	89 a5       	ldd	r24, Y+41	; 0x29
    2314:	9a a5       	ldd	r25, Y+42	; 0x2a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a e7       	ldi	r20, 0x7A	; 122
    231c:	53 e4       	ldi	r21, 0x43	; 67
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8b a3       	std	Y+35, r24	; 0x23
    2328:	9c a3       	std	Y+36, r25	; 0x24
    232a:	ad a3       	std	Y+37, r26	; 0x25
    232c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    232e:	6b a1       	ldd	r22, Y+35	; 0x23
    2330:	7c a1       	ldd	r23, Y+36	; 0x24
    2332:	8d a1       	ldd	r24, Y+37	; 0x25
    2334:	9e a1       	ldd	r25, Y+38	; 0x26
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	2c f4       	brge	.+10     	; 0x2350 <LCD_voidInit+0x150>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9a a3       	std	Y+34, r25	; 0x22
    234c:	89 a3       	std	Y+33, r24	; 0x21
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    2350:	6b a1       	ldd	r22, Y+35	; 0x23
    2352:	7c a1       	ldd	r23, Y+36	; 0x24
    2354:	8d a1       	ldd	r24, Y+37	; 0x25
    2356:	9e a1       	ldd	r25, Y+38	; 0x26
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	4c f5       	brge	.+82     	; 0x23ba <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	6f a1       	ldd	r22, Y+39	; 0x27
    236a:	78 a5       	ldd	r23, Y+40	; 0x28
    236c:	89 a5       	ldd	r24, Y+41	; 0x29
    236e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9a a3       	std	Y+34, r25	; 0x22
    238e:	89 a3       	std	Y+33, r24	; 0x21
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <LCD_voidInit+0x1b0>
    2392:	89 e1       	ldi	r24, 0x19	; 25
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	98 a3       	std	Y+32, r25	; 0x20
    2398:	8f 8f       	std	Y+31, r24	; 0x1f
    239a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239c:	98 a1       	ldd	r25, Y+32	; 0x20
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_voidInit+0x19e>
    23a2:	98 a3       	std	Y+32, r25	; 0x20
    23a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a6:	89 a1       	ldd	r24, Y+33	; 0x21
    23a8:	9a a1       	ldd	r25, Y+34	; 0x22
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	9a a3       	std	Y+34, r25	; 0x22
    23ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	89 a1       	ldd	r24, Y+33	; 0x21
    23b2:	9a a1       	ldd	r25, Y+34	; 0x22
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	69 f7       	brne	.-38     	; 0x2392 <LCD_voidInit+0x192>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	6b a1       	ldd	r22, Y+35	; 0x23
    23bc:	7c a1       	ldd	r23, Y+36	; 0x24
    23be:	8d a1       	ldd	r24, Y+37	; 0x25
    23c0:	9e a1       	ldd	r25, Y+38	; 0x26
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
    23ce:	89 a1       	ldd	r24, Y+33	; 0x21
    23d0:	9a a1       	ldd	r25, Y+34	; 0x22
    23d2:	9e 8f       	std	Y+30, r25	; 0x1e
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d
    23d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_voidInit+0x1da>
    23de:	9e 8f       	std	Y+30, r25	; 0x1e
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);
    LCD_voidWriteCmnd(0x02);
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	a6 e1       	ldi	r26, 0x16	; 22
    23ee:	b3 e4       	ldi	r27, 0x43	; 67
    23f0:	89 8f       	std	Y+25, r24	; 0x19
    23f2:	9a 8f       	std	Y+26, r25	; 0x1a
    23f4:	ab 8f       	std	Y+27, r26	; 0x1b
    23f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a e7       	ldi	r20, 0x7A	; 122
    2406:	53 e4       	ldi	r21, 0x43	; 67
    2408:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8d 8b       	std	Y+21, r24	; 0x15
    2412:	9e 8b       	std	Y+22, r25	; 0x16
    2414:	af 8b       	std	Y+23, r26	; 0x17
    2416:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <LCD_voidInit+0x23a>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	69 8d       	ldd	r22, Y+25	; 0x19
    2454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	0f c0       	rjmp	.+30     	; 0x249a <LCD_voidInit+0x29a>
    247c:	89 e1       	ldi	r24, 0x19	; 25
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9a 8b       	std	Y+18, r25	; 0x12
    2482:	89 8b       	std	Y+17, r24	; 0x11
    2484:	89 89       	ldd	r24, Y+17	; 0x11
    2486:	9a 89       	ldd	r25, Y+18	; 0x12
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <LCD_voidInit+0x288>
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <LCD_voidInit+0x27c>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6d 89       	ldd	r22, Y+21	; 0x15
    24a6:	7e 89       	ldd	r23, Y+22	; 0x16
    24a8:	8f 89       	ldd	r24, Y+23	; 0x17
    24aa:	98 8d       	ldd	r25, Y+24	; 0x18
    24ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	98 8b       	std	Y+16, r25	; 0x10
    24be:	8f 87       	std	Y+15, r24	; 0x0f
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_voidInit+0x2c4>
    24c8:	98 8b       	std	Y+16, r25	; 0x10
    24ca:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(150); 
    LCD_voidWriteCmnd(0x28);
    24cc:	88 e2       	ldi	r24, 0x28	; 40
    24ce:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a0 ea       	ldi	r26, 0xA0	; 160
    24d8:	b0 e4       	ldi	r27, 0x40	; 64
    24da:	8b 87       	std	Y+11, r24	; 0x0b
    24dc:	9c 87       	std	Y+12, r25	; 0x0c
    24de:	ad 87       	std	Y+13, r26	; 0x0d
    24e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a e7       	ldi	r20, 0x7A	; 122
    24f0:	53 e4       	ldi	r21, 0x43	; 67
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	8f 83       	std	Y+7, r24	; 0x07
    24fc:	98 87       	std	Y+8, r25	; 0x08
    24fe:	a9 87       	std	Y+9, r26	; 0x09
    2500:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2516:	88 23       	and	r24, r24
    2518:	2c f4       	brge	.+10     	; 0x2524 <LCD_voidInit+0x324>
		__ticks = 1;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	3f c0       	rjmp	.+126    	; 0x25a2 <LCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2538:	18 16       	cp	r1, r24
    253a:	4c f5       	brge	.+82     	; 0x258e <LCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253c:	6b 85       	ldd	r22, Y+11	; 0x0b
    253e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e2       	ldi	r20, 0x20	; 32
    254a:	51 e4       	ldi	r21, 0x41	; 65
    254c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <LCD_voidInit+0x384>
    2566:	89 e1       	ldi	r24, 0x19	; 25
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_voidInit+0x372>
    2576:	9c 83       	std	Y+4, r25	; 0x04
    2578:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	69 f7       	brne	.-38     	; 0x2566 <LCD_voidInit+0x366>
    258c:	14 c0       	rjmp	.+40     	; 0x25b6 <LCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_voidInit+0x3ae>
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidWriteCmnd(0x0F); 
    25b6:	8f e0       	ldi	r24, 0x0F	; 15
    25b8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x01); 
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x06); 
    25c2:	86 e0       	ldi	r24, 0x06	; 6
    25c4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    #endif
}
    25c8:	e8 96       	adiw	r28, 0x38	; 56
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_voidWriteString+0x6>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8CharCounter = 0 ;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <LCD_voidWriteString+0x30>
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 0f       	add	r30, r18
    25fc:	f3 1f       	adc	r31, r19
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_voidWriteChar>
        Local_u8CharCounter ++;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    u8 Local_u8CharCounter = 0 ;
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	39 f7       	brne	.-50     	; 0x25ee <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
        Local_u8CharCounter ++;
    }
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNo ,u8 Copy_u8Location)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_u8GoToXY+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_u8GoToXY+0x8>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Location < 40)
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	88 32       	cpi	r24, 0x28	; 40
    2646:	b0 f5       	brcc	.+108    	; 0x26b4 <LCD_u8GoToXY+0x88>
    {
        switch (Copy_u8LineNo)
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	3d 83       	std	Y+5, r19	; 0x05
    2650:	2c 83       	std	Y+4, r18	; 0x04
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	9d 81       	ldd	r25, Y+5	; 0x05
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	91 05       	cpc	r25, r1
    265a:	d9 f0       	breq	.+54     	; 0x2692 <LCD_u8GoToXY+0x66>
    265c:	2c 81       	ldd	r18, Y+4	; 0x04
    265e:	3d 81       	ldd	r19, Y+5	; 0x05
    2660:	23 30       	cpi	r18, 0x03	; 3
    2662:	31 05       	cpc	r19, r1
    2664:	34 f4       	brge	.+12     	; 0x2672 <LCD_u8GoToXY+0x46>
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	61 f0       	breq	.+24     	; 0x2688 <LCD_u8GoToXY+0x5c>
    2670:	1f c0       	rjmp	.+62     	; 0x26b0 <LCD_u8GoToXY+0x84>
    2672:	2c 81       	ldd	r18, Y+4	; 0x04
    2674:	3d 81       	ldd	r19, Y+5	; 0x05
    2676:	23 30       	cpi	r18, 0x03	; 3
    2678:	31 05       	cpc	r19, r1
    267a:	81 f0       	breq	.+32     	; 0x269c <LCD_u8GoToXY+0x70>
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	84 30       	cpi	r24, 0x04	; 4
    2682:	91 05       	cpc	r25, r1
    2684:	81 f0       	breq	.+32     	; 0x26a6 <LCD_u8GoToXY+0x7a>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <LCD_u8GoToXY+0x84>
        {
            case LCD_u8_LINE1 : LCD_voidWriteCmnd(Copy_u8Location + 0x80 );break;           
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	80 58       	subi	r24, 0x80	; 128
    268c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2690:	12 c0       	rjmp	.+36     	; 0x26b6 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE2 : LCD_voidWriteCmnd(Copy_u8Location + 0xC0 );break;  
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	80 54       	subi	r24, 0x40	; 64
    2696:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    269a:	0d c0       	rjmp	.+26     	; 0x26b6 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE3 : LCD_voidWriteCmnd(Copy_u8Location + 0x94 );break;  
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	8c 56       	subi	r24, 0x6C	; 108
    26a0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <LCD_u8GoToXY+0x8a>
            case LCD_u8_LINE4 : LCD_voidWriteCmnd(Copy_u8Location + 0xD4 );break;  
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	8c 52       	subi	r24, 0x2C	; 44
    26aa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <LCD_u8GoToXY+0x8a>
            default           : Local_u8ReturnState = STD_TYPE_NOK;        break;
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <LCD_u8GoToXY+0x8a>
        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK; 
    26b4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    0x00 : first location in line 1
    0x40 (64) : first location in line 2
    when we represent these nummbers in the stars of IR this will result the 
    instructions above 
    */
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_voidShift>:

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <LCD_voidShift+0x6>
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <LCD_voidShift+0x8>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Counter = 0;
    26da:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    26dc:	19 82       	std	Y+1, r1	; 0x01
    26de:	19 c0       	rjmp	.+50     	; 0x2712 <LCD_voidShift+0x4a>
    {
        switch (Copy_u8ShiftDirection)
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	3d 83       	std	Y+5, r19	; 0x05
    26e8:	2c 83       	std	Y+4, r18	; 0x04
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	31 f0       	breq	.+12     	; 0x26fe <LCD_voidShift+0x36>
    26f2:	2c 81       	ldd	r18, Y+4	; 0x04
    26f4:	3d 81       	ldd	r19, Y+5	; 0x05
    26f6:	21 30       	cpi	r18, 0x01	; 1
    26f8:	31 05       	cpc	r19, r1
    26fa:	29 f0       	breq	.+10     	; 0x2706 <LCD_voidShift+0x3e>
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <LCD_voidShift+0x44>
        {
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
    26fe:	8c e1       	ldi	r24, 0x1C	; 28
    2700:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2704:	03 c0       	rjmp	.+6      	; 0x270c <LCD_voidShift+0x44>
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
    2706:	88 e1       	ldi	r24, 0x18	; 24
    2708:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
}

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    u8 Local_u8Counter = 0;
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	8b 83       	std	Y+3, r24	; 0x03
    2712:	99 81       	ldd	r25, Y+1	; 0x01
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	98 17       	cp	r25, r24
    2718:	18 f3       	brcs	.-58     	; 0x26e0 <LCD_voidShift+0x18>
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
        _delay_ms(1);
        }
    }
}
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_voidXYString>:

void LCD_voidXYString(u8 Copy_u8LineNo ,u8 Copy_u8Location,u8 *Copy_Pu8Srting)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <LCD_voidXYString+0x6>
    2730:	00 d0       	rcall	.+0      	; 0x2732 <LCD_voidXYString+0x8>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	6a 83       	std	Y+2, r22	; 0x02
    273a:	5c 83       	std	Y+4, r21	; 0x04
    273c:	4b 83       	std	Y+3, r20	; 0x03
    LCD_u8GoToXY(Copy_u8LineNo,Copy_u8Location);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	6a 81       	ldd	r22, Y+2	; 0x02
    2742:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_u8GoToXY>
    LCD_voidWriteString(Copy_Pu8Srting);
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_voidWriteString>
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <LCD_u8WriteSpecialChar>:

u8 LCD_u8WriteSpecialChar(u8 Copy_u8CharIndex,u8 *Copy_Au8Char)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	27 97       	sbiw	r28, 0x07	; 7
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	7d 83       	std	Y+5, r23	; 0x05
    2774:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Conter = 0;
    277a:	19 82       	std	Y+1, r1	; 0x01
    /*choose the place in CGRAM to write your special character*/
    switch (Copy_u8CharIndex)
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	3f 83       	std	Y+7, r19	; 0x07
    2784:	2e 83       	std	Y+6, r18	; 0x06
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	a9 f1       	breq	.+106    	; 0x27fa <LCD_u8WriteSpecialChar+0x9e>
    2790:	2e 81       	ldd	r18, Y+6	; 0x06
    2792:	3f 81       	ldd	r19, Y+7	; 0x07
    2794:	24 30       	cpi	r18, 0x04	; 4
    2796:	31 05       	cpc	r19, r1
    2798:	7c f4       	brge	.+30     	; 0x27b8 <LCD_u8WriteSpecialChar+0x5c>
    279a:	8e 81       	ldd	r24, Y+6	; 0x06
    279c:	9f 81       	ldd	r25, Y+7	; 0x07
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	91 05       	cpc	r25, r1
    27a2:	19 f1       	breq	.+70     	; 0x27ea <LCD_u8WriteSpecialChar+0x8e>
    27a4:	2e 81       	ldd	r18, Y+6	; 0x06
    27a6:	3f 81       	ldd	r19, Y+7	; 0x07
    27a8:	22 30       	cpi	r18, 0x02	; 2
    27aa:	31 05       	cpc	r19, r1
    27ac:	14 f5       	brge	.+68     	; 0x27f2 <LCD_u8WriteSpecialChar+0x96>
    27ae:	8e 81       	ldd	r24, Y+6	; 0x06
    27b0:	9f 81       	ldd	r25, Y+7	; 0x07
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	b1 f0       	breq	.+44     	; 0x27e2 <LCD_u8WriteSpecialChar+0x86>
    27b6:	35 c0       	rjmp	.+106    	; 0x2822 <LCD_u8WriteSpecialChar+0xc6>
    27b8:	2e 81       	ldd	r18, Y+6	; 0x06
    27ba:	3f 81       	ldd	r19, Y+7	; 0x07
    27bc:	25 30       	cpi	r18, 0x05	; 5
    27be:	31 05       	cpc	r19, r1
    27c0:	21 f1       	breq	.+72     	; 0x280a <LCD_u8WriteSpecialChar+0xae>
    27c2:	8e 81       	ldd	r24, Y+6	; 0x06
    27c4:	9f 81       	ldd	r25, Y+7	; 0x07
    27c6:	85 30       	cpi	r24, 0x05	; 5
    27c8:	91 05       	cpc	r25, r1
    27ca:	dc f0       	brlt	.+54     	; 0x2802 <LCD_u8WriteSpecialChar+0xa6>
    27cc:	2e 81       	ldd	r18, Y+6	; 0x06
    27ce:	3f 81       	ldd	r19, Y+7	; 0x07
    27d0:	26 30       	cpi	r18, 0x06	; 6
    27d2:	31 05       	cpc	r19, r1
    27d4:	f1 f0       	breq	.+60     	; 0x2812 <LCD_u8WriteSpecialChar+0xb6>
    27d6:	8e 81       	ldd	r24, Y+6	; 0x06
    27d8:	9f 81       	ldd	r25, Y+7	; 0x07
    27da:	87 30       	cpi	r24, 0x07	; 7
    27dc:	91 05       	cpc	r25, r1
    27de:	e9 f0       	breq	.+58     	; 0x281a <LCD_u8WriteSpecialChar+0xbe>
    27e0:	20 c0       	rjmp	.+64     	; 0x2822 <LCD_u8WriteSpecialChar+0xc6>
    {
    case LCD_u8_SPECHIAL0: LCD_voidWriteCmnd(0b01000000); break;
    27e2:	80 e4       	ldi	r24, 0x40	; 64
    27e4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    27e8:	1d c0       	rjmp	.+58     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL1: LCD_voidWriteCmnd(0b01001000); break;
    27ea:	88 e4       	ldi	r24, 0x48	; 72
    27ec:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    27f0:	19 c0       	rjmp	.+50     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL2: LCD_voidWriteCmnd(0b01010000); break;
    27f2:	80 e5       	ldi	r24, 0x50	; 80
    27f4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    27f8:	15 c0       	rjmp	.+42     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL3: LCD_voidWriteCmnd(0b01011000); break;
    27fa:	88 e5       	ldi	r24, 0x58	; 88
    27fc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2800:	11 c0       	rjmp	.+34     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL4: LCD_voidWriteCmnd(0b01100000); break;
    2802:	80 e6       	ldi	r24, 0x60	; 96
    2804:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2808:	0d c0       	rjmp	.+26     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL5: LCD_voidWriteCmnd(0b01101000); break;
    280a:	88 e6       	ldi	r24, 0x68	; 104
    280c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2810:	09 c0       	rjmp	.+18     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    2812:	80 e7       	ldi	r24, 0x70	; 112
    2814:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    281a:	88 e7       	ldi	r24, 0x78	; 120
    281c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidWriteCmnd>
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <LCD_u8WriteSpecialChar+0xc8>
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    2822:	1a 82       	std	Y+2, r1	; 0x02
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    2824:	19 82       	std	Y+1, r1	; 0x01
    2826:	0e c0       	rjmp	.+28     	; 0x2844 <LCD_u8WriteSpecialChar+0xe8>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	9d 81       	ldd	r25, Y+5	; 0x05
    2832:	fc 01       	movw	r30, r24
    2834:	e2 0f       	add	r30, r18
    2836:	f3 1f       	adc	r31, r19
    2838:	80 81       	ld	r24, Z
    283a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_voidWriteChar>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	88 30       	cpi	r24, 0x08	; 8
    2848:	78 f3       	brcs	.-34     	; 0x2828 <LCD_u8WriteSpecialChar+0xcc>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    }
    return Local_u8ReturnState;
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    284c:	27 96       	adiw	r28, 0x07	; 7
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <Num_u16ToString>:

void Num_u16ToString(u16 Copu_u16Num, u8 *Copu_Au8Str)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <Num_u16ToString+0x6>
    2864:	00 d0       	rcall	.+0      	; 0x2866 <Num_u16ToString+0x8>
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	7c 83       	std	Y+4, r23	; 0x04
    2870:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(Copu_Au8Str, "%d", Copu_u16Num);
    2872:	00 d0       	rcall	.+0      	; 0x2874 <Num_u16ToString+0x16>
    2874:	00 d0       	rcall	.+0      	; 0x2876 <Num_u16ToString+0x18>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <Num_u16ToString+0x1a>
    2878:	ed b7       	in	r30, 0x3d	; 61
    287a:	fe b7       	in	r31, 0x3e	; 62
    287c:	31 96       	adiw	r30, 0x01	; 1
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	80 e6       	ldi	r24, 0x60	; 96
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	93 83       	std	Z+3, r25	; 0x03
    288c:	82 83       	std	Z+2, r24	; 0x02
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	95 83       	std	Z+5, r25	; 0x05
    2894:	84 83       	std	Z+4, r24	; 0x04
    2896:	0e 94 d7 14 	call	0x29ae	; 0x29ae <sprintf>
    289a:	8d b7       	in	r24, 0x3d	; 61
    289c:	9e b7       	in	r25, 0x3e	; 62
    289e:	06 96       	adiw	r24, 0x06	; 6
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	9e bf       	out	0x3e, r25	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	8d bf       	out	0x3d, r24	; 61
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Num)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	2c 97       	sbiw	r28, 0x0c	; 12
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	9c 87       	std	Y+12, r25	; 0x0c
    28ce:	8b 87       	std	Y+11, r24	; 0x0b
    u8 Local_u8Buffer[10];
    Num_u16ToString(Copy_u16Num,Local_u8Buffer);
    28d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d4:	9e 01       	movw	r18, r28
    28d6:	2f 5f       	subi	r18, 0xFF	; 255
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	b9 01       	movw	r22, r18
    28dc:	0e 94 2f 14 	call	0x285e	; 0x285e <Num_u16ToString>
    LCD_voidWriteString(Local_u8Buffer);
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_voidWriteString>
}
    28e8:	2c 96       	adiw	r28, 0x0c	; 12
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <main>:

#define LCD_CLEARTEXT "                                        "


int main(void)
 {
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62

	/*DIO init */
	DIO_voidInit();
    2904:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	/*LCD init*/
	LCD_voidInit();
    2908:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_voidInit>
	/*KPD init*/
	KPD_voidInit();
    290c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <KPD_voidInit>
	
	u8 Local_u8KPDVal = KPD_u8_KEY_NOT_PRESSED;
    2910:	8a e0       	ldi	r24, 0x0A	; 10
    2912:	89 83       	std	Y+1, r24	; 0x01
		KPD_u8GetKey(&Local_u8KPDVal);
    2914:	ce 01       	movw	r24, r28
    2916:	01 96       	adiw	r24, 0x01	; 1
    2918:	0e 94 8f 0b 	call	0x171e	; 0x171e <KPD_u8GetKey>
		while(1)
		{

			if (Local_u8KPDVal == KPD_u8_KEY_NOT_PRESSED)
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	8a 30       	cpi	r24, 0x0A	; 10
    2920:	29 f4       	brne	.+10     	; 0x292c <main+0x32>
			{
				KPD_u8GetKey(&Local_u8KPDVal);
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 8f 0b 	call	0x171e	; 0x171e <KPD_u8GetKey>
    292a:	f8 cf       	rjmp	.-16     	; 0x291c <main+0x22>
			}
			else
			{
				LCD_u8GoToXY(LCD_u8_LINE1,1);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_u8GoToXY>
				LCD_voidWriteChar(Local_u8KPDVal);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_voidWriteChar>
				Local_u8KPDVal = KPD_u8_KEY_NOT_PRESSED;
    293a:	8a e0       	ldi	r24, 0x0A	; 10
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	ee cf       	rjmp	.-36     	; 0x291c <main+0x22>

00002940 <__prologue_saves__>:
    2940:	2f 92       	push	r2
    2942:	3f 92       	push	r3
    2944:	4f 92       	push	r4
    2946:	5f 92       	push	r5
    2948:	6f 92       	push	r6
    294a:	7f 92       	push	r7
    294c:	8f 92       	push	r8
    294e:	9f 92       	push	r9
    2950:	af 92       	push	r10
    2952:	bf 92       	push	r11
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	ca 1b       	sub	r28, r26
    296a:	db 0b       	sbc	r29, r27
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	09 94       	ijmp

00002978 <__epilogue_restores__>:
    2978:	2a 88       	ldd	r2, Y+18	; 0x12
    297a:	39 88       	ldd	r3, Y+17	; 0x11
    297c:	48 88       	ldd	r4, Y+16	; 0x10
    297e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2980:	6e 84       	ldd	r6, Y+14	; 0x0e
    2982:	7d 84       	ldd	r7, Y+13	; 0x0d
    2984:	8c 84       	ldd	r8, Y+12	; 0x0c
    2986:	9b 84       	ldd	r9, Y+11	; 0x0b
    2988:	aa 84       	ldd	r10, Y+10	; 0x0a
    298a:	b9 84       	ldd	r11, Y+9	; 0x09
    298c:	c8 84       	ldd	r12, Y+8	; 0x08
    298e:	df 80       	ldd	r13, Y+7	; 0x07
    2990:	ee 80       	ldd	r14, Y+6	; 0x06
    2992:	fd 80       	ldd	r15, Y+5	; 0x05
    2994:	0c 81       	ldd	r16, Y+4	; 0x04
    2996:	1b 81       	ldd	r17, Y+3	; 0x03
    2998:	aa 81       	ldd	r26, Y+2	; 0x02
    299a:	b9 81       	ldd	r27, Y+1	; 0x01
    299c:	ce 0f       	add	r28, r30
    299e:	d1 1d       	adc	r29, r1
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	ed 01       	movw	r28, r26
    29ac:	08 95       	ret

000029ae <sprintf>:
    29ae:	ae e0       	ldi	r26, 0x0E	; 14
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ed ed       	ldi	r30, 0xDD	; 221
    29b4:	f4 e1       	ldi	r31, 0x14	; 20
    29b6:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x1c>
    29ba:	0d 89       	ldd	r16, Y+21	; 0x15
    29bc:	1e 89       	ldd	r17, Y+22	; 0x16
    29be:	86 e0       	ldi	r24, 0x06	; 6
    29c0:	8c 83       	std	Y+4, r24	; 0x04
    29c2:	1a 83       	std	Y+2, r17	; 0x02
    29c4:	09 83       	std	Y+1, r16	; 0x01
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	9f e7       	ldi	r25, 0x7F	; 127
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	9e 01       	movw	r18, r28
    29d0:	27 5e       	subi	r18, 0xE7	; 231
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	ce 01       	movw	r24, r28
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	6f 89       	ldd	r22, Y+23	; 0x17
    29da:	78 8d       	ldd	r23, Y+24	; 0x18
    29dc:	a9 01       	movw	r20, r18
    29de:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <vfprintf>
    29e2:	2f 81       	ldd	r18, Y+7	; 0x07
    29e4:	38 85       	ldd	r19, Y+8	; 0x08
    29e6:	02 0f       	add	r16, r18
    29e8:	13 1f       	adc	r17, r19
    29ea:	f8 01       	movw	r30, r16
    29ec:	10 82       	st	Z, r1
    29ee:	2e 96       	adiw	r28, 0x0e	; 14
    29f0:	e4 e0       	ldi	r30, 0x04	; 4
    29f2:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x1c>

000029f6 <vfprintf>:
    29f6:	ab e0       	ldi	r26, 0x0B	; 11
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e0       	ldi	r30, 0x01	; 1
    29fc:	f5 e1       	ldi	r31, 0x15	; 21
    29fe:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__prologue_saves__>
    2a02:	3c 01       	movw	r6, r24
    2a04:	2b 01       	movw	r4, r22
    2a06:	5a 01       	movw	r10, r20
    2a08:	fc 01       	movw	r30, r24
    2a0a:	17 82       	std	Z+7, r1	; 0x07
    2a0c:	16 82       	std	Z+6, r1	; 0x06
    2a0e:	83 81       	ldd	r24, Z+3	; 0x03
    2a10:	81 fd       	sbrc	r24, 1
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <vfprintf+0x24>
    2a14:	6f ef       	ldi	r22, 0xFF	; 255
    2a16:	7f ef       	ldi	r23, 0xFF	; 255
    2a18:	c6 c1       	rjmp	.+908    	; 0x2da6 <vfprintf+0x3b0>
    2a1a:	9a e0       	ldi	r25, 0x0A	; 10
    2a1c:	89 2e       	mov	r8, r25
    2a1e:	1e 01       	movw	r2, r28
    2a20:	08 94       	sec
    2a22:	21 1c       	adc	r2, r1
    2a24:	31 1c       	adc	r3, r1
    2a26:	f3 01       	movw	r30, r6
    2a28:	23 81       	ldd	r18, Z+3	; 0x03
    2a2a:	f2 01       	movw	r30, r4
    2a2c:	23 fd       	sbrc	r18, 3
    2a2e:	85 91       	lpm	r24, Z+
    2a30:	23 ff       	sbrs	r18, 3
    2a32:	81 91       	ld	r24, Z+
    2a34:	2f 01       	movw	r4, r30
    2a36:	88 23       	and	r24, r24
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <vfprintf+0x46>
    2a3a:	b2 c1       	rjmp	.+868    	; 0x2da0 <vfprintf+0x3aa>
    2a3c:	85 32       	cpi	r24, 0x25	; 37
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <vfprintf+0x58>
    2a40:	23 fd       	sbrc	r18, 3
    2a42:	85 91       	lpm	r24, Z+
    2a44:	23 ff       	sbrs	r18, 3
    2a46:	81 91       	ld	r24, Z+
    2a48:	2f 01       	movw	r4, r30
    2a4a:	85 32       	cpi	r24, 0x25	; 37
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <vfprintf+0x62>
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	b3 01       	movw	r22, r6
    2a52:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2a56:	e7 cf       	rjmp	.-50     	; 0x2a26 <vfprintf+0x30>
    2a58:	98 2f       	mov	r25, r24
    2a5a:	ff 24       	eor	r15, r15
    2a5c:	ee 24       	eor	r14, r14
    2a5e:	99 24       	eor	r9, r9
    2a60:	ff e1       	ldi	r31, 0x1F	; 31
    2a62:	ff 15       	cp	r31, r15
    2a64:	d0 f0       	brcs	.+52     	; 0x2a9a <vfprintf+0xa4>
    2a66:	9b 32       	cpi	r25, 0x2B	; 43
    2a68:	69 f0       	breq	.+26     	; 0x2a84 <vfprintf+0x8e>
    2a6a:	9c 32       	cpi	r25, 0x2C	; 44
    2a6c:	28 f4       	brcc	.+10     	; 0x2a78 <vfprintf+0x82>
    2a6e:	90 32       	cpi	r25, 0x20	; 32
    2a70:	59 f0       	breq	.+22     	; 0x2a88 <vfprintf+0x92>
    2a72:	93 32       	cpi	r25, 0x23	; 35
    2a74:	91 f4       	brne	.+36     	; 0x2a9a <vfprintf+0xa4>
    2a76:	0e c0       	rjmp	.+28     	; 0x2a94 <vfprintf+0x9e>
    2a78:	9d 32       	cpi	r25, 0x2D	; 45
    2a7a:	49 f0       	breq	.+18     	; 0x2a8e <vfprintf+0x98>
    2a7c:	90 33       	cpi	r25, 0x30	; 48
    2a7e:	69 f4       	brne	.+26     	; 0x2a9a <vfprintf+0xa4>
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	24 c0       	rjmp	.+72     	; 0x2acc <vfprintf+0xd6>
    2a84:	52 e0       	ldi	r21, 0x02	; 2
    2a86:	f5 2a       	or	r15, r21
    2a88:	84 e0       	ldi	r24, 0x04	; 4
    2a8a:	f8 2a       	or	r15, r24
    2a8c:	28 c0       	rjmp	.+80     	; 0x2ade <vfprintf+0xe8>
    2a8e:	98 e0       	ldi	r25, 0x08	; 8
    2a90:	f9 2a       	or	r15, r25
    2a92:	25 c0       	rjmp	.+74     	; 0x2ade <vfprintf+0xe8>
    2a94:	e0 e1       	ldi	r30, 0x10	; 16
    2a96:	fe 2a       	or	r15, r30
    2a98:	22 c0       	rjmp	.+68     	; 0x2ade <vfprintf+0xe8>
    2a9a:	f7 fc       	sbrc	r15, 7
    2a9c:	29 c0       	rjmp	.+82     	; 0x2af0 <vfprintf+0xfa>
    2a9e:	89 2f       	mov	r24, r25
    2aa0:	80 53       	subi	r24, 0x30	; 48
    2aa2:	8a 30       	cpi	r24, 0x0A	; 10
    2aa4:	70 f4       	brcc	.+28     	; 0x2ac2 <vfprintf+0xcc>
    2aa6:	f6 fe       	sbrs	r15, 6
    2aa8:	05 c0       	rjmp	.+10     	; 0x2ab4 <vfprintf+0xbe>
    2aaa:	98 9c       	mul	r9, r8
    2aac:	90 2c       	mov	r9, r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	98 0e       	add	r9, r24
    2ab2:	15 c0       	rjmp	.+42     	; 0x2ade <vfprintf+0xe8>
    2ab4:	e8 9c       	mul	r14, r8
    2ab6:	e0 2c       	mov	r14, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	e8 0e       	add	r14, r24
    2abc:	f0 e2       	ldi	r31, 0x20	; 32
    2abe:	ff 2a       	or	r15, r31
    2ac0:	0e c0       	rjmp	.+28     	; 0x2ade <vfprintf+0xe8>
    2ac2:	9e 32       	cpi	r25, 0x2E	; 46
    2ac4:	29 f4       	brne	.+10     	; 0x2ad0 <vfprintf+0xda>
    2ac6:	f6 fc       	sbrc	r15, 6
    2ac8:	6b c1       	rjmp	.+726    	; 0x2da0 <vfprintf+0x3aa>
    2aca:	40 e4       	ldi	r20, 0x40	; 64
    2acc:	f4 2a       	or	r15, r20
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <vfprintf+0xe8>
    2ad0:	9c 36       	cpi	r25, 0x6C	; 108
    2ad2:	19 f4       	brne	.+6      	; 0x2ada <vfprintf+0xe4>
    2ad4:	50 e8       	ldi	r21, 0x80	; 128
    2ad6:	f5 2a       	or	r15, r21
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <vfprintf+0xe8>
    2ada:	98 36       	cpi	r25, 0x68	; 104
    2adc:	49 f4       	brne	.+18     	; 0x2af0 <vfprintf+0xfa>
    2ade:	f2 01       	movw	r30, r4
    2ae0:	23 fd       	sbrc	r18, 3
    2ae2:	95 91       	lpm	r25, Z+
    2ae4:	23 ff       	sbrs	r18, 3
    2ae6:	91 91       	ld	r25, Z+
    2ae8:	2f 01       	movw	r4, r30
    2aea:	99 23       	and	r25, r25
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <vfprintf+0xfa>
    2aee:	b8 cf       	rjmp	.-144    	; 0x2a60 <vfprintf+0x6a>
    2af0:	89 2f       	mov	r24, r25
    2af2:	85 54       	subi	r24, 0x45	; 69
    2af4:	83 30       	cpi	r24, 0x03	; 3
    2af6:	18 f0       	brcs	.+6      	; 0x2afe <vfprintf+0x108>
    2af8:	80 52       	subi	r24, 0x20	; 32
    2afa:	83 30       	cpi	r24, 0x03	; 3
    2afc:	38 f4       	brcc	.+14     	; 0x2b0c <vfprintf+0x116>
    2afe:	44 e0       	ldi	r20, 0x04	; 4
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	a4 0e       	add	r10, r20
    2b04:	b5 1e       	adc	r11, r21
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	59 83       	std	Y+1, r21	; 0x01
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <vfprintf+0x134>
    2b0c:	93 36       	cpi	r25, 0x63	; 99
    2b0e:	31 f0       	breq	.+12     	; 0x2b1c <vfprintf+0x126>
    2b10:	93 37       	cpi	r25, 0x73	; 115
    2b12:	79 f0       	breq	.+30     	; 0x2b32 <vfprintf+0x13c>
    2b14:	93 35       	cpi	r25, 0x53	; 83
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <vfprintf+0x124>
    2b18:	56 c0       	rjmp	.+172    	; 0x2bc6 <vfprintf+0x1d0>
    2b1a:	20 c0       	rjmp	.+64     	; 0x2b5c <vfprintf+0x166>
    2b1c:	f5 01       	movw	r30, r10
    2b1e:	80 81       	ld	r24, Z
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	42 e0       	ldi	r20, 0x02	; 2
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	a4 0e       	add	r10, r20
    2b28:	b5 1e       	adc	r11, r21
    2b2a:	61 01       	movw	r12, r2
    2b2c:	01 e0       	ldi	r16, 0x01	; 1
    2b2e:	10 e0       	ldi	r17, 0x00	; 0
    2b30:	12 c0       	rjmp	.+36     	; 0x2b56 <vfprintf+0x160>
    2b32:	f5 01       	movw	r30, r10
    2b34:	c0 80       	ld	r12, Z
    2b36:	d1 80       	ldd	r13, Z+1	; 0x01
    2b38:	f6 fc       	sbrc	r15, 6
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <vfprintf+0x14c>
    2b3c:	6f ef       	ldi	r22, 0xFF	; 255
    2b3e:	7f ef       	ldi	r23, 0xFF	; 255
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <vfprintf+0x150>
    2b42:	69 2d       	mov	r22, r9
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	42 e0       	ldi	r20, 0x02	; 2
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	a4 0e       	add	r10, r20
    2b4c:	b5 1e       	adc	r11, r21
    2b4e:	c6 01       	movw	r24, r12
    2b50:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <strnlen>
    2b54:	8c 01       	movw	r16, r24
    2b56:	5f e7       	ldi	r21, 0x7F	; 127
    2b58:	f5 22       	and	r15, r21
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <vfprintf+0x18e>
    2b5c:	f5 01       	movw	r30, r10
    2b5e:	c0 80       	ld	r12, Z
    2b60:	d1 80       	ldd	r13, Z+1	; 0x01
    2b62:	f6 fc       	sbrc	r15, 6
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <vfprintf+0x176>
    2b66:	6f ef       	ldi	r22, 0xFF	; 255
    2b68:	7f ef       	ldi	r23, 0xFF	; 255
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <vfprintf+0x17a>
    2b6c:	69 2d       	mov	r22, r9
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	42 e0       	ldi	r20, 0x02	; 2
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	a4 0e       	add	r10, r20
    2b76:	b5 1e       	adc	r11, r21
    2b78:	c6 01       	movw	r24, r12
    2b7a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <strnlen_P>
    2b7e:	8c 01       	movw	r16, r24
    2b80:	50 e8       	ldi	r21, 0x80	; 128
    2b82:	f5 2a       	or	r15, r21
    2b84:	f3 fe       	sbrs	r15, 3
    2b86:	07 c0       	rjmp	.+14     	; 0x2b96 <vfprintf+0x1a0>
    2b88:	1a c0       	rjmp	.+52     	; 0x2bbe <vfprintf+0x1c8>
    2b8a:	80 e2       	ldi	r24, 0x20	; 32
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b3 01       	movw	r22, r6
    2b90:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2b94:	ea 94       	dec	r14
    2b96:	8e 2d       	mov	r24, r14
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	08 17       	cp	r16, r24
    2b9c:	19 07       	cpc	r17, r25
    2b9e:	a8 f3       	brcs	.-22     	; 0x2b8a <vfprintf+0x194>
    2ba0:	0e c0       	rjmp	.+28     	; 0x2bbe <vfprintf+0x1c8>
    2ba2:	f6 01       	movw	r30, r12
    2ba4:	f7 fc       	sbrc	r15, 7
    2ba6:	85 91       	lpm	r24, Z+
    2ba8:	f7 fe       	sbrs	r15, 7
    2baa:	81 91       	ld	r24, Z+
    2bac:	6f 01       	movw	r12, r30
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	b3 01       	movw	r22, r6
    2bb2:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2bb6:	e1 10       	cpse	r14, r1
    2bb8:	ea 94       	dec	r14
    2bba:	01 50       	subi	r16, 0x01	; 1
    2bbc:	10 40       	sbci	r17, 0x00	; 0
    2bbe:	01 15       	cp	r16, r1
    2bc0:	11 05       	cpc	r17, r1
    2bc2:	79 f7       	brne	.-34     	; 0x2ba2 <vfprintf+0x1ac>
    2bc4:	ea c0       	rjmp	.+468    	; 0x2d9a <vfprintf+0x3a4>
    2bc6:	94 36       	cpi	r25, 0x64	; 100
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <vfprintf+0x1d8>
    2bca:	99 36       	cpi	r25, 0x69	; 105
    2bcc:	69 f5       	brne	.+90     	; 0x2c28 <vfprintf+0x232>
    2bce:	f7 fe       	sbrs	r15, 7
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <vfprintf+0x1ec>
    2bd2:	f5 01       	movw	r30, r10
    2bd4:	20 81       	ld	r18, Z
    2bd6:	31 81       	ldd	r19, Z+1	; 0x01
    2bd8:	42 81       	ldd	r20, Z+2	; 0x02
    2bda:	53 81       	ldd	r21, Z+3	; 0x03
    2bdc:	84 e0       	ldi	r24, 0x04	; 4
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0a c0       	rjmp	.+20     	; 0x2bf6 <vfprintf+0x200>
    2be2:	f5 01       	movw	r30, r10
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	9c 01       	movw	r18, r24
    2bea:	44 27       	eor	r20, r20
    2bec:	37 fd       	sbrc	r19, 7
    2bee:	40 95       	com	r20
    2bf0:	54 2f       	mov	r21, r20
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a8 0e       	add	r10, r24
    2bf8:	b9 1e       	adc	r11, r25
    2bfa:	9f e6       	ldi	r25, 0x6F	; 111
    2bfc:	f9 22       	and	r15, r25
    2bfe:	57 ff       	sbrs	r21, 7
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <vfprintf+0x21e>
    2c02:	50 95       	com	r21
    2c04:	40 95       	com	r20
    2c06:	30 95       	com	r19
    2c08:	21 95       	neg	r18
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c10:	e0 e8       	ldi	r30, 0x80	; 128
    2c12:	fe 2a       	or	r15, r30
    2c14:	ca 01       	movw	r24, r20
    2c16:	b9 01       	movw	r22, r18
    2c18:	a1 01       	movw	r20, r2
    2c1a:	2a e0       	ldi	r18, 0x0A	; 10
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__ultoa_invert>
    2c22:	d8 2e       	mov	r13, r24
    2c24:	d2 18       	sub	r13, r2
    2c26:	40 c0       	rjmp	.+128    	; 0x2ca8 <vfprintf+0x2b2>
    2c28:	95 37       	cpi	r25, 0x75	; 117
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <vfprintf+0x240>
    2c2c:	1f 2d       	mov	r17, r15
    2c2e:	1f 7e       	andi	r17, 0xEF	; 239
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	1d c0       	rjmp	.+58     	; 0x2c70 <vfprintf+0x27a>
    2c36:	1f 2d       	mov	r17, r15
    2c38:	19 7f       	andi	r17, 0xF9	; 249
    2c3a:	9f 36       	cpi	r25, 0x6F	; 111
    2c3c:	61 f0       	breq	.+24     	; 0x2c56 <vfprintf+0x260>
    2c3e:	90 37       	cpi	r25, 0x70	; 112
    2c40:	20 f4       	brcc	.+8      	; 0x2c4a <vfprintf+0x254>
    2c42:	98 35       	cpi	r25, 0x58	; 88
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <vfprintf+0x252>
    2c46:	ac c0       	rjmp	.+344    	; 0x2da0 <vfprintf+0x3aa>
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <vfprintf+0x272>
    2c4a:	90 37       	cpi	r25, 0x70	; 112
    2c4c:	39 f0       	breq	.+14     	; 0x2c5c <vfprintf+0x266>
    2c4e:	98 37       	cpi	r25, 0x78	; 120
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <vfprintf+0x25e>
    2c52:	a6 c0       	rjmp	.+332    	; 0x2da0 <vfprintf+0x3aa>
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <vfprintf+0x268>
    2c56:	28 e0       	ldi	r18, 0x08	; 8
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	0a c0       	rjmp	.+20     	; 0x2c70 <vfprintf+0x27a>
    2c5c:	10 61       	ori	r17, 0x10	; 16
    2c5e:	14 fd       	sbrc	r17, 4
    2c60:	14 60       	ori	r17, 0x04	; 4
    2c62:	20 e1       	ldi	r18, 0x10	; 16
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	04 c0       	rjmp	.+8      	; 0x2c70 <vfprintf+0x27a>
    2c68:	14 fd       	sbrc	r17, 4
    2c6a:	16 60       	ori	r17, 0x06	; 6
    2c6c:	20 e1       	ldi	r18, 0x10	; 16
    2c6e:	32 e0       	ldi	r19, 0x02	; 2
    2c70:	17 ff       	sbrs	r17, 7
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <vfprintf+0x28e>
    2c74:	f5 01       	movw	r30, r10
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	44 e0       	ldi	r20, 0x04	; 4
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	08 c0       	rjmp	.+16     	; 0x2c94 <vfprintf+0x29e>
    2c84:	f5 01       	movw	r30, r10
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	42 e0       	ldi	r20, 0x02	; 2
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	a4 0e       	add	r10, r20
    2c96:	b5 1e       	adc	r11, r21
    2c98:	a1 01       	movw	r20, r2
    2c9a:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__ultoa_invert>
    2c9e:	d8 2e       	mov	r13, r24
    2ca0:	d2 18       	sub	r13, r2
    2ca2:	8f e7       	ldi	r24, 0x7F	; 127
    2ca4:	f8 2e       	mov	r15, r24
    2ca6:	f1 22       	and	r15, r17
    2ca8:	f6 fe       	sbrs	r15, 6
    2caa:	0b c0       	rjmp	.+22     	; 0x2cc2 <vfprintf+0x2cc>
    2cac:	5e ef       	ldi	r21, 0xFE	; 254
    2cae:	f5 22       	and	r15, r21
    2cb0:	d9 14       	cp	r13, r9
    2cb2:	38 f4       	brcc	.+14     	; 0x2cc2 <vfprintf+0x2cc>
    2cb4:	f4 fe       	sbrs	r15, 4
    2cb6:	07 c0       	rjmp	.+14     	; 0x2cc6 <vfprintf+0x2d0>
    2cb8:	f2 fc       	sbrc	r15, 2
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <vfprintf+0x2d0>
    2cbc:	8f ee       	ldi	r24, 0xEF	; 239
    2cbe:	f8 22       	and	r15, r24
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <vfprintf+0x2d0>
    2cc2:	1d 2d       	mov	r17, r13
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <vfprintf+0x2d2>
    2cc6:	19 2d       	mov	r17, r9
    2cc8:	f4 fe       	sbrs	r15, 4
    2cca:	0d c0       	rjmp	.+26     	; 0x2ce6 <vfprintf+0x2f0>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 0d       	add	r30, r13
    2cd0:	f1 1d       	adc	r31, r1
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 33       	cpi	r24, 0x30	; 48
    2cd6:	19 f4       	brne	.+6      	; 0x2cde <vfprintf+0x2e8>
    2cd8:	99 ee       	ldi	r25, 0xE9	; 233
    2cda:	f9 22       	and	r15, r25
    2cdc:	08 c0       	rjmp	.+16     	; 0x2cee <vfprintf+0x2f8>
    2cde:	1f 5f       	subi	r17, 0xFF	; 255
    2ce0:	f2 fe       	sbrs	r15, 2
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <vfprintf+0x2f8>
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <vfprintf+0x2f6>
    2ce6:	8f 2d       	mov	r24, r15
    2ce8:	86 78       	andi	r24, 0x86	; 134
    2cea:	09 f0       	breq	.+2      	; 0x2cee <vfprintf+0x2f8>
    2cec:	1f 5f       	subi	r17, 0xFF	; 255
    2cee:	0f 2d       	mov	r16, r15
    2cf0:	f3 fc       	sbrc	r15, 3
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <vfprintf+0x326>
    2cf4:	f0 fe       	sbrs	r15, 0
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <vfprintf+0x320>
    2cf8:	1e 15       	cp	r17, r14
    2cfa:	10 f0       	brcs	.+4      	; 0x2d00 <vfprintf+0x30a>
    2cfc:	9d 2c       	mov	r9, r13
    2cfe:	0b c0       	rjmp	.+22     	; 0x2d16 <vfprintf+0x320>
    2d00:	9d 2c       	mov	r9, r13
    2d02:	9e 0c       	add	r9, r14
    2d04:	91 1a       	sub	r9, r17
    2d06:	1e 2d       	mov	r17, r14
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <vfprintf+0x320>
    2d0a:	80 e2       	ldi	r24, 0x20	; 32
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	b3 01       	movw	r22, r6
    2d10:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d14:	1f 5f       	subi	r17, 0xFF	; 255
    2d16:	1e 15       	cp	r17, r14
    2d18:	c0 f3       	brcs	.-16     	; 0x2d0a <vfprintf+0x314>
    2d1a:	04 c0       	rjmp	.+8      	; 0x2d24 <vfprintf+0x32e>
    2d1c:	1e 15       	cp	r17, r14
    2d1e:	10 f4       	brcc	.+4      	; 0x2d24 <vfprintf+0x32e>
    2d20:	e1 1a       	sub	r14, r17
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <vfprintf+0x330>
    2d24:	ee 24       	eor	r14, r14
    2d26:	04 ff       	sbrs	r16, 4
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <vfprintf+0x352>
    2d2a:	80 e3       	ldi	r24, 0x30	; 48
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	b3 01       	movw	r22, r6
    2d30:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d34:	02 ff       	sbrs	r16, 2
    2d36:	1d c0       	rjmp	.+58     	; 0x2d72 <vfprintf+0x37c>
    2d38:	01 fd       	sbrc	r16, 1
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <vfprintf+0x34c>
    2d3c:	88 e7       	ldi	r24, 0x78	; 120
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e c0       	rjmp	.+28     	; 0x2d5e <vfprintf+0x368>
    2d42:	88 e5       	ldi	r24, 0x58	; 88
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0b c0       	rjmp	.+22     	; 0x2d5e <vfprintf+0x368>
    2d48:	80 2f       	mov	r24, r16
    2d4a:	86 78       	andi	r24, 0x86	; 134
    2d4c:	91 f0       	breq	.+36     	; 0x2d72 <vfprintf+0x37c>
    2d4e:	01 ff       	sbrs	r16, 1
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <vfprintf+0x360>
    2d52:	8b e2       	ldi	r24, 0x2B	; 43
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <vfprintf+0x362>
    2d56:	80 e2       	ldi	r24, 0x20	; 32
    2d58:	f7 fc       	sbrc	r15, 7
    2d5a:	8d e2       	ldi	r24, 0x2D	; 45
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	b3 01       	movw	r22, r6
    2d60:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <vfprintf+0x37c>
    2d66:	80 e3       	ldi	r24, 0x30	; 48
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	b3 01       	movw	r22, r6
    2d6c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d70:	9a 94       	dec	r9
    2d72:	d9 14       	cp	r13, r9
    2d74:	c0 f3       	brcs	.-16     	; 0x2d66 <vfprintf+0x370>
    2d76:	da 94       	dec	r13
    2d78:	f1 01       	movw	r30, r2
    2d7a:	ed 0d       	add	r30, r13
    2d7c:	f1 1d       	adc	r31, r1
    2d7e:	80 81       	ld	r24, Z
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	b3 01       	movw	r22, r6
    2d84:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d88:	dd 20       	and	r13, r13
    2d8a:	a9 f7       	brne	.-22     	; 0x2d76 <vfprintf+0x380>
    2d8c:	06 c0       	rjmp	.+12     	; 0x2d9a <vfprintf+0x3a4>
    2d8e:	80 e2       	ldi	r24, 0x20	; 32
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	b3 01       	movw	r22, r6
    2d94:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <fputc>
    2d98:	ea 94       	dec	r14
    2d9a:	ee 20       	and	r14, r14
    2d9c:	c1 f7       	brne	.-16     	; 0x2d8e <vfprintf+0x398>
    2d9e:	43 ce       	rjmp	.-890    	; 0x2a26 <vfprintf+0x30>
    2da0:	f3 01       	movw	r30, r6
    2da2:	66 81       	ldd	r22, Z+6	; 0x06
    2da4:	77 81       	ldd	r23, Z+7	; 0x07
    2da6:	cb 01       	movw	r24, r22
    2da8:	2b 96       	adiw	r28, 0x0b	; 11
    2daa:	e2 e1       	ldi	r30, 0x12	; 18
    2dac:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__epilogue_restores__>

00002db0 <strnlen_P>:
    2db0:	fc 01       	movw	r30, r24
    2db2:	05 90       	lpm	r0, Z+
    2db4:	61 50       	subi	r22, 0x01	; 1
    2db6:	70 40       	sbci	r23, 0x00	; 0
    2db8:	01 10       	cpse	r0, r1
    2dba:	d8 f7       	brcc	.-10     	; 0x2db2 <strnlen_P+0x2>
    2dbc:	80 95       	com	r24
    2dbe:	90 95       	com	r25
    2dc0:	8e 0f       	add	r24, r30
    2dc2:	9f 1f       	adc	r25, r31
    2dc4:	08 95       	ret

00002dc6 <strnlen>:
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	61 50       	subi	r22, 0x01	; 1
    2dca:	70 40       	sbci	r23, 0x00	; 0
    2dcc:	01 90       	ld	r0, Z+
    2dce:	01 10       	cpse	r0, r1
    2dd0:	d8 f7       	brcc	.-10     	; 0x2dc8 <strnlen+0x2>
    2dd2:	80 95       	com	r24
    2dd4:	90 95       	com	r25
    2dd6:	8e 0f       	add	r24, r30
    2dd8:	9f 1f       	adc	r25, r31
    2dda:	08 95       	ret

00002ddc <fputc>:
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	8c 01       	movw	r16, r24
    2de6:	eb 01       	movw	r28, r22
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	81 ff       	sbrs	r24, 1
    2dec:	1b c0       	rjmp	.+54     	; 0x2e24 <fputc+0x48>
    2dee:	82 ff       	sbrs	r24, 2
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <fputc+0x30>
    2df2:	2e 81       	ldd	r18, Y+6	; 0x06
    2df4:	3f 81       	ldd	r19, Y+7	; 0x07
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfa:	28 17       	cp	r18, r24
    2dfc:	39 07       	cpc	r19, r25
    2dfe:	64 f4       	brge	.+24     	; 0x2e18 <fputc+0x3c>
    2e00:	e8 81       	ld	r30, Y
    2e02:	f9 81       	ldd	r31, Y+1	; 0x01
    2e04:	01 93       	st	Z+, r16
    2e06:	f9 83       	std	Y+1, r31	; 0x01
    2e08:	e8 83       	st	Y, r30
    2e0a:	06 c0       	rjmp	.+12     	; 0x2e18 <fputc+0x3c>
    2e0c:	e8 85       	ldd	r30, Y+8	; 0x08
    2e0e:	f9 85       	ldd	r31, Y+9	; 0x09
    2e10:	80 2f       	mov	r24, r16
    2e12:	09 95       	icall
    2e14:	89 2b       	or	r24, r25
    2e16:	31 f4       	brne	.+12     	; 0x2e24 <fputc+0x48>
    2e18:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	9f 83       	std	Y+7, r25	; 0x07
    2e20:	8e 83       	std	Y+6, r24	; 0x06
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <fputc+0x4c>
    2e24:	0f ef       	ldi	r16, 0xFF	; 255
    2e26:	1f ef       	ldi	r17, 0xFF	; 255
    2e28:	c8 01       	movw	r24, r16
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <__ultoa_invert>:
    2e34:	fa 01       	movw	r30, r20
    2e36:	aa 27       	eor	r26, r26
    2e38:	28 30       	cpi	r18, 0x08	; 8
    2e3a:	51 f1       	breq	.+84     	; 0x2e90 <__ultoa_invert+0x5c>
    2e3c:	20 31       	cpi	r18, 0x10	; 16
    2e3e:	81 f1       	breq	.+96     	; 0x2ea0 <__ultoa_invert+0x6c>
    2e40:	e8 94       	clt
    2e42:	6f 93       	push	r22
    2e44:	6e 7f       	andi	r22, 0xFE	; 254
    2e46:	6e 5f       	subi	r22, 0xFE	; 254
    2e48:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4e:	af 4f       	sbci	r26, 0xFF	; 255
    2e50:	b1 e0       	ldi	r27, 0x01	; 1
    2e52:	3e d0       	rcall	.+124    	; 0x2ed0 <__ultoa_invert+0x9c>
    2e54:	b4 e0       	ldi	r27, 0x04	; 4
    2e56:	3c d0       	rcall	.+120    	; 0x2ed0 <__ultoa_invert+0x9c>
    2e58:	67 0f       	add	r22, r23
    2e5a:	78 1f       	adc	r23, r24
    2e5c:	89 1f       	adc	r24, r25
    2e5e:	9a 1f       	adc	r25, r26
    2e60:	a1 1d       	adc	r26, r1
    2e62:	68 0f       	add	r22, r24
    2e64:	79 1f       	adc	r23, r25
    2e66:	8a 1f       	adc	r24, r26
    2e68:	91 1d       	adc	r25, r1
    2e6a:	a1 1d       	adc	r26, r1
    2e6c:	6a 0f       	add	r22, r26
    2e6e:	71 1d       	adc	r23, r1
    2e70:	81 1d       	adc	r24, r1
    2e72:	91 1d       	adc	r25, r1
    2e74:	a1 1d       	adc	r26, r1
    2e76:	20 d0       	rcall	.+64     	; 0x2eb8 <__ultoa_invert+0x84>
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <__ultoa_invert+0x48>
    2e7a:	68 94       	set
    2e7c:	3f 91       	pop	r19
    2e7e:	2a e0       	ldi	r18, 0x0A	; 10
    2e80:	26 9f       	mul	r18, r22
    2e82:	11 24       	eor	r1, r1
    2e84:	30 19       	sub	r19, r0
    2e86:	30 5d       	subi	r19, 0xD0	; 208
    2e88:	31 93       	st	Z+, r19
    2e8a:	de f6       	brtc	.-74     	; 0x2e42 <__ultoa_invert+0xe>
    2e8c:	cf 01       	movw	r24, r30
    2e8e:	08 95       	ret
    2e90:	46 2f       	mov	r20, r22
    2e92:	47 70       	andi	r20, 0x07	; 7
    2e94:	40 5d       	subi	r20, 0xD0	; 208
    2e96:	41 93       	st	Z+, r20
    2e98:	b3 e0       	ldi	r27, 0x03	; 3
    2e9a:	0f d0       	rcall	.+30     	; 0x2eba <__ultoa_invert+0x86>
    2e9c:	c9 f7       	brne	.-14     	; 0x2e90 <__ultoa_invert+0x5c>
    2e9e:	f6 cf       	rjmp	.-20     	; 0x2e8c <__ultoa_invert+0x58>
    2ea0:	46 2f       	mov	r20, r22
    2ea2:	4f 70       	andi	r20, 0x0F	; 15
    2ea4:	40 5d       	subi	r20, 0xD0	; 208
    2ea6:	4a 33       	cpi	r20, 0x3A	; 58
    2ea8:	18 f0       	brcs	.+6      	; 0x2eb0 <__ultoa_invert+0x7c>
    2eaa:	49 5d       	subi	r20, 0xD9	; 217
    2eac:	31 fd       	sbrc	r19, 1
    2eae:	40 52       	subi	r20, 0x20	; 32
    2eb0:	41 93       	st	Z+, r20
    2eb2:	02 d0       	rcall	.+4      	; 0x2eb8 <__ultoa_invert+0x84>
    2eb4:	a9 f7       	brne	.-22     	; 0x2ea0 <__ultoa_invert+0x6c>
    2eb6:	ea cf       	rjmp	.-44     	; 0x2e8c <__ultoa_invert+0x58>
    2eb8:	b4 e0       	ldi	r27, 0x04	; 4
    2eba:	a6 95       	lsr	r26
    2ebc:	97 95       	ror	r25
    2ebe:	87 95       	ror	r24
    2ec0:	77 95       	ror	r23
    2ec2:	67 95       	ror	r22
    2ec4:	ba 95       	dec	r27
    2ec6:	c9 f7       	brne	.-14     	; 0x2eba <__ultoa_invert+0x86>
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	61 05       	cpc	r22, r1
    2ecc:	71 05       	cpc	r23, r1
    2ece:	08 95       	ret
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	0a 2e       	mov	r0, r26
    2ed6:	06 94       	lsr	r0
    2ed8:	57 95       	ror	r21
    2eda:	47 95       	ror	r20
    2edc:	37 95       	ror	r19
    2ede:	27 95       	ror	r18
    2ee0:	ba 95       	dec	r27
    2ee2:	c9 f7       	brne	.-14     	; 0x2ed6 <__ultoa_invert+0xa2>
    2ee4:	62 0f       	add	r22, r18
    2ee6:	73 1f       	adc	r23, r19
    2ee8:	84 1f       	adc	r24, r20
    2eea:	95 1f       	adc	r25, r21
    2eec:	a0 1d       	adc	r26, r0
    2eee:	08 95       	ret

00002ef0 <_exit>:
    2ef0:	f8 94       	cli

00002ef2 <__stop_program>:
    2ef2:	ff cf       	rjmp	.-2      	; 0x2ef2 <__stop_program>
