
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00002e26  00002e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001e84  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c23  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005983  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e2       	ldi	r30, 0x26	; 38
      7c:	fe e2       	ldi	r31, 0x2E	; 46
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 34       	cpi	r26, 0x42	; 66
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 97 11 	call	0x232e	; 0x232e <main>
      8e:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	aa e3       	ldi	r26, 0x3A	; 58
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	8a e3       	ldi	r24, 0x3A	; 58
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__>

00000636 <__divsf3>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__prologue_saves__+0x10>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	b9 e0       	ldi	r27, 0x09	; 9
     654:	eb 2e       	mov	r14, r27
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     676:	29 85       	ldd	r18, Y+9	; 0x09
     678:	22 30       	cpi	r18, 0x02	; 2
     67a:	08 f4       	brcc	.+2      	; 0x67e <__divsf3+0x48>
     67c:	7e c0       	rjmp	.+252    	; 0x77a <__divsf3+0x144>
     67e:	39 89       	ldd	r19, Y+17	; 0x11
     680:	32 30       	cpi	r19, 0x02	; 2
     682:	10 f4       	brcc	.+4      	; 0x688 <__divsf3+0x52>
     684:	b8 01       	movw	r22, r16
     686:	7c c0       	rjmp	.+248    	; 0x780 <__divsf3+0x14a>
     688:	8a 85       	ldd	r24, Y+10	; 0x0a
     68a:	9a 89       	ldd	r25, Y+18	; 0x12
     68c:	89 27       	eor	r24, r25
     68e:	8a 87       	std	Y+10, r24	; 0x0a
     690:	24 30       	cpi	r18, 0x04	; 4
     692:	11 f0       	breq	.+4      	; 0x698 <__divsf3+0x62>
     694:	22 30       	cpi	r18, 0x02	; 2
     696:	31 f4       	brne	.+12     	; 0x6a4 <__divsf3+0x6e>
     698:	23 17       	cp	r18, r19
     69a:	09 f0       	breq	.+2      	; 0x69e <__divsf3+0x68>
     69c:	6e c0       	rjmp	.+220    	; 0x77a <__divsf3+0x144>
     69e:	6a e3       	ldi	r22, 0x3A	; 58
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	6e c0       	rjmp	.+220    	; 0x780 <__divsf3+0x14a>
     6a4:	34 30       	cpi	r19, 0x04	; 4
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <__divsf3+0x80>
     6a8:	1d 86       	std	Y+13, r1	; 0x0d
     6aa:	1e 86       	std	Y+14, r1	; 0x0e
     6ac:	1f 86       	std	Y+15, r1	; 0x0f
     6ae:	18 8a       	std	Y+16, r1	; 0x10
     6b0:	1c 86       	std	Y+12, r1	; 0x0c
     6b2:	1b 86       	std	Y+11, r1	; 0x0b
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__divsf3+0x88>
     6b6:	32 30       	cpi	r19, 0x02	; 2
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <__divsf3+0x8c>
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	89 87       	std	Y+9, r24	; 0x09
     6be:	b7 01       	movw	r22, r14
     6c0:	5f c0       	rjmp	.+190    	; 0x780 <__divsf3+0x14a>
     6c2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	28 1b       	sub	r18, r24
     6cc:	39 0b       	sbc	r19, r25
     6ce:	3c 87       	std	Y+12, r19	; 0x0c
     6d0:	2b 87       	std	Y+11, r18	; 0x0b
     6d2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d8:	18 89       	ldd	r17, Y+16	; 0x10
     6da:	ad 88       	ldd	r10, Y+21	; 0x15
     6dc:	be 88       	ldd	r11, Y+22	; 0x16
     6de:	cf 88       	ldd	r12, Y+23	; 0x17
     6e0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6e2:	ea 14       	cp	r14, r10
     6e4:	fb 04       	cpc	r15, r11
     6e6:	0c 05       	cpc	r16, r12
     6e8:	1d 05       	cpc	r17, r13
     6ea:	40 f4       	brcc	.+16     	; 0x6fc <__divsf3+0xc6>
     6ec:	ee 0c       	add	r14, r14
     6ee:	ff 1c       	adc	r15, r15
     6f0:	00 1f       	adc	r16, r16
     6f2:	11 1f       	adc	r17, r17
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	30 40       	sbci	r19, 0x00	; 0
     6f8:	3c 87       	std	Y+12, r19	; 0x0c
     6fa:	2b 87       	std	Y+11, r18	; 0x0b
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	b0 e4       	ldi	r27, 0x40	; 64
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	ea 14       	cp	r14, r10
     712:	fb 04       	cpc	r15, r11
     714:	0c 05       	cpc	r16, r12
     716:	1d 05       	cpc	r17, r13
     718:	40 f0       	brcs	.+16     	; 0x72a <__divsf3+0xf4>
     71a:	28 2b       	or	r18, r24
     71c:	39 2b       	or	r19, r25
     71e:	4a 2b       	or	r20, r26
     720:	5b 2b       	or	r21, r27
     722:	ea 18       	sub	r14, r10
     724:	fb 08       	sbc	r15, r11
     726:	0c 09       	sbc	r16, r12
     728:	1d 09       	sbc	r17, r13
     72a:	b6 95       	lsr	r27
     72c:	a7 95       	ror	r26
     72e:	97 95       	ror	r25
     730:	87 95       	ror	r24
     732:	ee 0c       	add	r14, r14
     734:	ff 1c       	adc	r15, r15
     736:	00 1f       	adc	r16, r16
     738:	11 1f       	adc	r17, r17
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	6f 31       	cpi	r22, 0x1F	; 31
     740:	71 05       	cpc	r23, r1
     742:	31 f7       	brne	.-52     	; 0x710 <__divsf3+0xda>
     744:	da 01       	movw	r26, r20
     746:	c9 01       	movw	r24, r18
     748:	8f 77       	andi	r24, 0x7F	; 127
     74a:	90 70       	andi	r25, 0x00	; 0
     74c:	a0 70       	andi	r26, 0x00	; 0
     74e:	b0 70       	andi	r27, 0x00	; 0
     750:	80 34       	cpi	r24, 0x40	; 64
     752:	91 05       	cpc	r25, r1
     754:	a1 05       	cpc	r26, r1
     756:	b1 05       	cpc	r27, r1
     758:	61 f4       	brne	.+24     	; 0x772 <__divsf3+0x13c>
     75a:	27 fd       	sbrc	r18, 7
     75c:	0a c0       	rjmp	.+20     	; 0x772 <__divsf3+0x13c>
     75e:	e1 14       	cp	r14, r1
     760:	f1 04       	cpc	r15, r1
     762:	01 05       	cpc	r16, r1
     764:	11 05       	cpc	r17, r1
     766:	29 f0       	breq	.+10     	; 0x772 <__divsf3+0x13c>
     768:	20 5c       	subi	r18, 0xC0	; 192
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	4f 4f       	sbci	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	20 78       	andi	r18, 0x80	; 128
     772:	2d 87       	std	Y+13, r18	; 0x0d
     774:	3e 87       	std	Y+14, r19	; 0x0e
     776:	4f 87       	std	Y+15, r20	; 0x0f
     778:	58 8b       	std	Y+16, r21	; 0x10
     77a:	be 01       	movw	r22, r28
     77c:	67 5f       	subi	r22, 0xF7	; 247
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	cb 01       	movw	r24, r22
     782:	0e 94 ab 04 	call	0x956	; 0x956 <__pack_f>
     786:	68 96       	adiw	r28, 0x18	; 24
     788:	ea e0       	ldi	r30, 0x0A	; 10
     78a:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__epilogue_restores__+0x10>

0000078e <__gtsf2>:
     78e:	a8 e1       	ldi	r26, 0x18	; 24
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ed ec       	ldi	r30, 0xCD	; 205
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     79a:	69 83       	std	Y+1, r22	; 0x01
     79c:	7a 83       	std	Y+2, r23	; 0x02
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	2d 83       	std	Y+5, r18	; 0x05
     7a4:	3e 83       	std	Y+6, r19	; 0x06
     7a6:	4f 83       	std	Y+7, r20	; 0x07
     7a8:	58 87       	std	Y+8, r21	; 0x08
     7aa:	89 e0       	ldi	r24, 0x09	; 9
     7ac:	e8 2e       	mov	r14, r24
     7ae:	f1 2c       	mov	r15, r1
     7b0:	ec 0e       	add	r14, r28
     7b2:	fd 1e       	adc	r15, r29
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	b7 01       	movw	r22, r14
     7ba:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     7be:	8e 01       	movw	r16, r28
     7c0:	0f 5e       	subi	r16, 0xEF	; 239
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	05 96       	adiw	r24, 0x05	; 5
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	40 f0       	brcs	.+16     	; 0x7e4 <__gtsf2+0x56>
     7d4:	89 89       	ldd	r24, Y+17	; 0x11
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	28 f0       	brcs	.+10     	; 0x7e4 <__gtsf2+0x56>
     7da:	c7 01       	movw	r24, r14
     7dc:	b8 01       	movw	r22, r16
     7de:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <__gtsf2+0x58>
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	68 96       	adiw	r28, 0x18	; 24
     7e8:	e6 e0       	ldi	r30, 0x06	; 6
     7ea:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

000007ee <__gesf2>:
     7ee:	a8 e1       	ldi	r26, 0x18	; 24
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	ed ef       	ldi	r30, 0xFD	; 253
     7f4:	f3 e0       	ldi	r31, 0x03	; 3
     7f6:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	7a 83       	std	Y+2, r23	; 0x02
     7fe:	8b 83       	std	Y+3, r24	; 0x03
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	2d 83       	std	Y+5, r18	; 0x05
     804:	3e 83       	std	Y+6, r19	; 0x06
     806:	4f 83       	std	Y+7, r20	; 0x07
     808:	58 87       	std	Y+8, r21	; 0x08
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	e8 2e       	mov	r14, r24
     80e:	f1 2c       	mov	r15, r1
     810:	ec 0e       	add	r14, r28
     812:	fd 1e       	adc	r15, r29
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	b7 01       	movw	r22, r14
     81a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     81e:	8e 01       	movw	r16, r28
     820:	0f 5e       	subi	r16, 0xEF	; 239
     822:	1f 4f       	sbci	r17, 0xFF	; 255
     824:	ce 01       	movw	r24, r28
     826:	05 96       	adiw	r24, 0x05	; 5
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	40 f0       	brcs	.+16     	; 0x844 <__gesf2+0x56>
     834:	89 89       	ldd	r24, Y+17	; 0x11
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	28 f0       	brcs	.+10     	; 0x844 <__gesf2+0x56>
     83a:	c7 01       	movw	r24, r14
     83c:	b8 01       	movw	r22, r16
     83e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     842:	01 c0       	rjmp	.+2      	; 0x846 <__gesf2+0x58>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	68 96       	adiw	r28, 0x18	; 24
     848:	e6 e0       	ldi	r30, 0x06	; 6
     84a:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

0000084e <__ltsf2>:
     84e:	a8 e1       	ldi	r26, 0x18	; 24
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	ed e2       	ldi	r30, 0x2D	; 45
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x18>
     85a:	69 83       	std	Y+1, r22	; 0x01
     85c:	7a 83       	std	Y+2, r23	; 0x02
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	2d 83       	std	Y+5, r18	; 0x05
     864:	3e 83       	std	Y+6, r19	; 0x06
     866:	4f 83       	std	Y+7, r20	; 0x07
     868:	58 87       	std	Y+8, r21	; 0x08
     86a:	89 e0       	ldi	r24, 0x09	; 9
     86c:	e8 2e       	mov	r14, r24
     86e:	f1 2c       	mov	r15, r1
     870:	ec 0e       	add	r14, r28
     872:	fd 1e       	adc	r15, r29
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	b7 01       	movw	r22, r14
     87a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     87e:	8e 01       	movw	r16, r28
     880:	0f 5e       	subi	r16, 0xEF	; 239
     882:	1f 4f       	sbci	r17, 0xFF	; 255
     884:	ce 01       	movw	r24, r28
     886:	05 96       	adiw	r24, 0x05	; 5
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	40 f0       	brcs	.+16     	; 0x8a4 <__ltsf2+0x56>
     894:	89 89       	ldd	r24, Y+17	; 0x11
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	28 f0       	brcs	.+10     	; 0x8a4 <__ltsf2+0x56>
     89a:	c7 01       	movw	r24, r14
     89c:	b8 01       	movw	r22, r16
     89e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fpcmp_parts_f>
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <__ltsf2+0x58>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	68 96       	adiw	r28, 0x18	; 24
     8a8:	e6 e0       	ldi	r30, 0x06	; 6
     8aa:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x18>

000008ae <__fixsfsi>:
     8ae:	ac e0       	ldi	r26, 0x0C	; 12
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	ed e5       	ldi	r30, 0x5D	; 93
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__prologue_saves__+0x20>
     8ba:	69 83       	std	Y+1, r22	; 0x01
     8bc:	7a 83       	std	Y+2, r23	; 0x02
     8be:	8b 83       	std	Y+3, r24	; 0x03
     8c0:	9c 83       	std	Y+4, r25	; 0x04
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	be 01       	movw	r22, r28
     8c8:	6b 5f       	subi	r22, 0xFB	; 251
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	0e 94 80 05 	call	0xb00	; 0xb00 <__unpack_f>
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	61 f1       	breq	.+88     	; 0x92e <__stack+0x2f>
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	50 f1       	brcs	.+84     	; 0x92e <__stack+0x2f>
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__fixsfsi+0x38>
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	88 23       	and	r24, r24
     8e2:	51 f1       	breq	.+84     	; 0x938 <__stack+0x39>
     8e4:	2e c0       	rjmp	.+92     	; 0x942 <__stack+0x43>
     8e6:	2f 81       	ldd	r18, Y+7	; 0x07
     8e8:	38 85       	ldd	r19, Y+8	; 0x08
     8ea:	37 fd       	sbrc	r19, 7
     8ec:	20 c0       	rjmp	.+64     	; 0x92e <__stack+0x2f>
     8ee:	6e 81       	ldd	r22, Y+6	; 0x06
     8f0:	2f 31       	cpi	r18, 0x1F	; 31
     8f2:	31 05       	cpc	r19, r1
     8f4:	1c f0       	brlt	.+6      	; 0x8fc <__fixsfsi+0x4e>
     8f6:	66 23       	and	r22, r22
     8f8:	f9 f0       	breq	.+62     	; 0x938 <__stack+0x39>
     8fa:	23 c0       	rjmp	.+70     	; 0x942 <__stack+0x43>
     8fc:	8e e1       	ldi	r24, 0x1E	; 30
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	29 85       	ldd	r18, Y+9	; 0x09
     906:	3a 85       	ldd	r19, Y+10	; 0x0a
     908:	4b 85       	ldd	r20, Y+11	; 0x0b
     90a:	5c 85       	ldd	r21, Y+12	; 0x0c
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0x17>
     90e:	56 95       	lsr	r21
     910:	47 95       	ror	r20
     912:	37 95       	ror	r19
     914:	27 95       	ror	r18
     916:	8a 95       	dec	r24
     918:	d2 f7       	brpl	.-12     	; 0x90e <__stack+0xf>
     91a:	66 23       	and	r22, r22
     91c:	b1 f0       	breq	.+44     	; 0x94a <__stack+0x4b>
     91e:	50 95       	com	r21
     920:	40 95       	com	r20
     922:	30 95       	com	r19
     924:	21 95       	neg	r18
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	4f 4f       	sbci	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	0e c0       	rjmp	.+28     	; 0x94a <__stack+0x4b>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f ef       	ldi	r20, 0xFF	; 255
     93e:	5f e7       	ldi	r21, 0x7F	; 127
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e8       	ldi	r21, 0x80	; 128
     94a:	b9 01       	movw	r22, r18
     94c:	ca 01       	movw	r24, r20
     94e:	2c 96       	adiw	r28, 0x0c	; 12
     950:	e2 e0       	ldi	r30, 0x02	; 2
     952:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__epilogue_restores__+0x20>

00000956 <__pack_f>:
     956:	df 92       	push	r13
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	fc 01       	movw	r30, r24
     962:	e4 80       	ldd	r14, Z+4	; 0x04
     964:	f5 80       	ldd	r15, Z+5	; 0x05
     966:	06 81       	ldd	r16, Z+6	; 0x06
     968:	17 81       	ldd	r17, Z+7	; 0x07
     96a:	d1 80       	ldd	r13, Z+1	; 0x01
     96c:	80 81       	ld	r24, Z
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	48 f4       	brcc	.+18     	; 0x984 <__pack_f+0x2e>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e1       	ldi	r26, 0x10	; 16
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 2a       	or	r14, r24
     97c:	f9 2a       	or	r15, r25
     97e:	0a 2b       	or	r16, r26
     980:	1b 2b       	or	r17, r27
     982:	a5 c0       	rjmp	.+330    	; 0xace <__pack_f+0x178>
     984:	84 30       	cpi	r24, 0x04	; 4
     986:	09 f4       	brne	.+2      	; 0x98a <__pack_f+0x34>
     988:	9f c0       	rjmp	.+318    	; 0xac8 <__pack_f+0x172>
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	21 f4       	brne	.+8      	; 0x996 <__pack_f+0x40>
     98e:	ee 24       	eor	r14, r14
     990:	ff 24       	eor	r15, r15
     992:	87 01       	movw	r16, r14
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <__pack_f+0x4a>
     996:	e1 14       	cp	r14, r1
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	19 f4       	brne	.+6      	; 0x9a6 <__pack_f+0x50>
     9a0:	e0 e0       	ldi	r30, 0x00	; 0
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	96 c0       	rjmp	.+300    	; 0xad2 <__pack_f+0x17c>
     9a6:	62 81       	ldd	r22, Z+2	; 0x02
     9a8:	73 81       	ldd	r23, Z+3	; 0x03
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	62 38       	cpi	r22, 0x82	; 130
     9ae:	79 07       	cpc	r23, r25
     9b0:	0c f0       	brlt	.+2      	; 0x9b4 <__pack_f+0x5e>
     9b2:	5b c0       	rjmp	.+182    	; 0xa6a <__pack_f+0x114>
     9b4:	22 e8       	ldi	r18, 0x82	; 130
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	26 1b       	sub	r18, r22
     9ba:	37 0b       	sbc	r19, r23
     9bc:	2a 31       	cpi	r18, 0x1A	; 26
     9be:	31 05       	cpc	r19, r1
     9c0:	2c f0       	brlt	.+10     	; 0x9cc <__pack_f+0x76>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	2a c0       	rjmp	.+84     	; 0xa20 <__pack_f+0xca>
     9cc:	b8 01       	movw	r22, r16
     9ce:	a7 01       	movw	r20, r14
     9d0:	02 2e       	mov	r0, r18
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__pack_f+0x86>
     9d4:	76 95       	lsr	r23
     9d6:	67 95       	ror	r22
     9d8:	57 95       	ror	r21
     9da:	47 95       	ror	r20
     9dc:	0a 94       	dec	r0
     9de:	d2 f7       	brpl	.-12     	; 0x9d4 <__pack_f+0x7e>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__pack_f+0x9c>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	aa 1f       	adc	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	2a 95       	dec	r18
     9f4:	d2 f7       	brpl	.-12     	; 0x9ea <__pack_f+0x94>
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	a1 09       	sbc	r26, r1
     9fa:	b1 09       	sbc	r27, r1
     9fc:	8e 21       	and	r24, r14
     9fe:	9f 21       	and	r25, r15
     a00:	a0 23       	and	r26, r16
     a02:	b1 23       	and	r27, r17
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	21 f0       	breq	.+8      	; 0xa14 <__pack_f+0xbe>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	9a 01       	movw	r18, r20
     a16:	ab 01       	movw	r20, r22
     a18:	28 2b       	or	r18, r24
     a1a:	39 2b       	or	r19, r25
     a1c:	4a 2b       	or	r20, r26
     a1e:	5b 2b       	or	r21, r27
     a20:	da 01       	movw	r26, r20
     a22:	c9 01       	movw	r24, r18
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	90 70       	andi	r25, 0x00	; 0
     a28:	a0 70       	andi	r26, 0x00	; 0
     a2a:	b0 70       	andi	r27, 0x00	; 0
     a2c:	80 34       	cpi	r24, 0x40	; 64
     a2e:	91 05       	cpc	r25, r1
     a30:	a1 05       	cpc	r26, r1
     a32:	b1 05       	cpc	r27, r1
     a34:	39 f4       	brne	.+14     	; 0xa44 <__pack_f+0xee>
     a36:	27 ff       	sbrs	r18, 7
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <__pack_f+0xf6>
     a3a:	20 5c       	subi	r18, 0xC0	; 192
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	4f 4f       	sbci	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__pack_f+0xf6>
     a44:	21 5c       	subi	r18, 0xC1	; 193
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	4f 4f       	sbci	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	20 30       	cpi	r18, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	3a 07       	cpc	r19, r26
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	4a 07       	cpc	r20, r26
     a5a:	a0 e4       	ldi	r26, 0x40	; 64
     a5c:	5a 07       	cpc	r21, r26
     a5e:	10 f0       	brcs	.+4      	; 0xa64 <__pack_f+0x10e>
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	79 01       	movw	r14, r18
     a66:	8a 01       	movw	r16, r20
     a68:	27 c0       	rjmp	.+78     	; 0xab8 <__pack_f+0x162>
     a6a:	60 38       	cpi	r22, 0x80	; 128
     a6c:	71 05       	cpc	r23, r1
     a6e:	64 f5       	brge	.+88     	; 0xac8 <__pack_f+0x172>
     a70:	fb 01       	movw	r30, r22
     a72:	e1 58       	subi	r30, 0x81	; 129
     a74:	ff 4f       	sbci	r31, 0xFF	; 255
     a76:	d8 01       	movw	r26, r16
     a78:	c7 01       	movw	r24, r14
     a7a:	8f 77       	andi	r24, 0x7F	; 127
     a7c:	90 70       	andi	r25, 0x00	; 0
     a7e:	a0 70       	andi	r26, 0x00	; 0
     a80:	b0 70       	andi	r27, 0x00	; 0
     a82:	80 34       	cpi	r24, 0x40	; 64
     a84:	91 05       	cpc	r25, r1
     a86:	a1 05       	cpc	r26, r1
     a88:	b1 05       	cpc	r27, r1
     a8a:	39 f4       	brne	.+14     	; 0xa9a <__pack_f+0x144>
     a8c:	e7 fe       	sbrs	r14, 7
     a8e:	0d c0       	rjmp	.+26     	; 0xaaa <__pack_f+0x154>
     a90:	80 e4       	ldi	r24, 0x40	; 64
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__pack_f+0x14c>
     a9a:	8f e3       	ldi	r24, 0x3F	; 63
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e8 0e       	add	r14, r24
     aa4:	f9 1e       	adc	r15, r25
     aa6:	0a 1f       	adc	r16, r26
     aa8:	1b 1f       	adc	r17, r27
     aaa:	17 ff       	sbrs	r17, 7
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <__pack_f+0x162>
     aae:	16 95       	lsr	r17
     ab0:	07 95       	ror	r16
     ab2:	f7 94       	ror	r15
     ab4:	e7 94       	ror	r14
     ab6:	31 96       	adiw	r30, 0x01	; 1
     ab8:	87 e0       	ldi	r24, 0x07	; 7
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d1 f7       	brne	.-12     	; 0xaba <__pack_f+0x164>
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__pack_f+0x17c>
     ac8:	ee 24       	eor	r14, r14
     aca:	ff 24       	eor	r15, r15
     acc:	87 01       	movw	r16, r14
     ace:	ef ef       	ldi	r30, 0xFF	; 255
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	6e 2f       	mov	r22, r30
     ad4:	67 95       	ror	r22
     ad6:	66 27       	eor	r22, r22
     ad8:	67 95       	ror	r22
     ada:	90 2f       	mov	r25, r16
     adc:	9f 77       	andi	r25, 0x7F	; 127
     ade:	d7 94       	ror	r13
     ae0:	dd 24       	eor	r13, r13
     ae2:	d7 94       	ror	r13
     ae4:	8e 2f       	mov	r24, r30
     ae6:	86 95       	lsr	r24
     ae8:	49 2f       	mov	r20, r25
     aea:	46 2b       	or	r20, r22
     aec:	58 2f       	mov	r21, r24
     aee:	5d 29       	or	r21, r13
     af0:	b7 01       	movw	r22, r14
     af2:	ca 01       	movw	r24, r20
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	08 95       	ret

00000b00 <__unpack_f>:
     b00:	fc 01       	movw	r30, r24
     b02:	db 01       	movw	r26, r22
     b04:	40 81       	ld	r20, Z
     b06:	51 81       	ldd	r21, Z+1	; 0x01
     b08:	22 81       	ldd	r18, Z+2	; 0x02
     b0a:	62 2f       	mov	r22, r18
     b0c:	6f 77       	andi	r22, 0x7F	; 127
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	22 1f       	adc	r18, r18
     b12:	22 27       	eor	r18, r18
     b14:	22 1f       	adc	r18, r18
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	89 2f       	mov	r24, r25
     b1a:	88 0f       	add	r24, r24
     b1c:	82 2b       	or	r24, r18
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	99 1f       	adc	r25, r25
     b24:	99 27       	eor	r25, r25
     b26:	99 1f       	adc	r25, r25
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	9c 93       	st	X, r25
     b2c:	11 97       	sbiw	r26, 0x01	; 1
     b2e:	21 15       	cp	r18, r1
     b30:	31 05       	cpc	r19, r1
     b32:	a9 f5       	brne	.+106    	; 0xb9e <__unpack_f+0x9e>
     b34:	41 15       	cp	r20, r1
     b36:	51 05       	cpc	r21, r1
     b38:	61 05       	cpc	r22, r1
     b3a:	71 05       	cpc	r23, r1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <__unpack_f+0x42>
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	37 c0       	rjmp	.+110    	; 0xbb0 <__unpack_f+0xb0>
     b42:	82 e8       	ldi	r24, 0x82	; 130
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	13 96       	adiw	r26, 0x03	; 3
     b48:	9c 93       	st	X, r25
     b4a:	8e 93       	st	-X, r24
     b4c:	12 97       	sbiw	r26, 0x02	; 2
     b4e:	9a 01       	movw	r18, r20
     b50:	ab 01       	movw	r20, r22
     b52:	67 e0       	ldi	r22, 0x07	; 7
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	6a 95       	dec	r22
     b5e:	d1 f7       	brne	.-12     	; 0xb54 <__unpack_f+0x54>
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	8c 93       	st	X, r24
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <__unpack_f+0x80>
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	44 1f       	adc	r20, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	12 96       	adiw	r26, 0x02	; 2
     b70:	8d 91       	ld	r24, X+
     b72:	9c 91       	ld	r25, X
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	9c 93       	st	X, r25
     b7c:	8e 93       	st	-X, r24
     b7e:	12 97       	sbiw	r26, 0x02	; 2
     b80:	20 30       	cpi	r18, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	38 07       	cpc	r19, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	48 07       	cpc	r20, r24
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	58 07       	cpc	r21, r24
     b8e:	58 f3       	brcs	.-42     	; 0xb66 <__unpack_f+0x66>
     b90:	14 96       	adiw	r26, 0x04	; 4
     b92:	2d 93       	st	X+, r18
     b94:	3d 93       	st	X+, r19
     b96:	4d 93       	st	X+, r20
     b98:	5c 93       	st	X, r21
     b9a:	17 97       	sbiw	r26, 0x07	; 7
     b9c:	08 95       	ret
     b9e:	2f 3f       	cpi	r18, 0xFF	; 255
     ba0:	31 05       	cpc	r19, r1
     ba2:	79 f4       	brne	.+30     	; 0xbc2 <__unpack_f+0xc2>
     ba4:	41 15       	cp	r20, r1
     ba6:	51 05       	cpc	r21, r1
     ba8:	61 05       	cpc	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	19 f4       	brne	.+6      	; 0xbb4 <__unpack_f+0xb4>
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	8c 93       	st	X, r24
     bb2:	08 95       	ret
     bb4:	64 ff       	sbrs	r22, 4
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__unpack_f+0xbe>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8c 93       	st	X, r24
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <__unpack_f+0xe2>
     bbe:	1c 92       	st	X, r1
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <__unpack_f+0xe2>
     bc2:	2f 57       	subi	r18, 0x7F	; 127
     bc4:	30 40       	sbci	r19, 0x00	; 0
     bc6:	13 96       	adiw	r26, 0x03	; 3
     bc8:	3c 93       	st	X, r19
     bca:	2e 93       	st	-X, r18
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	8c 93       	st	X, r24
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	44 0f       	add	r20, r20
     bd6:	55 1f       	adc	r21, r21
     bd8:	66 1f       	adc	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	8a 95       	dec	r24
     bde:	d1 f7       	brne	.-12     	; 0xbd4 <__unpack_f+0xd4>
     be0:	70 64       	ori	r23, 0x40	; 64
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	4d 93       	st	X+, r20
     be6:	5d 93       	st	X+, r21
     be8:	6d 93       	st	X+, r22
     bea:	7c 93       	st	X, r23
     bec:	17 97       	sbiw	r26, 0x07	; 7
     bee:	08 95       	ret

00000bf0 <__fpcmp_parts_f>:
     bf0:	1f 93       	push	r17
     bf2:	dc 01       	movw	r26, r24
     bf4:	fb 01       	movw	r30, r22
     bf6:	9c 91       	ld	r25, X
     bf8:	92 30       	cpi	r25, 0x02	; 2
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <__fpcmp_parts_f+0xe>
     bfc:	47 c0       	rjmp	.+142    	; 0xc8c <__fpcmp_parts_f+0x9c>
     bfe:	80 81       	ld	r24, Z
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	08 f4       	brcc	.+2      	; 0xc06 <__fpcmp_parts_f+0x16>
     c04:	43 c0       	rjmp	.+134    	; 0xc8c <__fpcmp_parts_f+0x9c>
     c06:	94 30       	cpi	r25, 0x04	; 4
     c08:	51 f4       	brne	.+20     	; 0xc1e <__fpcmp_parts_f+0x2e>
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	1c 91       	ld	r17, X
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	99 f5       	brne	.+102    	; 0xc78 <__fpcmp_parts_f+0x88>
     c12:	81 81       	ldd	r24, Z+1	; 0x01
     c14:	68 2f       	mov	r22, r24
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	61 1b       	sub	r22, r17
     c1a:	71 09       	sbc	r23, r1
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <__fpcmp_parts_f+0xac>
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	21 f0       	breq	.+8      	; 0xc2a <__fpcmp_parts_f+0x3a>
     c22:	92 30       	cpi	r25, 0x02	; 2
     c24:	31 f4       	brne	.+12     	; 0xc32 <__fpcmp_parts_f+0x42>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	b9 f1       	breq	.+110    	; 0xc98 <__fpcmp_parts_f+0xa8>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	88 23       	and	r24, r24
     c2e:	89 f1       	breq	.+98     	; 0xc92 <__fpcmp_parts_f+0xa2>
     c30:	2d c0       	rjmp	.+90     	; 0xc8c <__fpcmp_parts_f+0x9c>
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	1c 91       	ld	r17, X
     c36:	11 97       	sbiw	r26, 0x01	; 1
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	f1 f0       	breq	.+60     	; 0xc78 <__fpcmp_parts_f+0x88>
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	18 17       	cp	r17, r24
     c40:	d9 f4       	brne	.+54     	; 0xc78 <__fpcmp_parts_f+0x88>
     c42:	12 96       	adiw	r26, 0x02	; 2
     c44:	2d 91       	ld	r18, X+
     c46:	3c 91       	ld	r19, X
     c48:	13 97       	sbiw	r26, 0x03	; 3
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	82 17       	cp	r24, r18
     c50:	93 07       	cpc	r25, r19
     c52:	94 f0       	brlt	.+36     	; 0xc78 <__fpcmp_parts_f+0x88>
     c54:	28 17       	cp	r18, r24
     c56:	39 07       	cpc	r19, r25
     c58:	bc f0       	brlt	.+46     	; 0xc88 <__fpcmp_parts_f+0x98>
     c5a:	14 96       	adiw	r26, 0x04	; 4
     c5c:	8d 91       	ld	r24, X+
     c5e:	9d 91       	ld	r25, X+
     c60:	0d 90       	ld	r0, X+
     c62:	bc 91       	ld	r27, X
     c64:	a0 2d       	mov	r26, r0
     c66:	24 81       	ldd	r18, Z+4	; 0x04
     c68:	35 81       	ldd	r19, Z+5	; 0x05
     c6a:	46 81       	ldd	r20, Z+6	; 0x06
     c6c:	57 81       	ldd	r21, Z+7	; 0x07
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	4a 07       	cpc	r20, r26
     c74:	5b 07       	cpc	r21, r27
     c76:	18 f4       	brcc	.+6      	; 0xc7e <__fpcmp_parts_f+0x8e>
     c78:	11 23       	and	r17, r17
     c7a:	41 f0       	breq	.+16     	; 0xc8c <__fpcmp_parts_f+0x9c>
     c7c:	0a c0       	rjmp	.+20     	; 0xc92 <__fpcmp_parts_f+0xa2>
     c7e:	82 17       	cp	r24, r18
     c80:	93 07       	cpc	r25, r19
     c82:	a4 07       	cpc	r26, r20
     c84:	b5 07       	cpc	r27, r21
     c86:	40 f4       	brcc	.+16     	; 0xc98 <__fpcmp_parts_f+0xa8>
     c88:	11 23       	and	r17, r17
     c8a:	19 f0       	breq	.+6      	; 0xc92 <__fpcmp_parts_f+0xa2>
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <__fpcmp_parts_f+0xac>
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	7f ef       	ldi	r23, 0xFF	; 255
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <__fpcmp_parts_f+0xac>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	cb 01       	movw	r24, r22
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <DIO_voidInit>:
/* MCAL layer */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void DIO_voidInit(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
    DIO_DDRB_REG = CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
     caa:	e4 e2       	ldi	r30, 0x24	; 36
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	83 e2       	ldi	r24, 0x23	; 35
     cb0:	80 83       	st	Z, r24
    				   ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
    DIO_DDRC_REG = CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION
     cb2:	e7 e2       	ldi	r30, 0x27	; 39
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
                       ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
    DIO_DDRD_REG = CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION
     cb8:	ea e2       	ldi	r30, 0x2A	; 42
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	80 83       	st	Z, r24
                       ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
    /*INITIAL VALUES FOR PINS*/                
     DIO_PORTB_REG = CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE
     cc0:	e5 e2       	ldi	r30, 0x25	; 37
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
                         ,DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
     DIO_PORTC_REG = CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE
     cc6:	e8 e2       	ldi	r30, 0x28	; 40
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
                         ,DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
     DIO_PORTD_REG = CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE
     ccc:	eb e2       	ldi	r30, 0x2B	; 43
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
                         ,DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <DIO_u8SetPinDirection>:
                        
u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	2c 97       	sbiw	r28, 0x0c	; 12
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	6b 83       	std	Y+3, r22	; 0x03
     cf0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK ;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)) )
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8SetPinDirection+0x26>
     cfc:	c8 c0       	rjmp	.+400    	; 0xe8e <DIO_u8SetPinDirection+0x1b6>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	08 f0       	brcs	.+2      	; 0xd06 <DIO_u8SetPinDirection+0x2e>
     d04:	c4 c0       	rjmp	.+392    	; 0xe8e <DIO_u8SetPinDirection+0x1b6>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	88 23       	and	r24, r24
     d0a:	21 f0       	breq	.+8      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d12:	bd c0       	rjmp	.+378    	; 0xe8e <DIO_u8SetPinDirection+0x1b6>
    {
        switch (Copy_u8PortId)
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3c 87       	std	Y+12, r19	; 0x0c
     d1c:	2b 87       	std	Y+11, r18	; 0x0b
     d1e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d20:	9c 85       	ldd	r25, Y+12	; 0x0c
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <DIO_u8SetPinDirection+0x52>
     d28:	43 c0       	rjmp	.+134    	; 0xdb0 <DIO_u8SetPinDirection+0xd8>
     d2a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d2c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <DIO_u8SetPinDirection+0x5e>
     d34:	75 c0       	rjmp	.+234    	; 0xe20 <DIO_u8SetPinDirection+0x148>
     d36:	8b 85       	ldd	r24, Y+11	; 0x0b
     d38:	9c 85       	ldd	r25, Y+12	; 0x0c
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	09 f0       	breq	.+2      	; 0xd40 <DIO_u8SetPinDirection+0x68>
     d3e:	a8 c0       	rjmp	.+336    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinDirection)
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3a 87       	std	Y+10, r19	; 0x0a
     d48:	29 87       	std	Y+9, r18	; 0x09
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	d1 f0       	breq	.+52     	; 0xd86 <DIO_u8SetPinDirection+0xae>
     d52:	29 85       	ldd	r18, Y+9	; 0x09
     d54:	3a 85       	ldd	r19, Y+10	; 0x0a
     d56:	21 30       	cpi	r18, 0x01	; 1
     d58:	31 05       	cpc	r19, r1
     d5a:	09 f0       	breq	.+2      	; 0xd5e <DIO_u8SetPinDirection+0x86>
     d5c:	99 c0       	rjmp	.+306    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     d5e:	a4 e2       	ldi	r26, 0x24	; 36
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e2       	ldi	r30, 0x24	; 36
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_u8SetPinDirection+0xa4>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_u8SetPinDirection+0xa0>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	85 c0       	rjmp	.+266    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRB_REG,Copy_u8PinId)  ; break;
     d86:	a4 e2       	ldi	r26, 0x24	; 36
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e4 e2       	ldi	r30, 0x24	; 36
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_u8SetPinDirection+0xcc>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_u8SetPinDirection+0xc8>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	70 c0       	rjmp	.+224    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinDirection)
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	38 87       	std	Y+8, r19	; 0x08
     db8:	2f 83       	std	Y+7, r18	; 0x07
     dba:	8f 81       	ldd	r24, Y+7	; 0x07
     dbc:	98 85       	ldd	r25, Y+8	; 0x08
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	d1 f0       	breq	.+52     	; 0xdf6 <DIO_u8SetPinDirection+0x11e>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f0       	breq	.+2      	; 0xdce <DIO_u8SetPinDirection+0xf6>
     dcc:	61 c0       	rjmp	.+194    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;
     dce:	a7 e2       	ldi	r26, 0x27	; 39
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e7 e2       	ldi	r30, 0x27	; 39
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_u8SetPinDirection+0x114>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_u8SetPinDirection+0x110>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	4d c0       	rjmp	.+154    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRC_REG,Copy_u8PinId)  ; break;  
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_u8SetPinDirection+0x13c>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_u8SetPinDirection+0x138>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	38 c0       	rjmp	.+112    	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            } 
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinDirection)
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3e 83       	std	Y+6, r19	; 0x06
     e28:	2d 83       	std	Y+5, r18	; 0x05
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	c9 f0       	breq	.+50     	; 0xe64 <DIO_u8SetPinDirection+0x18c>
     e32:	2d 81       	ldd	r18, Y+5	; 0x05
     e34:	3e 81       	ldd	r19, Y+6	; 0x06
     e36:	21 30       	cpi	r18, 0x01	; 1
     e38:	31 05       	cpc	r19, r1
     e3a:	51 f5       	brne	.+84     	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            {
                case DIO_u8_OUTPUT : SET_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;
     e3c:	aa e2       	ldi	r26, 0x2A	; 42
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ea e2       	ldi	r30, 0x2A	; 42
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_u8SetPinDirection+0x182>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_u8SetPinDirection+0x17e>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	16 c0       	rjmp	.+44     	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
                case DIO_u8_INPUT  : CLR_BIT(DIO_DDRD_REG,Copy_u8PinId)  ; break;  
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x1aa>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x1a6>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <DIO_u8SetPinDirection+0x1b8>
            } 
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
     e8e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
}
     e92:	2c 96       	adiw	r28, 0x0c	; 12
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	2c 97       	sbiw	r28, 0x0c	; 12
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	8a 83       	std	Y+2, r24	; 0x02
     eba:	6b 83       	std	Y+3, r22	; 0x03
     ebc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <=DIO_u8_PIN7)&& ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	08 f0       	brcs	.+2      	; 0xeca <DIO_u8SetPinValue+0x26>
     ec8:	c8 c0       	rjmp	.+400    	; 0x105a <DIO_u8SetPinValue+0x1b6>
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 30       	cpi	r24, 0x08	; 8
     ece:	08 f0       	brcs	.+2      	; 0xed2 <DIO_u8SetPinValue+0x2e>
     ed0:	c4 c0       	rjmp	.+392    	; 0x105a <DIO_u8SetPinValue+0x1b6>
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	21 f0       	breq	.+8      	; 0xee0 <DIO_u8SetPinValue+0x3c>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <DIO_u8SetPinValue+0x3c>
     ede:	bd c0       	rjmp	.+378    	; 0x105a <DIO_u8SetPinValue+0x1b6>
    {
        switch (Copy_u8PortId)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3c 87       	std	Y+12, r19	; 0x0c
     ee8:	2b 87       	std	Y+11, r18	; 0x0b
     eea:	8b 85       	ldd	r24, Y+11	; 0x0b
     eec:	9c 85       	ldd	r25, Y+12	; 0x0c
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <DIO_u8SetPinValue+0x52>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <DIO_u8SetPinValue+0xd8>
     ef6:	2b 85       	ldd	r18, Y+11	; 0x0b
     ef8:	3c 85       	ldd	r19, Y+12	; 0x0c
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <DIO_u8SetPinValue+0x5e>
     f00:	75 c0       	rjmp	.+234    	; 0xfec <DIO_u8SetPinValue+0x148>
     f02:	8b 85       	ldd	r24, Y+11	; 0x0b
     f04:	9c 85       	ldd	r25, Y+12	; 0x0c
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_u8SetPinValue+0x68>
     f0a:	a8 c0       	rjmp	.+336    	; 0x105c <DIO_u8SetPinValue+0x1b8>
        {
        case DIO_u8_PORTB : 
            switch (Copy_u8PinValue)
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3a 87       	std	Y+10, r19	; 0x0a
     f14:	29 87       	std	Y+9, r18	; 0x09
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <DIO_u8SetPinValue+0xae>
     f1e:	29 85       	ldd	r18, Y+9	; 0x09
     f20:	3a 85       	ldd	r19, Y+10	; 0x0a
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <DIO_u8SetPinValue+0x86>
     f28:	99 c0       	rjmp	.+306    	; 0x105c <DIO_u8SetPinValue+0x1b8>
            {
                case DIO_u8_HIGH : SET_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;
     f2a:	a5 e2       	ldi	r26, 0x25	; 37
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e2       	ldi	r30, 0x25	; 37
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_u8SetPinValue+0xa4>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_u8SetPinValue+0xa0>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	85 c0       	rjmp	.+266    	; 0x105c <DIO_u8SetPinValue+0x1b8>
                case DIO_u8_LOW  : CLR_BIT(DIO_PORTB_REG,Copy_u8PinId)   ; break;  
     f52:	a5 e2       	ldi	r26, 0x25	; 37
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e2       	ldi	r30, 0x25	; 37
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_u8SetPinValue+0xcc>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_u8SetPinValue+0xc8>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	70 c0       	rjmp	.+224    	; 0x105c <DIO_u8SetPinValue+0x1b8>
            }    
            break;
        case DIO_u8_PORTC : 
            switch (Copy_u8PinValue)
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	38 87       	std	Y+8, r19	; 0x08
     f84:	2f 83       	std	Y+7, r18	; 0x07
     f86:	8f 81       	ldd	r24, Y+7	; 0x07
     f88:	98 85       	ldd	r25, Y+8	; 0x08
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	d1 f0       	breq	.+52     	; 0xfc2 <DIO_u8SetPinValue+0x11e>
     f8e:	2f 81       	ldd	r18, Y+7	; 0x07
     f90:	38 85       	ldd	r19, Y+8	; 0x08
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <DIO_u8SetPinValue+0xf6>
     f98:	61 c0       	rjmp	.+194    	; 0x105c <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
     f9a:	a8 e2       	ldi	r26, 0x28	; 40
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e8 e2       	ldi	r30, 0x28	; 40
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_u8SetPinValue+0x114>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_u8SetPinValue+0x110>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	4d c0       	rjmp	.+154    	; 0x105c <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTC_REG ,Copy_u8PinId)   ; break;
     fc2:	a8 e2       	ldi	r26, 0x28	; 40
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e2       	ldi	r30, 0x28	; 40
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0x13c>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0x138>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	38 c0       	rjmp	.+112    	; 0x105c <DIO_u8SetPinValue+0x1b8>
                }
            break;
        case DIO_u8_PORTD : 
            switch (Copy_u8PinValue)
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3e 83       	std	Y+6, r19	; 0x06
     ff4:	2d 83       	std	Y+5, r18	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	c9 f0       	breq	.+50     	; 0x1030 <DIO_u8SetPinValue+0x18c>
     ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    1000:	3e 81       	ldd	r19, Y+6	; 0x06
    1002:	21 30       	cpi	r18, 0x01	; 1
    1004:	31 05       	cpc	r19, r1
    1006:	51 f5       	brne	.+84     	; 0x105c <DIO_u8SetPinValue+0x1b8>
                {
                    case DIO_u8_HIGH : SET_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break;
    1008:	ab e2       	ldi	r26, 0x2B	; 43
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e2       	ldi	r30, 0x2B	; 43
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_u8SetPinValue+0x182>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_u8SetPinValue+0x17e>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	16 c0       	rjmp	.+44     	; 0x105c <DIO_u8SetPinValue+0x1b8>
                    case DIO_u8_LOW  : CLR_BIT(DIO_PORTD_REG,Copy_u8PinId)   ; break; 
    1030:	ab e2       	ldi	r26, 0x2B	; 43
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	eb e2       	ldi	r30, 0x2B	; 43
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_u8SetPinValue+0x1aa>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_u8SetPinValue+0x1a6>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	01 c0       	rjmp	.+2      	; 0x105c <DIO_u8SetPinValue+0x1b8>
            break;        
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    105a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	2c 96       	adiw	r28, 0x0c	; 12
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8PinValue)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	28 97       	sbiw	r28, 0x08	; 8
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	6c 83       	std	Y+4, r22	; 0x04
    1088:	5e 83       	std	Y+6, r21	; 0x06
    108a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ReturnState = STD_TYPE_OK;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue; // variable to read the pin value
    if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8PinValue!=NULL))
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	08 f0       	brcs	.+2      	; 0x1098 <DIO_u8GetPinValue+0x28>
    1096:	76 c0       	rjmp	.+236    	; 0x1184 <DIO_u8GetPinValue+0x114>
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <DIO_u8GetPinValue+0x30>
    109e:	72 c0       	rjmp	.+228    	; 0x1184 <DIO_u8GetPinValue+0x114>
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <DIO_u8GetPinValue+0x3a>
    10a8:	6d c0       	rjmp	.+218    	; 0x1184 <DIO_u8GetPinValue+0x114>
    {
        switch (Copy_u8PortId)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	38 87       	std	Y+8, r19	; 0x08
    10b2:	2f 83       	std	Y+7, r18	; 0x07
    10b4:	4f 81       	ldd	r20, Y+7	; 0x07
    10b6:	58 85       	ldd	r21, Y+8	; 0x08
    10b8:	41 30       	cpi	r20, 0x01	; 1
    10ba:	51 05       	cpc	r21, r1
    10bc:	49 f1       	breq	.+82     	; 0x1110 <DIO_u8GetPinValue+0xa0>
    10be:	8f 81       	ldd	r24, Y+7	; 0x07
    10c0:	98 85       	ldd	r25, Y+8	; 0x08
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <DIO_u8GetPinValue+0x5a>
    10c8:	40 c0       	rjmp	.+128    	; 0x114a <DIO_u8GetPinValue+0xda>
    10ca:	2f 81       	ldd	r18, Y+7	; 0x07
    10cc:	38 85       	ldd	r19, Y+8	; 0x08
    10ce:	21 15       	cp	r18, r1
    10d0:	31 05       	cpc	r19, r1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <DIO_u8GetPinValue+0x66>
    10d4:	58 c0       	rjmp	.+176    	; 0x1186 <DIO_u8GetPinValue+0x116>
        {
            case DIO_u8_PORTB :
                Local_u8PinValue = GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    10d6:	e3 e2       	ldi	r30, 0x23	; 35
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a9 01       	movw	r20, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_u8GetPinValue+0x7e>
    10ea:	55 95       	asr	r21
    10ec:	47 95       	ror	r20
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_u8GetPinValue+0x7a>
    10f2:	ca 01       	movw	r24, r20
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	29 f4       	brne	.+10     	; 0x1108 <DIO_u8GetPinValue+0x98>
                	{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    10fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1100:	fe 81       	ldd	r31, Y+6	; 0x06
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 83       	st	Z, r24
    1106:	3f c0       	rjmp	.+126    	; 0x1186 <DIO_u8GetPinValue+0x116>
                else
                	{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1108:	ed 81       	ldd	r30, Y+5	; 0x05
    110a:	fe 81       	ldd	r31, Y+6	; 0x06
    110c:	10 82       	st	Z, r1
    110e:	3b c0       	rjmp	.+118    	; 0x1186 <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTC :
                Local_u8PinValue = GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    1110:	e6 e2       	ldi	r30, 0x26	; 38
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8GetPinValue+0xb8>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8GetPinValue+0xb4>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	29 f4       	brne	.+10     	; 0x1142 <DIO_u8GetPinValue+0xd2>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1138:	ed 81       	ldd	r30, Y+5	; 0x05
    113a:	fe 81       	ldd	r31, Y+6	; 0x06
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 83       	st	Z, r24
    1140:	22 c0       	rjmp	.+68     	; 0x1186 <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    1142:	ed 81       	ldd	r30, Y+5	; 0x05
    1144:	fe 81       	ldd	r31, Y+6	; 0x06
    1146:	10 82       	st	Z, r1
    1148:	1e c0       	rjmp	.+60     	; 0x1186 <DIO_u8GetPinValue+0x116>
            break;
            case DIO_u8_PORTD :
                Local_u8PinValue = GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    114a:	e9 e2       	ldi	r30, 0x29	; 41
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8GetPinValue+0xf2>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8GetPinValue+0xee>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
                if(DIO_u8_HIGH==Local_u8PinValue)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	29 f4       	brne	.+10     	; 0x117c <DIO_u8GetPinValue+0x10c>
					{*Copy_Pu8PinValue = DIO_u8_HIGH;}
    1172:	ed 81       	ldd	r30, Y+5	; 0x05
    1174:	fe 81       	ldd	r31, Y+6	; 0x06
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 83       	st	Z, r24
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <DIO_u8GetPinValue+0x116>
				else
					{*Copy_Pu8PinValue = DIO_u8_LOW ;}
    117c:	ed 81       	ldd	r30, Y+5	; 0x05
    117e:	fe 81       	ldd	r31, Y+6	; 0x06
    1180:	10 82       	st	Z, r1
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <DIO_u8GetPinValue+0x116>

        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1184:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ReturnState;
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1188:	28 96       	adiw	r28, 0x08	; 8
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2b 97       	sbiw	r28, 0x0b	; 11
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId <= DIO_u8_PORTD)&&((Copy_u8PortDirection == DIO_u8_INPUT)||(Copy_u8PortDirection == DIO_u8_OUTPUT)))
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	08 f0       	brcs	.+2      	; 0x11be <DIO_u8SetPortDirection+0x24>
    11bc:	60 c0       	rjmp	.+192    	; 0x127e <DIO_u8SetPortDirection+0xe4>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 23       	and	r24, r24
    11c2:	21 f0       	breq	.+8      	; 0x11cc <DIO_u8SetPortDirection+0x32>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	09 f0       	breq	.+2      	; 0x11cc <DIO_u8SetPortDirection+0x32>
    11ca:	59 c0       	rjmp	.+178    	; 0x127e <DIO_u8SetPortDirection+0xe4>
    {
        switch (Copy_u8PortId)
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3b 87       	std	Y+11, r19	; 0x0b
    11d4:	2a 87       	std	Y+10, r18	; 0x0a
    11d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f1       	breq	.+66     	; 0x1222 <DIO_u8SetPortDirection+0x88>
    11e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    11e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	99 f1       	breq	.+102    	; 0x1250 <DIO_u8SetPortDirection+0xb6>
    11ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <DIO_u8SetPortDirection+0x5a>
    11f2:	46 c0       	rjmp	.+140    	; 0x1280 <DIO_u8SetPortDirection+0xe6>
        {
            case DIO_u8_PORTB : 
                switch (Copy_u8PortDirection)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	39 87       	std	Y+9, r19	; 0x09
    11fc:	28 87       	std	Y+8, r18	; 0x08
    11fe:	88 85       	ldd	r24, Y+8	; 0x08
    1200:	99 85       	ldd	r25, Y+9	; 0x09
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	51 f0       	breq	.+20     	; 0x121a <DIO_u8SetPortDirection+0x80>
    1206:	28 85       	ldd	r18, Y+8	; 0x08
    1208:	39 85       	ldd	r19, Y+9	; 0x09
    120a:	21 30       	cpi	r18, 0x01	; 1
    120c:	31 05       	cpc	r19, r1
    120e:	c1 f5       	brne	.+112    	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRB_REG =0xff; break;
    1210:	e4 e2       	ldi	r30, 0x24	; 36
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	80 83       	st	Z, r24
    1218:	33 c0       	rjmp	.+102    	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRB_REG =0x00; break;
    121a:	e4 e2       	ldi	r30, 0x24	; 36
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	10 82       	st	Z, r1
    1220:	2f c0       	rjmp	.+94     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                }
            break;
            case DIO_u8_PORTC : 
                switch (Copy_u8PortDirection)
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3f 83       	std	Y+7, r19	; 0x07
    122a:	2e 83       	std	Y+6, r18	; 0x06
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	51 f0       	breq	.+20     	; 0x1248 <DIO_u8SetPortDirection+0xae>
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	3f 81       	ldd	r19, Y+7	; 0x07
    1238:	21 30       	cpi	r18, 0x01	; 1
    123a:	31 05       	cpc	r19, r1
    123c:	09 f5       	brne	.+66     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRC_REG =0xff; break;
    123e:	e7 e2       	ldi	r30, 0x27	; 39
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	80 83       	st	Z, r24
    1246:	1c c0       	rjmp	.+56     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRC_REG =0x00; break;
    1248:	e7 e2       	ldi	r30, 0x27	; 39
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	10 82       	st	Z, r1
    124e:	18 c0       	rjmp	.+48     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                }
            break;
            case DIO_u8_PORTD : 
                switch (Copy_u8PortDirection)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	51 f0       	breq	.+20     	; 0x1276 <DIO_u8SetPortDirection+0xdc>
    1262:	2c 81       	ldd	r18, Y+4	; 0x04
    1264:	3d 81       	ldd	r19, Y+5	; 0x05
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	31 05       	cpc	r19, r1
    126a:	51 f4       	brne	.+20     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                {
                    case DIO_u8_OUTPUT:  DIO_DDRD_REG =0xff; break;
    126c:	ea e2       	ldi	r30, 0x2A	; 42
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	80 83       	st	Z, r24
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <DIO_u8SetPortDirection+0xe6>
                    case DIO_u8_INPUT :  DIO_DDRD_REG =0x00; break;
    1276:	ea e2       	ldi	r30, 0x2A	; 42
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	10 82       	st	Z, r1
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <DIO_u8SetPortDirection+0xe6>
            break;
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    127e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    1280:	89 81       	ldd	r24, Y+1	; 0x01

}
    1282:	2b 96       	adiw	r28, 0x0b	; 11
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue     (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_u8SetPortValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_u8SetPortValue+0x8>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8a 83       	std	Y+2, r24	; 0x02
    12a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortId)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	71 f0       	breq	.+28     	; 0x12da <DIO_u8SetPortValue+0x46>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <DIO_u8SetPortValue+0x50>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	79 f4       	brne	.+30     	; 0x12ee <DIO_u8SetPortValue+0x5a>
    {
        case DIO_u8_PORTB : DIO_PORTB_REG = Copy_u8PortValue; break;
    12d0:	e5 e2       	ldi	r30, 0x25	; 37
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	80 83       	st	Z, r24
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTC : DIO_PORTC_REG = Copy_u8PortValue; break;
    12da:	e8 e2       	ldi	r30, 0x28	; 40
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	80 83       	st	Z, r24
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <DIO_u8SetPortValue+0x5c>
        case DIO_u8_PORTD : DIO_PORTD_REG = Copy_u8PortValue; break;
    12e4:	eb e2       	ldi	r30, 0x2B	; 43
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	80 83       	st	Z, r24
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <DIO_u8SetPortValue+0x5c>
        default : Local_u8ReturnState = STD_TYPE_NOK;         break;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <Dio_u8GetPortValue>:

u8 Dio_u8GetPortValue     (u8 Copy_u8PortId,u8 *Copy_Pu8PortValue)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <Dio_u8GetPortValue+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <Dio_u8GetPortValue+0x8>
    130a:	00 d0       	rcall	.+0      	; 0x130c <Dio_u8GetPortValue+0xa>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8a 83       	std	Y+2, r24	; 0x02
    1312:	7c 83       	std	Y+4, r23	; 0x04
    1314:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8PortId >= DIO_u8_PORTD)&&(Copy_Pu8PortValue!=NULL))
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	60 f1       	brcs	.+88     	; 0x1378 <Dio_u8GetPortValue+0x76>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	41 f1       	breq	.+80     	; 0x1378 <Dio_u8GetPortValue+0x76>
    {
        switch (Copy_u8PortId)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3e 83       	std	Y+6, r19	; 0x06
    1330:	2d 83       	std	Y+5, r18	; 0x05
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <Dio_u8GetPortValue+0x5a>
    133c:	2d 81       	ldd	r18, Y+5	; 0x05
    133e:	3e 81       	ldd	r19, Y+6	; 0x06
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	91 f0       	breq	.+36     	; 0x136a <Dio_u8GetPortValue+0x68>
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	b1 f4       	brne	.+44     	; 0x137a <Dio_u8GetPortValue+0x78>
        {
        case DIO_u8_PORTB :*Copy_Pu8PortValue = DIO_PINB_REG; break;
    134e:	e3 e2       	ldi	r30, 0x23	; 35
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	eb 81       	ldd	r30, Y+3	; 0x03
    1356:	fc 81       	ldd	r31, Y+4	; 0x04
    1358:	80 83       	st	Z, r24
    135a:	0f c0       	rjmp	.+30     	; 0x137a <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTC :*Copy_Pu8PortValue = DIO_PINC_REG; break;
    135c:	e6 e2       	ldi	r30, 0x26	; 38
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	eb 81       	ldd	r30, Y+3	; 0x03
    1364:	fc 81       	ldd	r31, Y+4	; 0x04
    1366:	80 83       	st	Z, r24
    1368:	08 c0       	rjmp	.+16     	; 0x137a <Dio_u8GetPortValue+0x78>
        case DIO_u8_PORTD :*Copy_Pu8PortValue = DIO_PIND_REG; break;
    136a:	e9 e2       	ldi	r30, 0x29	; 41
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	eb 81       	ldd	r30, Y+3	; 0x03
    1372:	fc 81       	ldd	r31, Y+4	; 0x04
    1374:	80 83       	st	Z, r24
    1376:	01 c0       	rjmp	.+2      	; 0x137a <Dio_u8GetPortValue+0x78>
        }
    }
    else 
    {
        Local_u8ReturnState = STD_TYPE_NOK;
    1378:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	26 96       	adiw	r28, 0x06	; 6
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <LCD_voidEnable>:
void LCD_4bitCmndDivider(u8 Copy_u8Cmnd);
void LCD_4bitCharDivider(u8 Copy_u8Cmnd);


void LCD_voidEnable(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	68 97       	sbiw	r28, 0x18	; 24
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e8       	ldi	r26, 0x80	; 128
    13b2:	bf e3       	ldi	r27, 0x3F	; 63
    13b4:	8d 8b       	std	Y+21, r24	; 0x15
    13b6:	9e 8b       	std	Y+22, r25	; 0x16
    13b8:	af 8b       	std	Y+23, r26	; 0x17
    13ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13bc:	6d 89       	ldd	r22, Y+21	; 0x15
    13be:	7e 89       	ldd	r23, Y+22	; 0x16
    13c0:	8f 89       	ldd	r24, Y+23	; 0x17
    13c2:	98 8d       	ldd	r25, Y+24	; 0x18
    13c4:	2b ea       	ldi	r18, 0xAB	; 171
    13c6:	3a ea       	ldi	r19, 0xAA	; 170
    13c8:	4a ea       	ldi	r20, 0xAA	; 170
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	89 8b       	std	Y+17, r24	; 0x11
    13d6:	9a 8b       	std	Y+18, r25	; 0x12
    13d8:	ab 8b       	std	Y+19, r26	; 0x13
    13da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    13dc:	69 89       	ldd	r22, Y+17	; 0x11
    13de:	7a 89       	ldd	r23, Y+18	; 0x12
    13e0:	8b 89       	ldd	r24, Y+19	; 0x13
    13e2:	9c 89       	ldd	r25, Y+20	; 0x14
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	1c f4       	brge	.+6      	; 0x13fa <LCD_voidEnable+0x6c>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	88 8b       	std	Y+16, r24	; 0x10
    13f8:	91 c0       	rjmp	.+290    	; 0x151c <LCD_voidEnable+0x18e>
	else if (__tmp > 255)
    13fa:	69 89       	ldd	r22, Y+17	; 0x11
    13fc:	7a 89       	ldd	r23, Y+18	; 0x12
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	53 e4       	ldi	r21, 0x43	; 67
    140a:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	0c f0       	brlt	.+2      	; 0x1414 <LCD_voidEnable+0x86>
    1412:	7b c0       	rjmp	.+246    	; 0x150a <LCD_voidEnable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8c 87       	std	Y+12, r24	; 0x0c
    142e:	9d 87       	std	Y+13, r25	; 0x0d
    1430:	ae 87       	std	Y+14, r26	; 0x0e
    1432:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6c 85       	ldd	r22, Y+12	; 0x0c
    1436:	7d 85       	ldd	r23, Y+13	; 0x0d
    1438:	8e 85       	ldd	r24, Y+14	; 0x0e
    143a:	9f 85       	ldd	r25, Y+15	; 0x0f
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a e7       	ldi	r20, 0x7A	; 122
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	88 87       	std	Y+8, r24	; 0x08
    144e:	99 87       	std	Y+9, r25	; 0x09
    1450:	aa 87       	std	Y+10, r26	; 0x0a
    1452:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1454:	68 85       	ldd	r22, Y+8	; 0x08
    1456:	79 85       	ldd	r23, Y+9	; 0x09
    1458:	8a 85       	ldd	r24, Y+10	; 0x0a
    145a:	9b 85       	ldd	r25, Y+11	; 0x0b
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <LCD_voidEnable+0xe8>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9f 83       	std	Y+7, r25	; 0x07
    1472:	8e 83       	std	Y+6, r24	; 0x06
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <LCD_voidEnable+0x166>
	else if (__tmp > 65535)
    1476:	68 85       	ldd	r22, Y+8	; 0x08
    1478:	79 85       	ldd	r23, Y+9	; 0x09
    147a:	8a 85       	ldd	r24, Y+10	; 0x0a
    147c:	9b 85       	ldd	r25, Y+11	; 0x0b
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <LCD_voidEnable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1490:	7d 85       	ldd	r23, Y+13	; 0x0d
    1492:	8e 85       	ldd	r24, Y+14	; 0x0e
    1494:	9f 85       	ldd	r25, Y+15	; 0x0f
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9f 83       	std	Y+7, r25	; 0x07
    14b4:	8e 83       	std	Y+6, r24	; 0x06
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <LCD_voidEnable+0x148>
    14b8:	80 e9       	ldi	r24, 0x90	; 144
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9d 83       	std	Y+5, r25	; 0x05
    14be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_voidEnable+0x136>
    14c8:	9d 83       	std	Y+5, r25	; 0x05
    14ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9f 83       	std	Y+7, r25	; 0x07
    14d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8e 81       	ldd	r24, Y+6	; 0x06
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <LCD_voidEnable+0x12a>
    14de:	24 c0       	rjmp	.+72     	; 0x1528 <LCD_voidEnable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	68 85       	ldd	r22, Y+8	; 0x08
    14e2:	79 85       	ldd	r23, Y+9	; 0x09
    14e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9f 83       	std	Y+7, r25	; 0x07
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	9b 83       	std	Y+3, r25	; 0x03
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_voidEnable+0x172>
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <LCD_voidEnable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    150a:	69 89       	ldd	r22, Y+17	; 0x11
    150c:	7a 89       	ldd	r23, Y+18	; 0x12
    150e:	8b 89       	ldd	r24, Y+19	; 0x13
    1510:	9c 89       	ldd	r25, Y+20	; 0x14
    1512:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	88 8b       	std	Y+16, r24	; 0x10
    151c:	88 89       	ldd	r24, Y+16	; 0x10
    151e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	8a 95       	dec	r24
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_voidEnable+0x194>
    1526:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW); 
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
}
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <LCD_4bitCmndDivider>:

void LCD_4bitCmndDivider(u8 Copy_u8Cmnd)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	6d 97       	sbiw	r28, 0x1d	; 29
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitCmnd(Copy_u8Cmnd);
    155a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LCD_voidSend4BitCmnd>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a0 e8       	ldi	r26, 0x80	; 128
    1566:	bf e3       	ldi	r27, 0x3F	; 63
    1568:	89 8f       	std	Y+25, r24	; 0x19
    156a:	9a 8f       	std	Y+26, r25	; 0x1a
    156c:	ab 8f       	std	Y+27, r26	; 0x1b
    156e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	69 8d       	ldd	r22, Y+25	; 0x19
    1572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a e7       	ldi	r20, 0x7A	; 122
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8d 8b       	std	Y+21, r24	; 0x15
    158a:	9e 8b       	std	Y+22, r25	; 0x16
    158c:	af 8b       	std	Y+23, r26	; 0x17
    158e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <LCD_4bitCmndDivider+0x6e>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 8b       	std	Y+20, r25	; 0x14
    15ae:	8b 8b       	std	Y+19, r24	; 0x13
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <LCD_4bitCmndDivider+0xec>
	else if (__tmp > 65535)
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    15c6:	18 16       	cp	r1, r24
    15c8:	4c f5       	brge	.+82     	; 0x161c <LCD_4bitCmndDivider+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	69 8d       	ldd	r22, Y+25	; 0x19
    15cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9c 8b       	std	Y+20, r25	; 0x14
    15f0:	8b 8b       	std	Y+19, r24	; 0x13
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <LCD_4bitCmndDivider+0xce>
    15f4:	80 e9       	ldi	r24, 0x90	; 144
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	9a 8b       	std	Y+18, r25	; 0x12
    15fa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fc:	89 89       	ldd	r24, Y+17	; 0x11
    15fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <LCD_4bitCmndDivider+0xbc>
    1604:	9a 8b       	std	Y+18, r25	; 0x12
    1606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	8b 89       	ldd	r24, Y+19	; 0x13
    160a:	9c 89       	ldd	r25, Y+20	; 0x14
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 8b       	std	Y+20, r25	; 0x14
    1610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1612:	8b 89       	ldd	r24, Y+19	; 0x13
    1614:	9c 89       	ldd	r25, Y+20	; 0x14
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	69 f7       	brne	.-38     	; 0x15f4 <LCD_4bitCmndDivider+0xb0>
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <LCD_4bitCmndDivider+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161c:	6d 89       	ldd	r22, Y+21	; 0x15
    161e:	7e 89       	ldd	r23, Y+22	; 0x16
    1620:	8f 89       	ldd	r24, Y+23	; 0x17
    1622:	98 8d       	ldd	r25, Y+24	; 0x18
    1624:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	98 8b       	std	Y+16, r25	; 0x10
    1636:	8f 87       	std	Y+15, r24	; 0x0f
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	98 89       	ldd	r25, Y+16	; 0x10
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_4bitCmndDivider+0xf8>
    1640:	98 8b       	std	Y+16, r25	; 0x10
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitCmnd(Copy_u8Cmnd<<4);
    1644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1646:	82 95       	swap	r24
    1648:	80 7f       	andi	r24, 0xF0	; 240
    164a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LCD_voidSend4BitCmnd>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e8       	ldi	r26, 0x80	; 128
    1654:	bf e3       	ldi	r27, 0x3F	; 63
    1656:	8b 87       	std	Y+11, r24	; 0x0b
    1658:	9c 87       	std	Y+12, r25	; 0x0c
    165a:	ad 87       	std	Y+13, r26	; 0x0d
    165c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4a e7       	ldi	r20, 0x7A	; 122
    166c:	55 e4       	ldi	r21, 0x45	; 69
    166e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8f 83       	std	Y+7, r24	; 0x07
    1678:	98 87       	std	Y+8, r25	; 0x08
    167a:	a9 87       	std	Y+9, r26	; 0x09
    167c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	2c f4       	brge	.+10     	; 0x16a0 <LCD_4bitCmndDivider+0x15c>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	3f c0       	rjmp	.+126    	; 0x171e <LCD_4bitCmndDivider+0x1da>
	else if (__tmp > 65535)
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	57 e4       	ldi	r21, 0x47	; 71
    16b0:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	4c f5       	brge	.+82     	; 0x170a <LCD_4bitCmndDivider+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <LCD_4bitCmndDivider+0x1bc>
    16e2:	80 e9       	ldi	r24, 0x90	; 144
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_4bitCmndDivider+0x1aa>
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	69 f7       	brne	.-38     	; 0x16e2 <LCD_4bitCmndDivider+0x19e>
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <LCD_4bitCmndDivider+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_4bitCmndDivider+0x1e6>
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1732:	6d 96       	adiw	r28, 0x1d	; 29
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <LCD_4bitCharDivider>:

void LCD_4bitCharDivider(u8 Copy_u8Cmnd)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	6d 97       	sbiw	r28, 0x1d	; 29
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_voidSend4BitChar(Copy_u8Cmnd);
    175a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_voidSend4BitChar>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e8       	ldi	r26, 0x80	; 128
    176a:	bf e3       	ldi	r27, 0x3F	; 63
    176c:	89 8f       	std	Y+25, r24	; 0x19
    176e:	9a 8f       	std	Y+26, r25	; 0x1a
    1770:	ab 8f       	std	Y+27, r26	; 0x1b
    1772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	69 8d       	ldd	r22, Y+25	; 0x19
    1776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	55 e4       	ldi	r21, 0x45	; 69
    1784:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8d 8b       	std	Y+21, r24	; 0x15
    178e:	9e 8b       	std	Y+22, r25	; 0x16
    1790:	af 8b       	std	Y+23, r26	; 0x17
    1792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <LCD_4bitCharDivider+0x72>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <LCD_4bitCharDivider+0xf0>
	else if (__tmp > 65535)
    17b6:	6d 89       	ldd	r22, Y+21	; 0x15
    17b8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <LCD_4bitCharDivider+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	69 8d       	ldd	r22, Y+25	; 0x19
    17d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <LCD_4bitCharDivider+0xd2>
    17f8:	80 e9       	ldi	r24, 0x90	; 144
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	9a 8b       	std	Y+18, r25	; 0x12
    17fe:	89 8b       	std	Y+17, r24	; 0x11
    1800:	89 89       	ldd	r24, Y+17	; 0x11
    1802:	9a 89       	ldd	r25, Y+18	; 0x12
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_4bitCharDivider+0xc0>
    1808:	9a 8b       	std	Y+18, r25	; 0x12
    180a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8b 89       	ldd	r24, Y+19	; 0x13
    180e:	9c 89       	ldd	r25, Y+20	; 0x14
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <LCD_4bitCharDivider+0xb4>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <LCD_4bitCharDivider+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	98 8b       	std	Y+16, r25	; 0x10
    183a:	8f 87       	std	Y+15, r24	; 0x0f
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_4bitCharDivider+0xfc>
    1844:	98 8b       	std	Y+16, r25	; 0x10
    1846:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSend4BitChar(Copy_u8Cmnd<<4);
    1848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	82 95       	swap	r24
    1850:	92 95       	swap	r25
    1852:	90 7f       	andi	r25, 0xF0	; 240
    1854:	98 27       	eor	r25, r24
    1856:	80 7f       	andi	r24, 0xF0	; 240
    1858:	98 27       	eor	r25, r24
    185a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_voidSend4BitChar>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e8       	ldi	r26, 0x80	; 128
    1864:	bf e3       	ldi	r27, 0x3F	; 63
    1866:	8b 87       	std	Y+11, r24	; 0x0b
    1868:	9c 87       	std	Y+12, r25	; 0x0c
    186a:	ad 87       	std	Y+13, r26	; 0x0d
    186c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1870:	7c 85       	ldd	r23, Y+12	; 0x0c
    1872:	8d 85       	ldd	r24, Y+13	; 0x0d
    1874:	9e 85       	ldd	r25, Y+14	; 0x0e
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	55 e4       	ldi	r21, 0x45	; 69
    187e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8f 83       	std	Y+7, r24	; 0x07
    1888:	98 87       	std	Y+8, r25	; 0x08
    188a:	a9 87       	std	Y+9, r26	; 0x09
    188c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <LCD_4bitCharDivider+0x16c>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <LCD_4bitCharDivider+0x1ea>
	else if (__tmp > 65535)
    18b0:	6f 81       	ldd	r22, Y+7	; 0x07
    18b2:	78 85       	ldd	r23, Y+8	; 0x08
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <LCD_4bitCharDivider+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <LCD_4bitCharDivider+0x1cc>
    18f2:	80 e9       	ldi	r24, 0x90	; 144
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_4bitCharDivider+0x1ba>
    1902:	9c 83       	std	Y+4, r25	; 0x04
    1904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <LCD_4bitCharDivider+0x1ae>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <LCD_4bitCharDivider+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_4bitCharDivider+0x1f6>
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1942:	6d 96       	adiw	r28, 0x1d	; 29
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <LCD_voidSend4BitCmnd>:

void LCD_voidSend4BitCmnd(u8 Copy_u8Cmnd)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	2f 97       	sbiw	r28, 0x0f	; 15
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    1974:	8f 85       	ldd	r24, Y+15	; 0x0f
    1976:	98 2f       	mov	r25, r24
    1978:	99 1f       	adc	r25, r25
    197a:	99 27       	eor	r25, r25
    197c:	99 1f       	adc	r25, r25
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	67 e0       	ldi	r22, 0x07	; 7
    1982:	49 2f       	mov	r20, r25
    1984:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    1988:	8f 85       	ldd	r24, Y+15	; 0x0f
    198a:	82 95       	swap	r24
    198c:	86 95       	lsr	r24
    198e:	86 95       	lsr	r24
    1990:	83 70       	andi	r24, 0x03	; 3
    1992:	98 2f       	mov	r25, r24
    1994:	91 70       	andi	r25, 0x01	; 1
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	49 2f       	mov	r20, r25
    199c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	82 95       	swap	r24
    19a4:	86 95       	lsr	r24
    19a6:	87 70       	andi	r24, 0x07	; 7
    19a8:	98 2f       	mov	r25, r24
    19aa:	91 70       	andi	r25, 0x01	; 1
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	49 2f       	mov	r20, r25
    19b2:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    19b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b8:	82 95       	swap	r24
    19ba:	8f 70       	andi	r24, 0x0F	; 15
    19bc:	98 2f       	mov	r25, r24
    19be:	91 70       	andi	r25, 0x01	; 1
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	64 e0       	ldi	r22, 0x04	; 4
    19c4:	49 2f       	mov	r20, r25
    19c6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    LCD_voidEnable();
    19ca:	0e 94 c7 09 	call	0x138e	; 0x138e <LCD_voidEnable>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a e7       	ldi	r20, 0x7A	; 122
    19ec:	55 e4       	ldi	r21, 0x45	; 69
    19ee:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_voidSend4BitCmnd+0xcc>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_voidSend4BitCmnd+0x14a>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_voidSend4BitCmnd+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_voidSend4BitCmnd+0x12c>
    1a62:	80 e9       	ldi	r24, 0x90	; 144
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_voidSend4BitCmnd+0x11a>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_voidSend4BitCmnd+0x10e>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_voidSend4BitCmnd+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_voidSend4BitCmnd+0x156>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    1ab2:	2f 96       	adiw	r28, 0x0f	; 15
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <LCD_voidSend4BitChar>:

void LCD_voidSend4BitChar(u8 Copy_u8Cmnd)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2f 97       	sbiw	r28, 0x0f	; 15
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	8f 87       	std	Y+15, r24	; 0x0f
    /*High nibble*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA7_PORT,LCD_u8_DATA_PIN7,GET_BIT(Copy_u8Cmnd,7));
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	99 1f       	adc	r25, r25
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	67 e0       	ldi	r22, 0x07	; 7
    1af2:	49 2f       	mov	r20, r25
    1af4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA6_PORT,LCD_u8_DATA_PIN6,GET_BIT(Copy_u8Cmnd,6));
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	82 95       	swap	r24
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	83 70       	andi	r24, 0x03	; 3
    1b02:	98 2f       	mov	r25, r24
    1b04:	91 70       	andi	r25, 0x01	; 1
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	66 e0       	ldi	r22, 0x06	; 6
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA5_PORT,LCD_u8_DATA_PIN5,GET_BIT(Copy_u8Cmnd,5));
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	82 95       	swap	r24
    1b14:	86 95       	lsr	r24
    1b16:	87 70       	andi	r24, 0x07	; 7
    1b18:	98 2f       	mov	r25, r24
    1b1a:	91 70       	andi	r25, 0x01	; 1
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	65 e0       	ldi	r22, 0x05	; 5
    1b20:	49 2f       	mov	r20, r25
    1b22:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(LCD_u8_DATA4_PORT,LCD_u8_DATA_PIN4,GET_BIT(Copy_u8Cmnd,4));
    1b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b28:	82 95       	swap	r24
    1b2a:	8f 70       	andi	r24, 0x0F	; 15
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	91 70       	andi	r25, 0x01	; 1
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	49 2f       	mov	r20, r25
    1b36:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    LCD_voidEnable();
    1b3a:	0e 94 c7 09 	call	0x138e	; 0x138e <LCD_voidEnable>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	8b 87       	std	Y+11, r24	; 0x0b
    1b48:	9c 87       	std	Y+12, r25	; 0x0c
    1b4a:	ad 87       	std	Y+13, r26	; 0x0d
    1b4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	55 e4       	ldi	r21, 0x45	; 69
    1b5e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8f 83       	std	Y+7, r24	; 0x07
    1b68:	98 87       	std	Y+8, r25	; 0x08
    1b6a:	a9 87       	std	Y+9, r26	; 0x09
    1b6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_voidSend4BitChar+0xcc>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_voidSend4BitChar+0x14a>
	else if (__tmp > 65535)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_voidSend4BitChar+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_voidSend4BitChar+0x12c>
    1bd2:	80 e9       	ldi	r24, 0x90	; 144
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_voidSend4BitChar+0x11a>
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_voidSend4BitChar+0x10e>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <LCD_voidSend4BitChar+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_voidSend4BitChar+0x156>
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    /*remember to delay for hardware */
}
    1c22:	2f 96       	adiw	r28, 0x0f	; 15
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_voidWriteCmnd>:


void LCD_voidWriteCmnd(u8 Copy_u8Cmnd)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    /* 4- latching E  for "Tpw" to pass data from i\o buffer to registers*/
    LCD_voidEnable();
    #endif
    /*4 bit init*/
    #if LCD4BIT
    LCD_4bitCmndDivider(Copy_u8Cmnd);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_4bitCmndDivider>
    #endif
}
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	89 83       	std	Y+1, r24	; 0x01
    #endif
    /* 4 bit */
    #if LCD4BIT    
    /*4 bit */
    
    LCD_4bitCharDivider(Copy_u8Char);
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <LCD_4bitCharDivider>
      
    #endif 
}
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	e8 97       	sbiw	r28, 0x38	; 56
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 ea       	ldi	r26, 0xA0	; 160
    1c82:	b1 e4       	ldi	r27, 0x41	; 65
    1c84:	8d ab       	std	Y+53, r24	; 0x35
    1c86:	9e ab       	std	Y+54, r25	; 0x36
    1c88:	af ab       	std	Y+55, r26	; 0x37
    1c8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c90:	8f a9       	ldd	r24, Y+55	; 0x37
    1c92:	98 ad       	ldd	r25, Y+56	; 0x38
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	55 e4       	ldi	r21, 0x45	; 69
    1c9c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	89 ab       	std	Y+49, r24	; 0x31
    1ca6:	9a ab       	std	Y+50, r25	; 0x32
    1ca8:	ab ab       	std	Y+51, r26	; 0x33
    1caa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cac:	69 a9       	ldd	r22, Y+49	; 0x31
    1cae:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_voidInit+0x66>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	98 ab       	std	Y+48, r25	; 0x30
    1cca:	8f a7       	std	Y+47, r24	; 0x2f
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1cce:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cea:	8f a9       	ldd	r24, Y+55	; 0x37
    1cec:	98 ad       	ldd	r25, Y+56	; 0x38
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	98 ab       	std	Y+48, r25	; 0x30
    1d0c:	8f a7       	std	Y+47, r24	; 0x2f
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_voidInit+0xc6>
    1d10:	80 e9       	ldi	r24, 0x90	; 144
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	9e a7       	std	Y+46, r25	; 0x2e
    1d16:	8d a7       	std	Y+45, r24	; 0x2d
    1d18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_voidInit+0xb4>
    1d20:	9e a7       	std	Y+46, r25	; 0x2e
    1d22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d26:	98 a9       	ldd	r25, Y+48	; 0x30
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	98 ab       	std	Y+48, r25	; 0x30
    1d2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_voidInit+0xa8>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d40:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	98 ab       	std	Y+48, r25	; 0x30
    1d4a:	8f a7       	std	Y+47, r24	; 0x2f
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	9c a7       	std	Y+44, r25	; 0x2c
    1d52:	8b a7       	std	Y+43, r24	; 0x2b
    1d54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_voidInit+0xf0>
    1d5c:	9c a7       	std	Y+44, r25	; 0x2c
    1d5e:	8b a7       	std	Y+43, r24	; 0x2b
    LCD_voidWriteCmnd(0b00000110);
    #endif
    /*4 bit*/
    #if LCD4BIT
    _delay_ms(20);
    LCD_voidWriteCmnd(0x03); // N =F =0
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d6c:	b0 e4       	ldi	r27, 0x40	; 64
    1d6e:	8f a3       	std	Y+39, r24	; 0x27
    1d70:	98 a7       	std	Y+40, r25	; 0x28
    1d72:	a9 a7       	std	Y+41, r26	; 0x29
    1d74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	6f a1       	ldd	r22, Y+39	; 0x27
    1d78:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e7       	ldi	r20, 0x7A	; 122
    1d84:	55 e4       	ldi	r21, 0x45	; 69
    1d86:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8b a3       	std	Y+35, r24	; 0x23
    1d90:	9c a3       	std	Y+36, r25	; 0x24
    1d92:	ad a3       	std	Y+37, r26	; 0x25
    1d94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <LCD_voidInit+0x150>
		__ticks = 1;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9a a3       	std	Y+34, r25	; 0x22
    1db4:	89 a3       	std	Y+33, r24	; 0x21
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1db8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dba:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	4c f5       	brge	.+82     	; 0x1e22 <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9a a3       	std	Y+34, r25	; 0x22
    1df6:	89 a3       	std	Y+33, r24	; 0x21
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <LCD_voidInit+0x1b0>
    1dfa:	80 e9       	ldi	r24, 0x90	; 144
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	98 a3       	std	Y+32, r25	; 0x20
    1e00:	8f 8f       	std	Y+31, r24	; 0x1f
    1e02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e04:	98 a1       	ldd	r25, Y+32	; 0x20
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_voidInit+0x19e>
    1e0a:	98 a3       	std	Y+32, r25	; 0x20
    1e0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e10:	9a a1       	ldd	r25, Y+34	; 0x22
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9a a3       	std	Y+34, r25	; 0x22
    1e16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <LCD_voidInit+0x192>
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	6b a1       	ldd	r22, Y+35	; 0x23
    1e24:	7c a1       	ldd	r23, Y+36	; 0x24
    1e26:	8d a1       	ldd	r24, Y+37	; 0x25
    1e28:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
    1e36:	89 a1       	ldd	r24, Y+33	; 0x21
    1e38:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_voidInit+0x1da>
    1e46:	9e 8f       	std	Y+30, r25	; 0x1e
    1e48:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);
    LCD_voidWriteCmnd(0x02);
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a6 e1       	ldi	r26, 0x16	; 22
    1e56:	b3 e4       	ldi	r27, 0x43	; 67
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	55 e4       	ldi	r21, 0x45	; 69
    1e70:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	af 8b       	std	Y+23, r26	; 0x17
    1e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_voidInit+0x23a>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_voidInit+0x29a>
    1ee4:	80 e9       	ldi	r24, 0x90	; 144
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_voidInit+0x288>
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_voidInit+0x27c>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_voidInit+0x2c4>
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(150); 
    LCD_voidWriteCmnd(0x28);
    1f34:	88 e2       	ldi	r24, 0x28	; 40
    1f36:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f40:	b0 e4       	ldi	r27, 0x40	; 64
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	55 e4       	ldi	r21, 0x45	; 69
    1f5a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_voidInit+0x324>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_voidInit+0x384>
    1fce:	80 e9       	ldi	r24, 0x90	; 144
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_voidInit+0x372>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_voidInit+0x366>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_voidInit+0x3ae>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidWriteCmnd(0x0F); 
    201e:	8f e0       	ldi	r24, 0x0F	; 15
    2020:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x01); 
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    LCD_voidWriteCmnd(0x06); 
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    #endif
}
    2030:	e8 96       	adiw	r28, 0x38	; 56
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_voidWriteString+0x6>
    2048:	0f 92       	push	r0
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	9b 83       	std	Y+3, r25	; 0x03
    2050:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8CharCounter = 0 ;
    2052:	19 82       	std	Y+1, r1	; 0x01
    2054:	0e c0       	rjmp	.+28     	; 0x2072 <LCD_voidWriteString+0x30>
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	80 81       	ld	r24, Z
    2068:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteChar>
        Local_u8CharCounter ++;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *Copy_Pu8Srting)
{
    u8 Local_u8CharCounter = 0 ;
    while(Copy_Pu8Srting[Local_u8CharCounter] != '\0')
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	fc 01       	movw	r30, r24
    207e:	e2 0f       	add	r30, r18
    2080:	f3 1f       	adc	r31, r19
    2082:	80 81       	ld	r24, Z
    2084:	88 23       	and	r24, r24
    2086:	39 f7       	brne	.-50     	; 0x2056 <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar(Copy_Pu8Srting[Local_u8CharCounter]);
        Local_u8CharCounter ++;
    }
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNo ,u8 Copy_u8Location)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <LCD_u8GoToXY+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <LCD_u8GoToXY+0x8>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8a 83       	std	Y+2, r24	; 0x02
    20a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnState = STD_TYPE_OK;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Location < 40)
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	88 32       	cpi	r24, 0x28	; 40
    20ae:	e0 f4       	brcc	.+56     	; 0x20e8 <LCD_u8GoToXY+0x54>
    {
        switch (Copy_u8LineNo)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3d 83       	std	Y+5, r19	; 0x05
    20b8:	2c 83       	std	Y+4, r18	; 0x04
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <LCD_u8GoToXY+0x3c>
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	31 f0       	breq	.+12     	; 0x20da <LCD_u8GoToXY+0x46>
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <LCD_u8GoToXY+0x50>
        {
            case LCD_u8_LINE1 : LCD_voidWriteCmnd(Copy_u8Location + 0x80 );break;           
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	80 58       	subi	r24, 0x80	; 128
    20d4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    20d8:	08 c0       	rjmp	.+16     	; 0x20ea <LCD_u8GoToXY+0x56>
            case LCD_u8_LINE2 : LCD_voidWriteCmnd(Copy_u8Location + 0xC0 );break;  
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	80 54       	subi	r24, 0x40	; 64
    20de:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <LCD_u8GoToXY+0x56>
            default           : Local_u8ReturnState = STD_TYPE_NOK;        break;
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <LCD_u8GoToXY+0x56>
        }
    }
    else
    {
        Local_u8ReturnState = STD_TYPE_NOK; 
    20e8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnState;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    0x00 : first location in line 1
    0x40 (64) : first location in line 2
    when we represent these nummbers in the stars of IR this will result the 
    instructions above 
    */
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <LCD_voidShift>:

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <LCD_voidShift+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <LCD_voidShift+0x8>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Counter = 0;
    210e:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	19 c0       	rjmp	.+50     	; 0x2146 <LCD_voidShift+0x4a>
    {
        switch (Copy_u8ShiftDirection)
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	3d 83       	std	Y+5, r19	; 0x05
    211c:	2c 83       	std	Y+4, r18	; 0x04
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	9d 81       	ldd	r25, Y+5	; 0x05
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	31 f0       	breq	.+12     	; 0x2132 <LCD_voidShift+0x36>
    2126:	2c 81       	ldd	r18, Y+4	; 0x04
    2128:	3d 81       	ldd	r19, Y+5	; 0x05
    212a:	21 30       	cpi	r18, 0x01	; 1
    212c:	31 05       	cpc	r19, r1
    212e:	29 f0       	breq	.+10     	; 0x213a <LCD_voidShift+0x3e>
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <LCD_voidShift+0x44>
        {
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
    2132:	8c e1       	ldi	r24, 0x1C	; 28
    2134:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <LCD_voidShift+0x44>
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
    213a:	88 e1       	ldi	r24, 0x18	; 24
    213c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
}

void LCD_voidShift(u8 Copy_u8ShiftDirection,u8 Copy_u8NumOfTimes)
{
    u8 Local_u8Counter = 0;
    for(Local_u8Counter =0;Local_u8Counter<Copy_u8NumOfTimes;Copy_u8NumOfTimes++)
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	8b 83       	std	Y+3, r24	; 0x03
    2146:	99 81       	ldd	r25, Y+1	; 0x01
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	98 17       	cp	r25, r24
    214c:	18 f3       	brcs	.-58     	; 0x2114 <LCD_voidShift+0x18>
        case LCD_Right:LCD_voidWriteCmnd(0b00011100) ;break;
        case LCD_Left :LCD_voidWriteCmnd(0b00011000) ;break;
        _delay_ms(1);
        }
    }
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <LCD_voidXYString>:

void LCD_voidXYString(u8 Copy_u8LineNo ,u8 Copy_u8Location,u8 *Copy_Pu8Srting)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <LCD_voidXYString+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_voidXYString+0x8>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	6a 83       	std	Y+2, r22	; 0x02
    216e:	5c 83       	std	Y+4, r21	; 0x04
    2170:	4b 83       	std	Y+3, r20	; 0x03
    LCD_u8GoToXY(Copy_u8LineNo,Copy_u8Location);
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	6a 81       	ldd	r22, Y+2	; 0x02
    2176:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_u8GoToXY>
    LCD_voidWriteString(Copy_Pu8Srting);
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_voidWriteString>
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LCD_u8WriteSpecialChar>:

u8 LCD_u8WriteSpecialChar(u8 Copy_u8CharIndex,u8 *Copy_Au8Char)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	27 97       	sbiw	r28, 0x07	; 7
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	8b 83       	std	Y+3, r24	; 0x03
    21a6:	7d 83       	std	Y+5, r23	; 0x05
    21a8:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ReturnState = STD_TYPE_OK;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Conter = 0;
    21ae:	19 82       	std	Y+1, r1	; 0x01
    /*choose the place in CGRAM to write your special character*/
    switch (Copy_u8CharIndex)
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	3f 83       	std	Y+7, r19	; 0x07
    21b8:	2e 83       	std	Y+6, r18	; 0x06
    21ba:	8e 81       	ldd	r24, Y+6	; 0x06
    21bc:	9f 81       	ldd	r25, Y+7	; 0x07
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	a9 f1       	breq	.+106    	; 0x222e <LCD_u8WriteSpecialChar+0x9e>
    21c4:	2e 81       	ldd	r18, Y+6	; 0x06
    21c6:	3f 81       	ldd	r19, Y+7	; 0x07
    21c8:	24 30       	cpi	r18, 0x04	; 4
    21ca:	31 05       	cpc	r19, r1
    21cc:	7c f4       	brge	.+30     	; 0x21ec <LCD_u8WriteSpecialChar+0x5c>
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	91 05       	cpc	r25, r1
    21d6:	19 f1       	breq	.+70     	; 0x221e <LCD_u8WriteSpecialChar+0x8e>
    21d8:	2e 81       	ldd	r18, Y+6	; 0x06
    21da:	3f 81       	ldd	r19, Y+7	; 0x07
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	31 05       	cpc	r19, r1
    21e0:	14 f5       	brge	.+68     	; 0x2226 <LCD_u8WriteSpecialChar+0x96>
    21e2:	8e 81       	ldd	r24, Y+6	; 0x06
    21e4:	9f 81       	ldd	r25, Y+7	; 0x07
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	b1 f0       	breq	.+44     	; 0x2216 <LCD_u8WriteSpecialChar+0x86>
    21ea:	35 c0       	rjmp	.+106    	; 0x2256 <LCD_u8WriteSpecialChar+0xc6>
    21ec:	2e 81       	ldd	r18, Y+6	; 0x06
    21ee:	3f 81       	ldd	r19, Y+7	; 0x07
    21f0:	25 30       	cpi	r18, 0x05	; 5
    21f2:	31 05       	cpc	r19, r1
    21f4:	21 f1       	breq	.+72     	; 0x223e <LCD_u8WriteSpecialChar+0xae>
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	85 30       	cpi	r24, 0x05	; 5
    21fc:	91 05       	cpc	r25, r1
    21fe:	dc f0       	brlt	.+54     	; 0x2236 <LCD_u8WriteSpecialChar+0xa6>
    2200:	2e 81       	ldd	r18, Y+6	; 0x06
    2202:	3f 81       	ldd	r19, Y+7	; 0x07
    2204:	26 30       	cpi	r18, 0x06	; 6
    2206:	31 05       	cpc	r19, r1
    2208:	f1 f0       	breq	.+60     	; 0x2246 <LCD_u8WriteSpecialChar+0xb6>
    220a:	8e 81       	ldd	r24, Y+6	; 0x06
    220c:	9f 81       	ldd	r25, Y+7	; 0x07
    220e:	87 30       	cpi	r24, 0x07	; 7
    2210:	91 05       	cpc	r25, r1
    2212:	e9 f0       	breq	.+58     	; 0x224e <LCD_u8WriteSpecialChar+0xbe>
    2214:	20 c0       	rjmp	.+64     	; 0x2256 <LCD_u8WriteSpecialChar+0xc6>
    {
    case LCD_u8_SPECHIAL0: LCD_voidWriteCmnd(0b01000000); break;
    2216:	80 e4       	ldi	r24, 0x40	; 64
    2218:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    221c:	1d c0       	rjmp	.+58     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL1: LCD_voidWriteCmnd(0b01001000); break;
    221e:	88 e4       	ldi	r24, 0x48	; 72
    2220:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    2224:	19 c0       	rjmp	.+50     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL2: LCD_voidWriteCmnd(0b01010000); break;
    2226:	80 e5       	ldi	r24, 0x50	; 80
    2228:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    222c:	15 c0       	rjmp	.+42     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL3: LCD_voidWriteCmnd(0b01011000); break;
    222e:	88 e5       	ldi	r24, 0x58	; 88
    2230:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    2234:	11 c0       	rjmp	.+34     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL4: LCD_voidWriteCmnd(0b01100000); break;
    2236:	80 e6       	ldi	r24, 0x60	; 96
    2238:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    223c:	0d c0       	rjmp	.+26     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL5: LCD_voidWriteCmnd(0b01101000); break;
    223e:	88 e6       	ldi	r24, 0x68	; 104
    2240:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    2246:	80 e7       	ldi	r24, 0x70	; 112
    2248:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    224e:	88 e7       	ldi	r24, 0x78	; 120
    2250:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_voidWriteCmnd>
    2254:	01 c0       	rjmp	.+2      	; 0x2258 <LCD_u8WriteSpecialChar+0xc8>
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    2256:	1a 82       	std	Y+2, r1	; 0x02
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <LCD_u8WriteSpecialChar+0xe8>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	80 81       	ld	r24, Z
    226e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteChar>
    case LCD_u8_SPECHIAL6: LCD_voidWriteCmnd(0b01110000); break;
    case LCD_u8_SPECHIAL7: LCD_voidWriteCmnd(0b01111000); break;
    default:Local_u8ReturnState = STD_TYPE_NOK; break;
    }
    /*write the char represented by array of u8 to CGRAM*/
    for (Local_u8Conter=0;Local_u8Conter<8;Local_u8Conter++)
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	88 30       	cpi	r24, 0x08	; 8
    227c:	78 f3       	brcs	.-34     	; 0x225c <LCD_u8WriteSpecialChar+0xcc>
    {
        LCD_voidWriteChar(Copy_Au8Char[Local_u8Conter]);   
    }
    return Local_u8ReturnState;
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2280:	27 96       	adiw	r28, 0x07	; 7
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <Num_u16ToString>:

void Num_u16ToString(u16 Copu_u16Num, u8 *Copu_Au8Str)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <Num_u16ToString+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <Num_u16ToString+0x8>
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	7c 83       	std	Y+4, r23	; 0x04
    22a4:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(Copu_Au8Str, "%d", Copu_u16Num);
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <Num_u16ToString+0x16>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <Num_u16ToString+0x18>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <Num_u16ToString+0x1a>
    22ac:	ed b7       	in	r30, 0x3d	; 61
    22ae:	fe b7       	in	r31, 0x3e	; 62
    22b0:	31 96       	adiw	r30, 0x01	; 1
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	93 83       	std	Z+3, r25	; 0x03
    22c0:	82 83       	std	Z+2, r24	; 0x02
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	95 83       	std	Z+5, r25	; 0x05
    22c8:	84 83       	std	Z+4, r24	; 0x04
    22ca:	0e 94 70 14 	call	0x28e0	; 0x28e0 <sprintf>
    22ce:	8d b7       	in	r24, 0x3d	; 61
    22d0:	9e b7       	in	r25, 0x3e	; 62
    22d2:	06 96       	adiw	r24, 0x06	; 6
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	9e bf       	out	0x3e, r25	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	8d bf       	out	0x3d, r24	; 61
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Num)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	2c 97       	sbiw	r28, 0x0c	; 12
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	8b 87       	std	Y+11, r24	; 0x0b
    u8 Local_u8Buffer[10];
    Num_u16ToString(Copy_u16Num,Local_u8Buffer);
    2304:	8b 85       	ldd	r24, Y+11	; 0x0b
    2306:	9c 85       	ldd	r25, Y+12	; 0x0c
    2308:	9e 01       	movw	r18, r28
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	b9 01       	movw	r22, r18
    2310:	0e 94 49 11 	call	0x2292	; 0x2292 <Num_u16ToString>
    LCD_voidWriteString(Local_u8Buffer);
    2314:	ce 01       	movw	r24, r28
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_voidWriteString>
}
    231c:	2c 96       	adiw	r28, 0x0c	; 12
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <main>:

#define LCD_CLEARTEXT "                                        "


int main(void)
 {
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	c1 55       	subi	r28, 0x51	; 81
    2338:	d0 40       	sbci	r29, 0x00	; 0
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
	/*DIO init */

	DIO_voidInit();
    2344:	0e 94 51 06 	call	0xca2	; 0xca2 <DIO_voidInit>
	/*LCD init*/
	LCD_voidInit();
    2348:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidInit>
	u8 str1[]="Hossam";
    234c:	ce 01       	movw	r24, r28
    234e:	ca 96       	adiw	r24, 0x3a	; 58
    2350:	2a 96       	adiw	r28, 0x0a	; 10
    2352:	9f af       	std	Y+63, r25	; 0x3f
    2354:	8e af       	std	Y+62, r24	; 0x3e
    2356:	2a 97       	sbiw	r28, 0x0a	; 10
    2358:	ec e2       	ldi	r30, 0x2C	; 44
    235a:	f1 e0       	ldi	r31, 0x01	; 1
    235c:	2c 96       	adiw	r28, 0x0c	; 12
    235e:	ff af       	std	Y+63, r31	; 0x3f
    2360:	ee af       	std	Y+62, r30	; 0x3e
    2362:	2c 97       	sbiw	r28, 0x0c	; 12
    2364:	f7 e0       	ldi	r31, 0x07	; 7
    2366:	2d 96       	adiw	r28, 0x0d	; 13
    2368:	ff af       	std	Y+63, r31	; 0x3f
    236a:	2d 97       	sbiw	r28, 0x0d	; 13
    236c:	2c 96       	adiw	r28, 0x0c	; 12
    236e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2370:	ff ad       	ldd	r31, Y+63	; 0x3f
    2372:	2c 97       	sbiw	r28, 0x0c	; 12
    2374:	00 80       	ld	r0, Z
    2376:	2c 96       	adiw	r28, 0x0c	; 12
    2378:	8e ad       	ldd	r24, Y+62	; 0x3e
    237a:	9f ad       	ldd	r25, Y+63	; 0x3f
    237c:	2c 97       	sbiw	r28, 0x0c	; 12
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	2c 96       	adiw	r28, 0x0c	; 12
    2382:	9f af       	std	Y+63, r25	; 0x3f
    2384:	8e af       	std	Y+62, r24	; 0x3e
    2386:	2c 97       	sbiw	r28, 0x0c	; 12
    2388:	2a 96       	adiw	r28, 0x0a	; 10
    238a:	ee ad       	ldd	r30, Y+62	; 0x3e
    238c:	ff ad       	ldd	r31, Y+63	; 0x3f
    238e:	2a 97       	sbiw	r28, 0x0a	; 10
    2390:	00 82       	st	Z, r0
    2392:	2a 96       	adiw	r28, 0x0a	; 10
    2394:	8e ad       	ldd	r24, Y+62	; 0x3e
    2396:	9f ad       	ldd	r25, Y+63	; 0x3f
    2398:	2a 97       	sbiw	r28, 0x0a	; 10
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	2a 96       	adiw	r28, 0x0a	; 10
    239e:	9f af       	std	Y+63, r25	; 0x3f
    23a0:	8e af       	std	Y+62, r24	; 0x3e
    23a2:	2a 97       	sbiw	r28, 0x0a	; 10
    23a4:	2d 96       	adiw	r28, 0x0d	; 13
    23a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23a8:	2d 97       	sbiw	r28, 0x0d	; 13
    23aa:	91 50       	subi	r25, 0x01	; 1
    23ac:	2d 96       	adiw	r28, 0x0d	; 13
    23ae:	9f af       	std	Y+63, r25	; 0x3f
    23b0:	2d 97       	sbiw	r28, 0x0d	; 13
    23b2:	2d 96       	adiw	r28, 0x0d	; 13
    23b4:	ef ad       	ldd	r30, Y+63	; 0x3f
    23b6:	2d 97       	sbiw	r28, 0x0d	; 13
    23b8:	ee 23       	and	r30, r30
    23ba:	c1 f6       	brne	.-80     	; 0x236c <main+0x3e>
	u8 str2[]=" Eng_ ";
    23bc:	ce 01       	movw	r24, r28
    23be:	8f 5b       	subi	r24, 0xBF	; 191
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	2f 96       	adiw	r28, 0x0f	; 15
    23c4:	9f af       	std	Y+63, r25	; 0x3f
    23c6:	8e af       	std	Y+62, r24	; 0x3e
    23c8:	2f 97       	sbiw	r28, 0x0f	; 15
    23ca:	e3 e3       	ldi	r30, 0x33	; 51
    23cc:	f1 e0       	ldi	r31, 0x01	; 1
    23ce:	61 96       	adiw	r28, 0x11	; 17
    23d0:	ff af       	std	Y+63, r31	; 0x3f
    23d2:	ee af       	std	Y+62, r30	; 0x3e
    23d4:	61 97       	sbiw	r28, 0x11	; 17
    23d6:	f7 e0       	ldi	r31, 0x07	; 7
    23d8:	62 96       	adiw	r28, 0x12	; 18
    23da:	ff af       	std	Y+63, r31	; 0x3f
    23dc:	62 97       	sbiw	r28, 0x12	; 18
    23de:	61 96       	adiw	r28, 0x11	; 17
    23e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    23e4:	61 97       	sbiw	r28, 0x11	; 17
    23e6:	00 80       	ld	r0, Z
    23e8:	61 96       	adiw	r28, 0x11	; 17
    23ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    23ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    23ee:	61 97       	sbiw	r28, 0x11	; 17
    23f0:	01 96       	adiw	r24, 0x01	; 1
    23f2:	61 96       	adiw	r28, 0x11	; 17
    23f4:	9f af       	std	Y+63, r25	; 0x3f
    23f6:	8e af       	std	Y+62, r24	; 0x3e
    23f8:	61 97       	sbiw	r28, 0x11	; 17
    23fa:	2f 96       	adiw	r28, 0x0f	; 15
    23fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    23fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2400:	2f 97       	sbiw	r28, 0x0f	; 15
    2402:	00 82       	st	Z, r0
    2404:	2f 96       	adiw	r28, 0x0f	; 15
    2406:	8e ad       	ldd	r24, Y+62	; 0x3e
    2408:	9f ad       	ldd	r25, Y+63	; 0x3f
    240a:	2f 97       	sbiw	r28, 0x0f	; 15
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	2f 96       	adiw	r28, 0x0f	; 15
    2410:	9f af       	std	Y+63, r25	; 0x3f
    2412:	8e af       	std	Y+62, r24	; 0x3e
    2414:	2f 97       	sbiw	r28, 0x0f	; 15
    2416:	62 96       	adiw	r28, 0x12	; 18
    2418:	9f ad       	ldd	r25, Y+63	; 0x3f
    241a:	62 97       	sbiw	r28, 0x12	; 18
    241c:	91 50       	subi	r25, 0x01	; 1
    241e:	62 96       	adiw	r28, 0x12	; 18
    2420:	9f af       	std	Y+63, r25	; 0x3f
    2422:	62 97       	sbiw	r28, 0x12	; 18
    2424:	62 96       	adiw	r28, 0x12	; 18
    2426:	ef ad       	ldd	r30, Y+63	; 0x3f
    2428:	62 97       	sbiw	r28, 0x12	; 18
    242a:	ee 23       	and	r30, r30
    242c:	c1 f6       	brne	.-80     	; 0x23de <main+0xb0>
	while(1)
	{
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_HIGH);
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	65 e0       	ldi	r22, 0x05	; 5
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a8 ec       	ldi	r26, 0xC8	; 200
    243e:	b2 e4       	ldi	r27, 0x42	; 66
    2440:	8d ab       	std	Y+53, r24	; 0x35
    2442:	9e ab       	std	Y+54, r25	; 0x36
    2444:	af ab       	std	Y+55, r26	; 0x37
    2446:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6d a9       	ldd	r22, Y+53	; 0x35
    244a:	7e a9       	ldd	r23, Y+54	; 0x36
    244c:	8f a9       	ldd	r24, Y+55	; 0x37
    244e:	98 ad       	ldd	r25, Y+56	; 0x38
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	55 e4       	ldi	r21, 0x45	; 69
    2458:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	89 ab       	std	Y+49, r24	; 0x31
    2462:	9a ab       	std	Y+50, r25	; 0x32
    2464:	ab ab       	std	Y+51, r26	; 0x33
    2466:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2468:	69 a9       	ldd	r22, Y+49	; 0x31
    246a:	7a a9       	ldd	r23, Y+50	; 0x32
    246c:	8b a9       	ldd	r24, Y+51	; 0x33
    246e:	9c a9       	ldd	r25, Y+52	; 0x34
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <main+0x15c>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <main+0x1da>
	else if (__tmp > 65535)
    248a:	69 a9       	ldd	r22, Y+49	; 0x31
    248c:	7a a9       	ldd	r23, Y+50	; 0x32
    248e:	8b a9       	ldd	r24, Y+51	; 0x33
    2490:	9c a9       	ldd	r25, Y+52	; 0x34
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6d a9       	ldd	r22, Y+53	; 0x35
    24a4:	7e a9       	ldd	r23, Y+54	; 0x36
    24a6:	8f a9       	ldd	r24, Y+55	; 0x37
    24a8:	98 ad       	ldd	r25, Y+56	; 0x38
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <main+0x1bc>
    24cc:	80 e9       	ldi	r24, 0x90	; 144
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	9e a7       	std	Y+46, r25	; 0x2e
    24d2:	8d a7       	std	Y+45, r24	; 0x2d
    24d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <main+0x1aa>
    24dc:	9e a7       	std	Y+46, r25	; 0x2e
    24de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e2:	98 a9       	ldd	r25, Y+48	; 0x30
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ec:	98 a9       	ldd	r25, Y+48	; 0x30
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <main+0x19e>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	69 a9       	ldd	r22, Y+49	; 0x31
    24f6:	7a a9       	ldd	r23, Y+50	; 0x32
    24f8:	8b a9       	ldd	r24, Y+51	; 0x33
    24fa:	9c a9       	ldd	r25, Y+52	; 0x34
    24fc:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	98 ab       	std	Y+48, r25	; 0x30
    2506:	8f a7       	std	Y+47, r24	; 0x2f
    2508:	8f a5       	ldd	r24, Y+47	; 0x2f
    250a:	98 a9       	ldd	r25, Y+48	; 0x30
    250c:	9c a7       	std	Y+44, r25	; 0x2c
    250e:	8b a7       	std	Y+43, r24	; 0x2b
    2510:	8b a5       	ldd	r24, Y+43	; 0x2b
    2512:	9c a5       	ldd	r25, Y+44	; 0x2c
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <main+0x1e6>
    2518:	9c a7       	std	Y+44, r25	; 0x2c
    251a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_LOW);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a8 ec       	ldi	r26, 0xC8	; 200
    252c:	b2 e4       	ldi	r27, 0x42	; 66
    252e:	8f a3       	std	Y+39, r24	; 0x27
    2530:	98 a7       	std	Y+40, r25	; 0x28
    2532:	a9 a7       	std	Y+41, r26	; 0x29
    2534:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6f a1       	ldd	r22, Y+39	; 0x27
    2538:	78 a5       	ldd	r23, Y+40	; 0x28
    253a:	89 a5       	ldd	r24, Y+41	; 0x29
    253c:	9a a5       	ldd	r25, Y+42	; 0x2a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a e7       	ldi	r20, 0x7A	; 122
    2544:	55 e4       	ldi	r21, 0x45	; 69
    2546:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8b a3       	std	Y+35, r24	; 0x23
    2550:	9c a3       	std	Y+36, r25	; 0x24
    2552:	ad a3       	std	Y+37, r26	; 0x25
    2554:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2556:	6b a1       	ldd	r22, Y+35	; 0x23
    2558:	7c a1       	ldd	r23, Y+36	; 0x24
    255a:	8d a1       	ldd	r24, Y+37	; 0x25
    255c:	9e a1       	ldd	r25, Y+38	; 0x26
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <main+0x24a>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <main+0x2c8>
	else if (__tmp > 65535)
    2578:	6b a1       	ldd	r22, Y+35	; 0x23
    257a:	7c a1       	ldd	r23, Y+36	; 0x24
    257c:	8d a1       	ldd	r24, Y+37	; 0x25
    257e:	9e a1       	ldd	r25, Y+38	; 0x26
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6f a1       	ldd	r22, Y+39	; 0x27
    2592:	78 a5       	ldd	r23, Y+40	; 0x28
    2594:	89 a5       	ldd	r24, Y+41	; 0x29
    2596:	9a a5       	ldd	r25, Y+42	; 0x2a
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9a a3       	std	Y+34, r25	; 0x22
    25b6:	89 a3       	std	Y+33, r24	; 0x21
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <main+0x2aa>
    25ba:	80 e9       	ldi	r24, 0x90	; 144
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
    25c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c4:	98 a1       	ldd	r25, Y+32	; 0x20
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <main+0x298>
    25ca:	98 a3       	std	Y+32, r25	; 0x20
    25cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	89 a1       	ldd	r24, Y+33	; 0x21
    25d0:	9a a1       	ldd	r25, Y+34	; 0x22
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <main+0x28c>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <main+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	6b a1       	ldd	r22, Y+35	; 0x23
    25e4:	7c a1       	ldd	r23, Y+36	; 0x24
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9a a3       	std	Y+34, r25	; 0x22
    25f4:	89 a3       	std	Y+33, r24	; 0x21
    25f6:	89 a1       	ldd	r24, Y+33	; 0x21
    25f8:	9a a1       	ldd	r25, Y+34	; 0x22
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
    25fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2600:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <main+0x2d4>
    2606:	9e 8f       	std	Y+30, r25	; 0x1e
    2608:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		u8 i=0;
    260a:	19 ae       	std	Y+57, r1	; 0x39
		for(i=0;i<12;i+=2)
    260c:	19 ae       	std	Y+57, r1	; 0x39
    260e:	2c c1       	rjmp	.+600    	; 0x2868 <main+0x53a>
		{
			if(0==i%4)
    2610:	89 ad       	ldd	r24, Y+57	; 0x39
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	83 70       	andi	r24, 0x03	; 3
    2618:	90 70       	andi	r25, 0x00	; 0
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	09 f0       	breq	.+2      	; 0x2620 <main+0x2f2>
    261e:	91 c0       	rjmp	.+290    	; 0x2742 <main+0x414>
			{
				LCD_voidXYString(LCD_u8_LINE1,i,str1);
    2620:	9e 01       	movw	r18, r28
    2622:	26 5c       	subi	r18, 0xC6	; 198
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	69 ad       	ldd	r22, Y+57	; 0x39
    262a:	a9 01       	movw	r20, r18
    262c:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
				LCD_voidXYString(LCD_u8_LINE2,i,str2);
    2630:	9e 01       	movw	r18, r28
    2632:	2f 5b       	subi	r18, 0xBF	; 191
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	69 ad       	ldd	r22, Y+57	; 0x39
    263a:	a9 01       	movw	r20, r18
    263c:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	aa e7       	ldi	r26, 0x7A	; 122
    2646:	b4 e4       	ldi	r27, 0x44	; 68
    2648:	89 8f       	std	Y+25, r24	; 0x19
    264a:	9a 8f       	std	Y+26, r25	; 0x1a
    264c:	ab 8f       	std	Y+27, r26	; 0x1b
    264e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a e7       	ldi	r20, 0x7A	; 122
    265e:	55 e4       	ldi	r21, 0x45	; 69
    2660:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8d 8b       	std	Y+21, r24	; 0x15
    266a:	9e 8b       	std	Y+22, r25	; 0x16
    266c:	af 8b       	std	Y+23, r26	; 0x17
    266e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2670:	6d 89       	ldd	r22, Y+21	; 0x15
    2672:	7e 89       	ldd	r23, Y+22	; 0x16
    2674:	8f 89       	ldd	r24, Y+23	; 0x17
    2676:	98 8d       	ldd	r25, Y+24	; 0x18
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <main+0x364>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9c 8b       	std	Y+20, r25	; 0x14
    268e:	8b 8b       	std	Y+19, r24	; 0x13
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <main+0x3e2>
	else if (__tmp > 65535)
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <main+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	69 8d       	ldd	r22, Y+25	; 0x19
    26ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9c 8b       	std	Y+20, r25	; 0x14
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <main+0x3c4>
    26d4:	80 e9       	ldi	r24, 0x90	; 144
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	9a 8b       	std	Y+18, r25	; 0x12
    26da:	89 8b       	std	Y+17, r24	; 0x11
    26dc:	89 89       	ldd	r24, Y+17	; 0x11
    26de:	9a 89       	ldd	r25, Y+18	; 0x12
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <main+0x3b2>
    26e4:	9a 8b       	std	Y+18, r25	; 0x12
    26e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	9c 89       	ldd	r25, Y+20	; 0x14
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9c 8b       	std	Y+20, r25	; 0x14
    26f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8b 89       	ldd	r24, Y+19	; 0x13
    26f4:	9c 89       	ldd	r25, Y+20	; 0x14
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <main+0x3a6>
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <main+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	6d 89       	ldd	r22, Y+21	; 0x15
    26fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2700:	8f 89       	ldd	r24, Y+23	; 0x17
    2702:	98 8d       	ldd	r25, Y+24	; 0x18
    2704:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
    2710:	8b 89       	ldd	r24, Y+19	; 0x13
    2712:	9c 89       	ldd	r25, Y+20	; 0x14
    2714:	98 8b       	std	Y+16, r25	; 0x10
    2716:	8f 87       	std	Y+15, r24	; 0x0f
    2718:	8f 85       	ldd	r24, Y+15	; 0x0f
    271a:	98 89       	ldd	r25, Y+16	; 0x10
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <main+0x3ee>
    2720:	98 8b       	std	Y+16, r25	; 0x10
    2722:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				LCD_voidXYString(LCD_u8_LINE1,i,LCD_CLEARTEXT);
    2724:	23 e0       	ldi	r18, 0x03	; 3
    2726:	31 e0       	ldi	r19, 0x01	; 1
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	69 ad       	ldd	r22, Y+57	; 0x39
    272c:	a9 01       	movw	r20, r18
    272e:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
				LCD_voidXYString(LCD_u8_LINE2,i,LCD_CLEARTEXT);
    2732:	23 e0       	ldi	r18, 0x03	; 3
    2734:	31 e0       	ldi	r19, 0x01	; 1
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	69 ad       	ldd	r22, Y+57	; 0x39
    273a:	a9 01       	movw	r20, r18
    273c:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
    2740:	90 c0       	rjmp	.+288    	; 0x2862 <main+0x534>
			}
			else
			{
				LCD_voidXYString(LCD_u8_LINE1,i,str2);
    2742:	9e 01       	movw	r18, r28
    2744:	2f 5b       	subi	r18, 0xBF	; 191
    2746:	3f 4f       	sbci	r19, 0xFF	; 255
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	69 ad       	ldd	r22, Y+57	; 0x39
    274c:	a9 01       	movw	r20, r18
    274e:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
				LCD_voidXYString(LCD_u8_LINE2,i,str1);
    2752:	9e 01       	movw	r18, r28
    2754:	26 5c       	subi	r18, 0xC6	; 198
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	69 ad       	ldd	r22, Y+57	; 0x39
    275c:	a9 01       	movw	r20, r18
    275e:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	aa e7       	ldi	r26, 0x7A	; 122
    2768:	b4 e4       	ldi	r27, 0x44	; 68
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a e7       	ldi	r20, 0x7A	; 122
    2780:	55 e4       	ldi	r21, 0x45	; 69
    2782:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 27 04 	call	0x84e	; 0x84e <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <main+0x486>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <main+0x504>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 c7 03 	call	0x78e	; 0x78e <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <main+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <main+0x4e6>
    27f6:	80 e9       	ldi	r24, 0x90	; 144
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x4d4>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <main+0x4c8>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <main+0x510>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_voidXYString(LCD_u8_LINE1,i,LCD_CLEARTEXT);
    2846:	23 e0       	ldi	r18, 0x03	; 3
    2848:	31 e0       	ldi	r19, 0x01	; 1
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	69 ad       	ldd	r22, Y+57	; 0x39
    284e:	a9 01       	movw	r20, r18
    2850:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
				LCD_voidXYString(LCD_u8_LINE2,i,LCD_CLEARTEXT);
    2854:	23 e0       	ldi	r18, 0x03	; 3
    2856:	31 e0       	ldi	r19, 0x01	; 1
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	69 ad       	ldd	r22, Y+57	; 0x39
    285c:	a9 01       	movw	r20, r18
    285e:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_voidXYString>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_HIGH);
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN5,DIO_u8_LOW);
		_delay_ms(100);
		u8 i=0;
		for(i=0;i<12;i+=2)
    2862:	89 ad       	ldd	r24, Y+57	; 0x39
    2864:	8e 5f       	subi	r24, 0xFE	; 254
    2866:	89 af       	std	Y+57, r24	; 0x39
    2868:	89 ad       	ldd	r24, Y+57	; 0x39
    286a:	8c 30       	cpi	r24, 0x0C	; 12
    286c:	08 f4       	brcc	.+2      	; 0x2870 <main+0x542>
    286e:	d0 ce       	rjmp	.-608    	; 0x2610 <main+0x2e2>
    2870:	de cd       	rjmp	.-1092   	; 0x242e <main+0x100>

00002872 <__prologue_saves__>:
    2872:	2f 92       	push	r2
    2874:	3f 92       	push	r3
    2876:	4f 92       	push	r4
    2878:	5f 92       	push	r5
    287a:	6f 92       	push	r6
    287c:	7f 92       	push	r7
    287e:	8f 92       	push	r8
    2880:	9f 92       	push	r9
    2882:	af 92       	push	r10
    2884:	bf 92       	push	r11
    2886:	cf 92       	push	r12
    2888:	df 92       	push	r13
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	ca 1b       	sub	r28, r26
    289c:	db 0b       	sbc	r29, r27
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	09 94       	ijmp

000028aa <__epilogue_restores__>:
    28aa:	2a 88       	ldd	r2, Y+18	; 0x12
    28ac:	39 88       	ldd	r3, Y+17	; 0x11
    28ae:	48 88       	ldd	r4, Y+16	; 0x10
    28b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    28bc:	b9 84       	ldd	r11, Y+9	; 0x09
    28be:	c8 84       	ldd	r12, Y+8	; 0x08
    28c0:	df 80       	ldd	r13, Y+7	; 0x07
    28c2:	ee 80       	ldd	r14, Y+6	; 0x06
    28c4:	fd 80       	ldd	r15, Y+5	; 0x05
    28c6:	0c 81       	ldd	r16, Y+4	; 0x04
    28c8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ca:	aa 81       	ldd	r26, Y+2	; 0x02
    28cc:	b9 81       	ldd	r27, Y+1	; 0x01
    28ce:	ce 0f       	add	r28, r30
    28d0:	d1 1d       	adc	r29, r1
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	ed 01       	movw	r28, r26
    28de:	08 95       	ret

000028e0 <sprintf>:
    28e0:	ae e0       	ldi	r26, 0x0E	; 14
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e6 e7       	ldi	r30, 0x76	; 118
    28e6:	f4 e1       	ldi	r31, 0x14	; 20
    28e8:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x1c>
    28ec:	0d 89       	ldd	r16, Y+21	; 0x15
    28ee:	1e 89       	ldd	r17, Y+22	; 0x16
    28f0:	86 e0       	ldi	r24, 0x06	; 6
    28f2:	8c 83       	std	Y+4, r24	; 0x04
    28f4:	1a 83       	std	Y+2, r17	; 0x02
    28f6:	09 83       	std	Y+1, r16	; 0x01
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	9f e7       	ldi	r25, 0x7F	; 127
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	9e 01       	movw	r18, r28
    2902:	27 5e       	subi	r18, 0xE7	; 231
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	ce 01       	movw	r24, r28
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	6f 89       	ldd	r22, Y+23	; 0x17
    290c:	78 8d       	ldd	r23, Y+24	; 0x18
    290e:	a9 01       	movw	r20, r18
    2910:	0e 94 94 14 	call	0x2928	; 0x2928 <vfprintf>
    2914:	2f 81       	ldd	r18, Y+7	; 0x07
    2916:	38 85       	ldd	r19, Y+8	; 0x08
    2918:	02 0f       	add	r16, r18
    291a:	13 1f       	adc	r17, r19
    291c:	f8 01       	movw	r30, r16
    291e:	10 82       	st	Z, r1
    2920:	2e 96       	adiw	r28, 0x0e	; 14
    2922:	e4 e0       	ldi	r30, 0x04	; 4
    2924:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x1c>

00002928 <vfprintf>:
    2928:	ab e0       	ldi	r26, 0x0B	; 11
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ea e9       	ldi	r30, 0x9A	; 154
    292e:	f4 e1       	ldi	r31, 0x14	; 20
    2930:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__>
    2934:	3c 01       	movw	r6, r24
    2936:	2b 01       	movw	r4, r22
    2938:	5a 01       	movw	r10, r20
    293a:	fc 01       	movw	r30, r24
    293c:	17 82       	std	Z+7, r1	; 0x07
    293e:	16 82       	std	Z+6, r1	; 0x06
    2940:	83 81       	ldd	r24, Z+3	; 0x03
    2942:	81 fd       	sbrc	r24, 1
    2944:	03 c0       	rjmp	.+6      	; 0x294c <vfprintf+0x24>
    2946:	6f ef       	ldi	r22, 0xFF	; 255
    2948:	7f ef       	ldi	r23, 0xFF	; 255
    294a:	c6 c1       	rjmp	.+908    	; 0x2cd8 <vfprintf+0x3b0>
    294c:	9a e0       	ldi	r25, 0x0A	; 10
    294e:	89 2e       	mov	r8, r25
    2950:	1e 01       	movw	r2, r28
    2952:	08 94       	sec
    2954:	21 1c       	adc	r2, r1
    2956:	31 1c       	adc	r3, r1
    2958:	f3 01       	movw	r30, r6
    295a:	23 81       	ldd	r18, Z+3	; 0x03
    295c:	f2 01       	movw	r30, r4
    295e:	23 fd       	sbrc	r18, 3
    2960:	85 91       	lpm	r24, Z+
    2962:	23 ff       	sbrs	r18, 3
    2964:	81 91       	ld	r24, Z+
    2966:	2f 01       	movw	r4, r30
    2968:	88 23       	and	r24, r24
    296a:	09 f4       	brne	.+2      	; 0x296e <vfprintf+0x46>
    296c:	b2 c1       	rjmp	.+868    	; 0x2cd2 <vfprintf+0x3aa>
    296e:	85 32       	cpi	r24, 0x25	; 37
    2970:	39 f4       	brne	.+14     	; 0x2980 <vfprintf+0x58>
    2972:	23 fd       	sbrc	r18, 3
    2974:	85 91       	lpm	r24, Z+
    2976:	23 ff       	sbrs	r18, 3
    2978:	81 91       	ld	r24, Z+
    297a:	2f 01       	movw	r4, r30
    297c:	85 32       	cpi	r24, 0x25	; 37
    297e:	29 f4       	brne	.+10     	; 0x298a <vfprintf+0x62>
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	b3 01       	movw	r22, r6
    2984:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2988:	e7 cf       	rjmp	.-50     	; 0x2958 <vfprintf+0x30>
    298a:	98 2f       	mov	r25, r24
    298c:	ff 24       	eor	r15, r15
    298e:	ee 24       	eor	r14, r14
    2990:	99 24       	eor	r9, r9
    2992:	ff e1       	ldi	r31, 0x1F	; 31
    2994:	ff 15       	cp	r31, r15
    2996:	d0 f0       	brcs	.+52     	; 0x29cc <vfprintf+0xa4>
    2998:	9b 32       	cpi	r25, 0x2B	; 43
    299a:	69 f0       	breq	.+26     	; 0x29b6 <vfprintf+0x8e>
    299c:	9c 32       	cpi	r25, 0x2C	; 44
    299e:	28 f4       	brcc	.+10     	; 0x29aa <vfprintf+0x82>
    29a0:	90 32       	cpi	r25, 0x20	; 32
    29a2:	59 f0       	breq	.+22     	; 0x29ba <vfprintf+0x92>
    29a4:	93 32       	cpi	r25, 0x23	; 35
    29a6:	91 f4       	brne	.+36     	; 0x29cc <vfprintf+0xa4>
    29a8:	0e c0       	rjmp	.+28     	; 0x29c6 <vfprintf+0x9e>
    29aa:	9d 32       	cpi	r25, 0x2D	; 45
    29ac:	49 f0       	breq	.+18     	; 0x29c0 <vfprintf+0x98>
    29ae:	90 33       	cpi	r25, 0x30	; 48
    29b0:	69 f4       	brne	.+26     	; 0x29cc <vfprintf+0xa4>
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	24 c0       	rjmp	.+72     	; 0x29fe <vfprintf+0xd6>
    29b6:	52 e0       	ldi	r21, 0x02	; 2
    29b8:	f5 2a       	or	r15, r21
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	f8 2a       	or	r15, r24
    29be:	28 c0       	rjmp	.+80     	; 0x2a10 <vfprintf+0xe8>
    29c0:	98 e0       	ldi	r25, 0x08	; 8
    29c2:	f9 2a       	or	r15, r25
    29c4:	25 c0       	rjmp	.+74     	; 0x2a10 <vfprintf+0xe8>
    29c6:	e0 e1       	ldi	r30, 0x10	; 16
    29c8:	fe 2a       	or	r15, r30
    29ca:	22 c0       	rjmp	.+68     	; 0x2a10 <vfprintf+0xe8>
    29cc:	f7 fc       	sbrc	r15, 7
    29ce:	29 c0       	rjmp	.+82     	; 0x2a22 <vfprintf+0xfa>
    29d0:	89 2f       	mov	r24, r25
    29d2:	80 53       	subi	r24, 0x30	; 48
    29d4:	8a 30       	cpi	r24, 0x0A	; 10
    29d6:	70 f4       	brcc	.+28     	; 0x29f4 <vfprintf+0xcc>
    29d8:	f6 fe       	sbrs	r15, 6
    29da:	05 c0       	rjmp	.+10     	; 0x29e6 <vfprintf+0xbe>
    29dc:	98 9c       	mul	r9, r8
    29de:	90 2c       	mov	r9, r0
    29e0:	11 24       	eor	r1, r1
    29e2:	98 0e       	add	r9, r24
    29e4:	15 c0       	rjmp	.+42     	; 0x2a10 <vfprintf+0xe8>
    29e6:	e8 9c       	mul	r14, r8
    29e8:	e0 2c       	mov	r14, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	e8 0e       	add	r14, r24
    29ee:	f0 e2       	ldi	r31, 0x20	; 32
    29f0:	ff 2a       	or	r15, r31
    29f2:	0e c0       	rjmp	.+28     	; 0x2a10 <vfprintf+0xe8>
    29f4:	9e 32       	cpi	r25, 0x2E	; 46
    29f6:	29 f4       	brne	.+10     	; 0x2a02 <vfprintf+0xda>
    29f8:	f6 fc       	sbrc	r15, 6
    29fa:	6b c1       	rjmp	.+726    	; 0x2cd2 <vfprintf+0x3aa>
    29fc:	40 e4       	ldi	r20, 0x40	; 64
    29fe:	f4 2a       	or	r15, r20
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <vfprintf+0xe8>
    2a02:	9c 36       	cpi	r25, 0x6C	; 108
    2a04:	19 f4       	brne	.+6      	; 0x2a0c <vfprintf+0xe4>
    2a06:	50 e8       	ldi	r21, 0x80	; 128
    2a08:	f5 2a       	or	r15, r21
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <vfprintf+0xe8>
    2a0c:	98 36       	cpi	r25, 0x68	; 104
    2a0e:	49 f4       	brne	.+18     	; 0x2a22 <vfprintf+0xfa>
    2a10:	f2 01       	movw	r30, r4
    2a12:	23 fd       	sbrc	r18, 3
    2a14:	95 91       	lpm	r25, Z+
    2a16:	23 ff       	sbrs	r18, 3
    2a18:	91 91       	ld	r25, Z+
    2a1a:	2f 01       	movw	r4, r30
    2a1c:	99 23       	and	r25, r25
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <vfprintf+0xfa>
    2a20:	b8 cf       	rjmp	.-144    	; 0x2992 <vfprintf+0x6a>
    2a22:	89 2f       	mov	r24, r25
    2a24:	85 54       	subi	r24, 0x45	; 69
    2a26:	83 30       	cpi	r24, 0x03	; 3
    2a28:	18 f0       	brcs	.+6      	; 0x2a30 <vfprintf+0x108>
    2a2a:	80 52       	subi	r24, 0x20	; 32
    2a2c:	83 30       	cpi	r24, 0x03	; 3
    2a2e:	38 f4       	brcc	.+14     	; 0x2a3e <vfprintf+0x116>
    2a30:	44 e0       	ldi	r20, 0x04	; 4
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	a4 0e       	add	r10, r20
    2a36:	b5 1e       	adc	r11, r21
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	59 83       	std	Y+1, r21	; 0x01
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <vfprintf+0x134>
    2a3e:	93 36       	cpi	r25, 0x63	; 99
    2a40:	31 f0       	breq	.+12     	; 0x2a4e <vfprintf+0x126>
    2a42:	93 37       	cpi	r25, 0x73	; 115
    2a44:	79 f0       	breq	.+30     	; 0x2a64 <vfprintf+0x13c>
    2a46:	93 35       	cpi	r25, 0x53	; 83
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <vfprintf+0x124>
    2a4a:	56 c0       	rjmp	.+172    	; 0x2af8 <vfprintf+0x1d0>
    2a4c:	20 c0       	rjmp	.+64     	; 0x2a8e <vfprintf+0x166>
    2a4e:	f5 01       	movw	r30, r10
    2a50:	80 81       	ld	r24, Z
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	42 e0       	ldi	r20, 0x02	; 2
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	a4 0e       	add	r10, r20
    2a5a:	b5 1e       	adc	r11, r21
    2a5c:	61 01       	movw	r12, r2
    2a5e:	01 e0       	ldi	r16, 0x01	; 1
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	12 c0       	rjmp	.+36     	; 0x2a88 <vfprintf+0x160>
    2a64:	f5 01       	movw	r30, r10
    2a66:	c0 80       	ld	r12, Z
    2a68:	d1 80       	ldd	r13, Z+1	; 0x01
    2a6a:	f6 fc       	sbrc	r15, 6
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <vfprintf+0x14c>
    2a6e:	6f ef       	ldi	r22, 0xFF	; 255
    2a70:	7f ef       	ldi	r23, 0xFF	; 255
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <vfprintf+0x150>
    2a74:	69 2d       	mov	r22, r9
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	42 e0       	ldi	r20, 0x02	; 2
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	a4 0e       	add	r10, r20
    2a7e:	b5 1e       	adc	r11, r21
    2a80:	c6 01       	movw	r24, r12
    2a82:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <strnlen>
    2a86:	8c 01       	movw	r16, r24
    2a88:	5f e7       	ldi	r21, 0x7F	; 127
    2a8a:	f5 22       	and	r15, r21
    2a8c:	14 c0       	rjmp	.+40     	; 0x2ab6 <vfprintf+0x18e>
    2a8e:	f5 01       	movw	r30, r10
    2a90:	c0 80       	ld	r12, Z
    2a92:	d1 80       	ldd	r13, Z+1	; 0x01
    2a94:	f6 fc       	sbrc	r15, 6
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <vfprintf+0x176>
    2a98:	6f ef       	ldi	r22, 0xFF	; 255
    2a9a:	7f ef       	ldi	r23, 0xFF	; 255
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <vfprintf+0x17a>
    2a9e:	69 2d       	mov	r22, r9
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	42 e0       	ldi	r20, 0x02	; 2
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	a4 0e       	add	r10, r20
    2aa8:	b5 1e       	adc	r11, r21
    2aaa:	c6 01       	movw	r24, r12
    2aac:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <strnlen_P>
    2ab0:	8c 01       	movw	r16, r24
    2ab2:	50 e8       	ldi	r21, 0x80	; 128
    2ab4:	f5 2a       	or	r15, r21
    2ab6:	f3 fe       	sbrs	r15, 3
    2ab8:	07 c0       	rjmp	.+14     	; 0x2ac8 <vfprintf+0x1a0>
    2aba:	1a c0       	rjmp	.+52     	; 0x2af0 <vfprintf+0x1c8>
    2abc:	80 e2       	ldi	r24, 0x20	; 32
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	b3 01       	movw	r22, r6
    2ac2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2ac6:	ea 94       	dec	r14
    2ac8:	8e 2d       	mov	r24, r14
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	08 17       	cp	r16, r24
    2ace:	19 07       	cpc	r17, r25
    2ad0:	a8 f3       	brcs	.-22     	; 0x2abc <vfprintf+0x194>
    2ad2:	0e c0       	rjmp	.+28     	; 0x2af0 <vfprintf+0x1c8>
    2ad4:	f6 01       	movw	r30, r12
    2ad6:	f7 fc       	sbrc	r15, 7
    2ad8:	85 91       	lpm	r24, Z+
    2ada:	f7 fe       	sbrs	r15, 7
    2adc:	81 91       	ld	r24, Z+
    2ade:	6f 01       	movw	r12, r30
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	b3 01       	movw	r22, r6
    2ae4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2ae8:	e1 10       	cpse	r14, r1
    2aea:	ea 94       	dec	r14
    2aec:	01 50       	subi	r16, 0x01	; 1
    2aee:	10 40       	sbci	r17, 0x00	; 0
    2af0:	01 15       	cp	r16, r1
    2af2:	11 05       	cpc	r17, r1
    2af4:	79 f7       	brne	.-34     	; 0x2ad4 <vfprintf+0x1ac>
    2af6:	ea c0       	rjmp	.+468    	; 0x2ccc <vfprintf+0x3a4>
    2af8:	94 36       	cpi	r25, 0x64	; 100
    2afa:	11 f0       	breq	.+4      	; 0x2b00 <vfprintf+0x1d8>
    2afc:	99 36       	cpi	r25, 0x69	; 105
    2afe:	69 f5       	brne	.+90     	; 0x2b5a <vfprintf+0x232>
    2b00:	f7 fe       	sbrs	r15, 7
    2b02:	08 c0       	rjmp	.+16     	; 0x2b14 <vfprintf+0x1ec>
    2b04:	f5 01       	movw	r30, r10
    2b06:	20 81       	ld	r18, Z
    2b08:	31 81       	ldd	r19, Z+1	; 0x01
    2b0a:	42 81       	ldd	r20, Z+2	; 0x02
    2b0c:	53 81       	ldd	r21, Z+3	; 0x03
    2b0e:	84 e0       	ldi	r24, 0x04	; 4
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0a c0       	rjmp	.+20     	; 0x2b28 <vfprintf+0x200>
    2b14:	f5 01       	movw	r30, r10
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	9c 01       	movw	r18, r24
    2b1c:	44 27       	eor	r20, r20
    2b1e:	37 fd       	sbrc	r19, 7
    2b20:	40 95       	com	r20
    2b22:	54 2f       	mov	r21, r20
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	a8 0e       	add	r10, r24
    2b2a:	b9 1e       	adc	r11, r25
    2b2c:	9f e6       	ldi	r25, 0x6F	; 111
    2b2e:	f9 22       	and	r15, r25
    2b30:	57 ff       	sbrs	r21, 7
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <vfprintf+0x21e>
    2b34:	50 95       	com	r21
    2b36:	40 95       	com	r20
    2b38:	30 95       	com	r19
    2b3a:	21 95       	neg	r18
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b40:	5f 4f       	sbci	r21, 0xFF	; 255
    2b42:	e0 e8       	ldi	r30, 0x80	; 128
    2b44:	fe 2a       	or	r15, r30
    2b46:	ca 01       	movw	r24, r20
    2b48:	b9 01       	movw	r22, r18
    2b4a:	a1 01       	movw	r20, r2
    2b4c:	2a e0       	ldi	r18, 0x0A	; 10
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__ultoa_invert>
    2b54:	d8 2e       	mov	r13, r24
    2b56:	d2 18       	sub	r13, r2
    2b58:	40 c0       	rjmp	.+128    	; 0x2bda <vfprintf+0x2b2>
    2b5a:	95 37       	cpi	r25, 0x75	; 117
    2b5c:	29 f4       	brne	.+10     	; 0x2b68 <vfprintf+0x240>
    2b5e:	1f 2d       	mov	r17, r15
    2b60:	1f 7e       	andi	r17, 0xEF	; 239
    2b62:	2a e0       	ldi	r18, 0x0A	; 10
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	1d c0       	rjmp	.+58     	; 0x2ba2 <vfprintf+0x27a>
    2b68:	1f 2d       	mov	r17, r15
    2b6a:	19 7f       	andi	r17, 0xF9	; 249
    2b6c:	9f 36       	cpi	r25, 0x6F	; 111
    2b6e:	61 f0       	breq	.+24     	; 0x2b88 <vfprintf+0x260>
    2b70:	90 37       	cpi	r25, 0x70	; 112
    2b72:	20 f4       	brcc	.+8      	; 0x2b7c <vfprintf+0x254>
    2b74:	98 35       	cpi	r25, 0x58	; 88
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <vfprintf+0x252>
    2b78:	ac c0       	rjmp	.+344    	; 0x2cd2 <vfprintf+0x3aa>
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <vfprintf+0x272>
    2b7c:	90 37       	cpi	r25, 0x70	; 112
    2b7e:	39 f0       	breq	.+14     	; 0x2b8e <vfprintf+0x266>
    2b80:	98 37       	cpi	r25, 0x78	; 120
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <vfprintf+0x25e>
    2b84:	a6 c0       	rjmp	.+332    	; 0x2cd2 <vfprintf+0x3aa>
    2b86:	04 c0       	rjmp	.+8      	; 0x2b90 <vfprintf+0x268>
    2b88:	28 e0       	ldi	r18, 0x08	; 8
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	0a c0       	rjmp	.+20     	; 0x2ba2 <vfprintf+0x27a>
    2b8e:	10 61       	ori	r17, 0x10	; 16
    2b90:	14 fd       	sbrc	r17, 4
    2b92:	14 60       	ori	r17, 0x04	; 4
    2b94:	20 e1       	ldi	r18, 0x10	; 16
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	04 c0       	rjmp	.+8      	; 0x2ba2 <vfprintf+0x27a>
    2b9a:	14 fd       	sbrc	r17, 4
    2b9c:	16 60       	ori	r17, 0x06	; 6
    2b9e:	20 e1       	ldi	r18, 0x10	; 16
    2ba0:	32 e0       	ldi	r19, 0x02	; 2
    2ba2:	17 ff       	sbrs	r17, 7
    2ba4:	08 c0       	rjmp	.+16     	; 0x2bb6 <vfprintf+0x28e>
    2ba6:	f5 01       	movw	r30, r10
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	44 e0       	ldi	r20, 0x04	; 4
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	08 c0       	rjmp	.+16     	; 0x2bc6 <vfprintf+0x29e>
    2bb6:	f5 01       	movw	r30, r10
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	42 e0       	ldi	r20, 0x02	; 2
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	a4 0e       	add	r10, r20
    2bc8:	b5 1e       	adc	r11, r21
    2bca:	a1 01       	movw	r20, r2
    2bcc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__ultoa_invert>
    2bd0:	d8 2e       	mov	r13, r24
    2bd2:	d2 18       	sub	r13, r2
    2bd4:	8f e7       	ldi	r24, 0x7F	; 127
    2bd6:	f8 2e       	mov	r15, r24
    2bd8:	f1 22       	and	r15, r17
    2bda:	f6 fe       	sbrs	r15, 6
    2bdc:	0b c0       	rjmp	.+22     	; 0x2bf4 <vfprintf+0x2cc>
    2bde:	5e ef       	ldi	r21, 0xFE	; 254
    2be0:	f5 22       	and	r15, r21
    2be2:	d9 14       	cp	r13, r9
    2be4:	38 f4       	brcc	.+14     	; 0x2bf4 <vfprintf+0x2cc>
    2be6:	f4 fe       	sbrs	r15, 4
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <vfprintf+0x2d0>
    2bea:	f2 fc       	sbrc	r15, 2
    2bec:	05 c0       	rjmp	.+10     	; 0x2bf8 <vfprintf+0x2d0>
    2bee:	8f ee       	ldi	r24, 0xEF	; 239
    2bf0:	f8 22       	and	r15, r24
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <vfprintf+0x2d0>
    2bf4:	1d 2d       	mov	r17, r13
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <vfprintf+0x2d2>
    2bf8:	19 2d       	mov	r17, r9
    2bfa:	f4 fe       	sbrs	r15, 4
    2bfc:	0d c0       	rjmp	.+26     	; 0x2c18 <vfprintf+0x2f0>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 0d       	add	r30, r13
    2c02:	f1 1d       	adc	r31, r1
    2c04:	80 81       	ld	r24, Z
    2c06:	80 33       	cpi	r24, 0x30	; 48
    2c08:	19 f4       	brne	.+6      	; 0x2c10 <vfprintf+0x2e8>
    2c0a:	99 ee       	ldi	r25, 0xE9	; 233
    2c0c:	f9 22       	and	r15, r25
    2c0e:	08 c0       	rjmp	.+16     	; 0x2c20 <vfprintf+0x2f8>
    2c10:	1f 5f       	subi	r17, 0xFF	; 255
    2c12:	f2 fe       	sbrs	r15, 2
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <vfprintf+0x2f8>
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <vfprintf+0x2f6>
    2c18:	8f 2d       	mov	r24, r15
    2c1a:	86 78       	andi	r24, 0x86	; 134
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <vfprintf+0x2f8>
    2c1e:	1f 5f       	subi	r17, 0xFF	; 255
    2c20:	0f 2d       	mov	r16, r15
    2c22:	f3 fc       	sbrc	r15, 3
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <vfprintf+0x326>
    2c26:	f0 fe       	sbrs	r15, 0
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <vfprintf+0x320>
    2c2a:	1e 15       	cp	r17, r14
    2c2c:	10 f0       	brcs	.+4      	; 0x2c32 <vfprintf+0x30a>
    2c2e:	9d 2c       	mov	r9, r13
    2c30:	0b c0       	rjmp	.+22     	; 0x2c48 <vfprintf+0x320>
    2c32:	9d 2c       	mov	r9, r13
    2c34:	9e 0c       	add	r9, r14
    2c36:	91 1a       	sub	r9, r17
    2c38:	1e 2d       	mov	r17, r14
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <vfprintf+0x320>
    2c3c:	80 e2       	ldi	r24, 0x20	; 32
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	b3 01       	movw	r22, r6
    2c42:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2c46:	1f 5f       	subi	r17, 0xFF	; 255
    2c48:	1e 15       	cp	r17, r14
    2c4a:	c0 f3       	brcs	.-16     	; 0x2c3c <vfprintf+0x314>
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <vfprintf+0x32e>
    2c4e:	1e 15       	cp	r17, r14
    2c50:	10 f4       	brcc	.+4      	; 0x2c56 <vfprintf+0x32e>
    2c52:	e1 1a       	sub	r14, r17
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <vfprintf+0x330>
    2c56:	ee 24       	eor	r14, r14
    2c58:	04 ff       	sbrs	r16, 4
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <vfprintf+0x352>
    2c5c:	80 e3       	ldi	r24, 0x30	; 48
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	b3 01       	movw	r22, r6
    2c62:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2c66:	02 ff       	sbrs	r16, 2
    2c68:	1d c0       	rjmp	.+58     	; 0x2ca4 <vfprintf+0x37c>
    2c6a:	01 fd       	sbrc	r16, 1
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <vfprintf+0x34c>
    2c6e:	88 e7       	ldi	r24, 0x78	; 120
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e c0       	rjmp	.+28     	; 0x2c90 <vfprintf+0x368>
    2c74:	88 e5       	ldi	r24, 0x58	; 88
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <vfprintf+0x368>
    2c7a:	80 2f       	mov	r24, r16
    2c7c:	86 78       	andi	r24, 0x86	; 134
    2c7e:	91 f0       	breq	.+36     	; 0x2ca4 <vfprintf+0x37c>
    2c80:	01 ff       	sbrs	r16, 1
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <vfprintf+0x360>
    2c84:	8b e2       	ldi	r24, 0x2B	; 43
    2c86:	01 c0       	rjmp	.+2      	; 0x2c8a <vfprintf+0x362>
    2c88:	80 e2       	ldi	r24, 0x20	; 32
    2c8a:	f7 fc       	sbrc	r15, 7
    2c8c:	8d e2       	ldi	r24, 0x2D	; 45
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	b3 01       	movw	r22, r6
    2c92:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2c96:	06 c0       	rjmp	.+12     	; 0x2ca4 <vfprintf+0x37c>
    2c98:	80 e3       	ldi	r24, 0x30	; 48
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	b3 01       	movw	r22, r6
    2c9e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2ca2:	9a 94       	dec	r9
    2ca4:	d9 14       	cp	r13, r9
    2ca6:	c0 f3       	brcs	.-16     	; 0x2c98 <vfprintf+0x370>
    2ca8:	da 94       	dec	r13
    2caa:	f1 01       	movw	r30, r2
    2cac:	ed 0d       	add	r30, r13
    2cae:	f1 1d       	adc	r31, r1
    2cb0:	80 81       	ld	r24, Z
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	b3 01       	movw	r22, r6
    2cb6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2cba:	dd 20       	and	r13, r13
    2cbc:	a9 f7       	brne	.-22     	; 0x2ca8 <vfprintf+0x380>
    2cbe:	06 c0       	rjmp	.+12     	; 0x2ccc <vfprintf+0x3a4>
    2cc0:	80 e2       	ldi	r24, 0x20	; 32
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	b3 01       	movw	r22, r6
    2cc6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <fputc>
    2cca:	ea 94       	dec	r14
    2ccc:	ee 20       	and	r14, r14
    2cce:	c1 f7       	brne	.-16     	; 0x2cc0 <vfprintf+0x398>
    2cd0:	43 ce       	rjmp	.-890    	; 0x2958 <vfprintf+0x30>
    2cd2:	f3 01       	movw	r30, r6
    2cd4:	66 81       	ldd	r22, Z+6	; 0x06
    2cd6:	77 81       	ldd	r23, Z+7	; 0x07
    2cd8:	cb 01       	movw	r24, r22
    2cda:	2b 96       	adiw	r28, 0x0b	; 11
    2cdc:	e2 e1       	ldi	r30, 0x12	; 18
    2cde:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__>

00002ce2 <strnlen_P>:
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	05 90       	lpm	r0, Z+
    2ce6:	61 50       	subi	r22, 0x01	; 1
    2ce8:	70 40       	sbci	r23, 0x00	; 0
    2cea:	01 10       	cpse	r0, r1
    2cec:	d8 f7       	brcc	.-10     	; 0x2ce4 <strnlen_P+0x2>
    2cee:	80 95       	com	r24
    2cf0:	90 95       	com	r25
    2cf2:	8e 0f       	add	r24, r30
    2cf4:	9f 1f       	adc	r25, r31
    2cf6:	08 95       	ret

00002cf8 <strnlen>:
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	61 50       	subi	r22, 0x01	; 1
    2cfc:	70 40       	sbci	r23, 0x00	; 0
    2cfe:	01 90       	ld	r0, Z+
    2d00:	01 10       	cpse	r0, r1
    2d02:	d8 f7       	brcc	.-10     	; 0x2cfa <strnlen+0x2>
    2d04:	80 95       	com	r24
    2d06:	90 95       	com	r25
    2d08:	8e 0f       	add	r24, r30
    2d0a:	9f 1f       	adc	r25, r31
    2d0c:	08 95       	ret

00002d0e <fputc>:
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	8c 01       	movw	r16, r24
    2d18:	eb 01       	movw	r28, r22
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	81 ff       	sbrs	r24, 1
    2d1e:	1b c0       	rjmp	.+54     	; 0x2d56 <fputc+0x48>
    2d20:	82 ff       	sbrs	r24, 2
    2d22:	0d c0       	rjmp	.+26     	; 0x2d3e <fputc+0x30>
    2d24:	2e 81       	ldd	r18, Y+6	; 0x06
    2d26:	3f 81       	ldd	r19, Y+7	; 0x07
    2d28:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2c:	28 17       	cp	r18, r24
    2d2e:	39 07       	cpc	r19, r25
    2d30:	64 f4       	brge	.+24     	; 0x2d4a <fputc+0x3c>
    2d32:	e8 81       	ld	r30, Y
    2d34:	f9 81       	ldd	r31, Y+1	; 0x01
    2d36:	01 93       	st	Z+, r16
    2d38:	f9 83       	std	Y+1, r31	; 0x01
    2d3a:	e8 83       	st	Y, r30
    2d3c:	06 c0       	rjmp	.+12     	; 0x2d4a <fputc+0x3c>
    2d3e:	e8 85       	ldd	r30, Y+8	; 0x08
    2d40:	f9 85       	ldd	r31, Y+9	; 0x09
    2d42:	80 2f       	mov	r24, r16
    2d44:	09 95       	icall
    2d46:	89 2b       	or	r24, r25
    2d48:	31 f4       	brne	.+12     	; 0x2d56 <fputc+0x48>
    2d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	9f 83       	std	Y+7, r25	; 0x07
    2d52:	8e 83       	std	Y+6, r24	; 0x06
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <fputc+0x4c>
    2d56:	0f ef       	ldi	r16, 0xFF	; 255
    2d58:	1f ef       	ldi	r17, 0xFF	; 255
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	08 95       	ret

00002d66 <__ultoa_invert>:
    2d66:	fa 01       	movw	r30, r20
    2d68:	aa 27       	eor	r26, r26
    2d6a:	28 30       	cpi	r18, 0x08	; 8
    2d6c:	51 f1       	breq	.+84     	; 0x2dc2 <__ultoa_invert+0x5c>
    2d6e:	20 31       	cpi	r18, 0x10	; 16
    2d70:	81 f1       	breq	.+96     	; 0x2dd2 <__ultoa_invert+0x6c>
    2d72:	e8 94       	clt
    2d74:	6f 93       	push	r22
    2d76:	6e 7f       	andi	r22, 0xFE	; 254
    2d78:	6e 5f       	subi	r22, 0xFE	; 254
    2d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	af 4f       	sbci	r26, 0xFF	; 255
    2d82:	b1 e0       	ldi	r27, 0x01	; 1
    2d84:	3e d0       	rcall	.+124    	; 0x2e02 <__ultoa_invert+0x9c>
    2d86:	b4 e0       	ldi	r27, 0x04	; 4
    2d88:	3c d0       	rcall	.+120    	; 0x2e02 <__ultoa_invert+0x9c>
    2d8a:	67 0f       	add	r22, r23
    2d8c:	78 1f       	adc	r23, r24
    2d8e:	89 1f       	adc	r24, r25
    2d90:	9a 1f       	adc	r25, r26
    2d92:	a1 1d       	adc	r26, r1
    2d94:	68 0f       	add	r22, r24
    2d96:	79 1f       	adc	r23, r25
    2d98:	8a 1f       	adc	r24, r26
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	6a 0f       	add	r22, r26
    2da0:	71 1d       	adc	r23, r1
    2da2:	81 1d       	adc	r24, r1
    2da4:	91 1d       	adc	r25, r1
    2da6:	a1 1d       	adc	r26, r1
    2da8:	20 d0       	rcall	.+64     	; 0x2dea <__ultoa_invert+0x84>
    2daa:	09 f4       	brne	.+2      	; 0x2dae <__ultoa_invert+0x48>
    2dac:	68 94       	set
    2dae:	3f 91       	pop	r19
    2db0:	2a e0       	ldi	r18, 0x0A	; 10
    2db2:	26 9f       	mul	r18, r22
    2db4:	11 24       	eor	r1, r1
    2db6:	30 19       	sub	r19, r0
    2db8:	30 5d       	subi	r19, 0xD0	; 208
    2dba:	31 93       	st	Z+, r19
    2dbc:	de f6       	brtc	.-74     	; 0x2d74 <__ultoa_invert+0xe>
    2dbe:	cf 01       	movw	r24, r30
    2dc0:	08 95       	ret
    2dc2:	46 2f       	mov	r20, r22
    2dc4:	47 70       	andi	r20, 0x07	; 7
    2dc6:	40 5d       	subi	r20, 0xD0	; 208
    2dc8:	41 93       	st	Z+, r20
    2dca:	b3 e0       	ldi	r27, 0x03	; 3
    2dcc:	0f d0       	rcall	.+30     	; 0x2dec <__ultoa_invert+0x86>
    2dce:	c9 f7       	brne	.-14     	; 0x2dc2 <__ultoa_invert+0x5c>
    2dd0:	f6 cf       	rjmp	.-20     	; 0x2dbe <__ultoa_invert+0x58>
    2dd2:	46 2f       	mov	r20, r22
    2dd4:	4f 70       	andi	r20, 0x0F	; 15
    2dd6:	40 5d       	subi	r20, 0xD0	; 208
    2dd8:	4a 33       	cpi	r20, 0x3A	; 58
    2dda:	18 f0       	brcs	.+6      	; 0x2de2 <__ultoa_invert+0x7c>
    2ddc:	49 5d       	subi	r20, 0xD9	; 217
    2dde:	31 fd       	sbrc	r19, 1
    2de0:	40 52       	subi	r20, 0x20	; 32
    2de2:	41 93       	st	Z+, r20
    2de4:	02 d0       	rcall	.+4      	; 0x2dea <__ultoa_invert+0x84>
    2de6:	a9 f7       	brne	.-22     	; 0x2dd2 <__ultoa_invert+0x6c>
    2de8:	ea cf       	rjmp	.-44     	; 0x2dbe <__ultoa_invert+0x58>
    2dea:	b4 e0       	ldi	r27, 0x04	; 4
    2dec:	a6 95       	lsr	r26
    2dee:	97 95       	ror	r25
    2df0:	87 95       	ror	r24
    2df2:	77 95       	ror	r23
    2df4:	67 95       	ror	r22
    2df6:	ba 95       	dec	r27
    2df8:	c9 f7       	brne	.-14     	; 0x2dec <__ultoa_invert+0x86>
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	61 05       	cpc	r22, r1
    2dfe:	71 05       	cpc	r23, r1
    2e00:	08 95       	ret
    2e02:	9b 01       	movw	r18, r22
    2e04:	ac 01       	movw	r20, r24
    2e06:	0a 2e       	mov	r0, r26
    2e08:	06 94       	lsr	r0
    2e0a:	57 95       	ror	r21
    2e0c:	47 95       	ror	r20
    2e0e:	37 95       	ror	r19
    2e10:	27 95       	ror	r18
    2e12:	ba 95       	dec	r27
    2e14:	c9 f7       	brne	.-14     	; 0x2e08 <__ultoa_invert+0xa2>
    2e16:	62 0f       	add	r22, r18
    2e18:	73 1f       	adc	r23, r19
    2e1a:	84 1f       	adc	r24, r20
    2e1c:	95 1f       	adc	r25, r21
    2e1e:	a0 1d       	adc	r26, r0
    2e20:	08 95       	ret

00002e22 <_exit>:
    2e22:	f8 94       	cli

00002e24 <__stop_program>:
    2e24:	ff cf       	rjmp	.-2      	; 0x2e24 <__stop_program>
