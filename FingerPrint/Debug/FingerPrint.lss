
FingerPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  000037e2  00003876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  008000f2  008000f2  00003908  2**0
                  ALLOC
  3 .stab         000037b0  00000000  00000000  00003908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001258  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c291  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 1b 	call	0x364a	; 0x364a <main>
      8a:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ee       	ldi	r26, 0xEA	; 234
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ee       	ldi	r24, 0xEA	; 234
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9a e0       	ldi	r25, 0x0A	; 10
     b62:	69 2f       	mov	r22, r25
     b64:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     b68:	89 2f       	mov	r24, r25
     b6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9a e0       	ldi	r25, 0x0A	; 10
     b70:	69 2f       	mov	r22, r25
     b72:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     b76:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3a 87       	std	Y+10, r19	; 0x0a
     b80:	29 87       	std	Y+9, r18	; 0x09
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	9a 85       	ldd	r25, Y+10	; 0x0a
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	39 f0       	breq	.+14     	; 0xb98 <M_DIO_Void_SetPinDirection+0x52>
     b8a:	29 85       	ldd	r18, Y+9	; 0x09
     b8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b8e:	21 30       	cpi	r18, 0x01	; 1
     b90:	31 05       	cpc	r19, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <M_DIO_Void_SetPinDirection+0x50>
     b94:	76 c0       	rjmp	.+236    	; 0xc82 <M_DIO_Void_SetPinDirection+0x13c>
     b96:	e4 c0       	rjmp	.+456    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	38 87       	std	Y+8, r19	; 0x08
     ba0:	2f 83       	std	Y+7, r18	; 0x07
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	98 85       	ldd	r25, Y+8	; 0x08
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	61 f1       	breq	.+88     	; 0xc04 <M_DIO_Void_SetPinDirection+0xbe>
     bac:	2f 81       	ldd	r18, Y+7	; 0x07
     bae:	38 85       	ldd	r19, Y+8	; 0x08
     bb0:	23 30       	cpi	r18, 0x03	; 3
     bb2:	31 05       	cpc	r19, r1
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <M_DIO_Void_SetPinDirection+0x7c>
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	91 05       	cpc	r25, r1
     bbe:	69 f0       	breq	.+26     	; 0xbda <M_DIO_Void_SetPinDirection+0x94>
     bc0:	cf c0       	rjmp	.+414    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
     bc2:	2f 81       	ldd	r18, Y+7	; 0x07
     bc4:	38 85       	ldd	r19, Y+8	; 0x08
     bc6:	23 30       	cpi	r18, 0x03	; 3
     bc8:	31 05       	cpc	r19, r1
     bca:	89 f1       	breq	.+98     	; 0xc2e <M_DIO_Void_SetPinDirection+0xe8>
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <M_DIO_Void_SetPinDirection+0x92>
     bd6:	40 c0       	rjmp	.+128    	; 0xc58 <M_DIO_Void_SetPinDirection+0x112>
     bd8:	c3 c0       	rjmp	.+390    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <M_DIO_Void_SetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <M_DIO_Void_SetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	ae c0       	rjmp	.+348    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     c04:	a7 e3       	ldi	r26, 0x37	; 55
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <M_DIO_Void_SetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <M_DIO_Void_SetPinDirection+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	99 c0       	rjmp	.+306    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     c2e:	a4 e3       	ldi	r26, 0x34	; 52
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e4 e3       	ldi	r30, 0x34	; 52
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <M_DIO_Void_SetPinDirection+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <M_DIO_Void_SetPinDirection+0x102>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	84 c0       	rjmp	.+264    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     c58:	a1 e3       	ldi	r26, 0x31	; 49
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e1 e3       	ldi	r30, 0x31	; 49
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <M_DIO_Void_SetPinDirection+0x130>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <M_DIO_Void_SetPinDirection+0x12c>
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	6f c0       	rjmp	.+222    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Group)
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	3e 83       	std	Y+6, r19	; 0x06
     c8a:	2d 83       	std	Y+5, r18	; 0x05
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	91 05       	cpc	r25, r1
     c94:	51 f1       	breq	.+84     	; 0xcea <M_DIO_Void_SetPinDirection+0x1a4>
     c96:	2d 81       	ldd	r18, Y+5	; 0x05
     c98:	3e 81       	ldd	r19, Y+6	; 0x06
     c9a:	23 30       	cpi	r18, 0x03	; 3
     c9c:	31 05       	cpc	r19, r1
     c9e:	34 f4       	brge	.+12     	; 0xcac <M_DIO_Void_SetPinDirection+0x166>
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	61 f0       	breq	.+24     	; 0xcc2 <M_DIO_Void_SetPinDirection+0x17c>
     caa:	5a c0       	rjmp	.+180    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
     cac:	2d 81       	ldd	r18, Y+5	; 0x05
     cae:	3e 81       	ldd	r19, Y+6	; 0x06
     cb0:	23 30       	cpi	r18, 0x03	; 3
     cb2:	31 05       	cpc	r19, r1
     cb4:	71 f1       	breq	.+92     	; 0xd12 <M_DIO_Void_SetPinDirection+0x1cc>
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	91 05       	cpc	r25, r1
     cbe:	e9 f1       	breq	.+122    	; 0xd3a <M_DIO_Void_SetPinDirection+0x1f4>
     cc0:	4f c0       	rjmp	.+158    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <M_DIO_Void_SetPinDirection+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <M_DIO_Void_SetPinDirection+0x196>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	3b c0       	rjmp	.+118    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
     cea:	a7 e3       	ldi	r26, 0x37	; 55
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e3       	ldi	r30, 0x37	; 55
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <M_DIO_Void_SetPinDirection+0x1c2>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <M_DIO_Void_SetPinDirection+0x1be>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <M_DIO_Void_SetPinDirection+0x1ea>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <M_DIO_Void_SetPinDirection+0x1e6>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	13 c0       	rjmp	.+38     	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
     d3a:	a1 e3       	ldi	r26, 0x31	; 49
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <M_DIO_Void_SetPinDirection+0x212>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <M_DIO_Void_SetPinDirection+0x20e>
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
		default:                                break;
		}
		break;
	default:    break;
	}
}
     d60:	2a 96       	adiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2a 97       	sbiw	r28, 0x0a	; 10
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9a e0       	ldi	r25, 0x0A	; 10
     d8e:	69 2f       	mov	r22, r25
     d90:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     d94:	89 2f       	mov	r24, r25
     d96:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9a e0       	ldi	r25, 0x0A	; 10
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     da2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3a 87       	std	Y+10, r19	; 0x0a
     dac:	29 87       	std	Y+9, r18	; 0x09
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	39 f0       	breq	.+14     	; 0xdc4 <M_DIO_Void_SetPinValue+0x52>
     db6:	29 85       	ldd	r18, Y+9	; 0x09
     db8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dba:	21 30       	cpi	r18, 0x01	; 1
     dbc:	31 05       	cpc	r19, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <M_DIO_Void_SetPinValue+0x50>
     dc0:	76 c0       	rjmp	.+236    	; 0xeae <M_DIO_Void_SetPinValue+0x13c>
     dc2:	e4 c0       	rjmp	.+456    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	38 87       	std	Y+8, r19	; 0x08
     dcc:	2f 83       	std	Y+7, r18	; 0x07
     dce:	8f 81       	ldd	r24, Y+7	; 0x07
     dd0:	98 85       	ldd	r25, Y+8	; 0x08
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	91 05       	cpc	r25, r1
     dd6:	61 f1       	breq	.+88     	; 0xe30 <M_DIO_Void_SetPinValue+0xbe>
     dd8:	2f 81       	ldd	r18, Y+7	; 0x07
     dda:	38 85       	ldd	r19, Y+8	; 0x08
     ddc:	23 30       	cpi	r18, 0x03	; 3
     dde:	31 05       	cpc	r19, r1
     de0:	34 f4       	brge	.+12     	; 0xdee <M_DIO_Void_SetPinValue+0x7c>
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 85       	ldd	r25, Y+8	; 0x08
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	91 05       	cpc	r25, r1
     dea:	69 f0       	breq	.+26     	; 0xe06 <M_DIO_Void_SetPinValue+0x94>
     dec:	cf c0       	rjmp	.+414    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
     dee:	2f 81       	ldd	r18, Y+7	; 0x07
     df0:	38 85       	ldd	r19, Y+8	; 0x08
     df2:	23 30       	cpi	r18, 0x03	; 3
     df4:	31 05       	cpc	r19, r1
     df6:	89 f1       	breq	.+98     	; 0xe5a <M_DIO_Void_SetPinValue+0xe8>
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <M_DIO_Void_SetPinValue+0x92>
     e02:	40 c0       	rjmp	.+128    	; 0xe84 <M_DIO_Void_SetPinValue+0x112>
     e04:	c3 c0       	rjmp	.+390    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
     e06:	ab e3       	ldi	r26, 0x3B	; 59
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	eb e3       	ldi	r30, 0x3B	; 59
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <M_DIO_Void_SetPinValue+0xb2>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <M_DIO_Void_SetPinValue+0xae>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	ae c0       	rjmp	.+348    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
     e30:	a8 e3       	ldi	r26, 0x38	; 56
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e8 e3       	ldi	r30, 0x38	; 56
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <M_DIO_Void_SetPinValue+0xdc>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <M_DIO_Void_SetPinValue+0xd8>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	99 c0       	rjmp	.+306    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <M_DIO_Void_SetPinValue+0x106>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <M_DIO_Void_SetPinValue+0x102>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	84 c0       	rjmp	.+264    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
     e84:	a2 e3       	ldi	r26, 0x32	; 50
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e2 e3       	ldi	r30, 0x32	; 50
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <M_DIO_Void_SetPinValue+0x130>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <M_DIO_Void_SetPinValue+0x12c>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	6f c0       	rjmp	.+222    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Group)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3e 83       	std	Y+6, r19	; 0x06
     eb6:	2d 83       	std	Y+5, r18	; 0x05
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	51 f1       	breq	.+84     	; 0xf16 <M_DIO_Void_SetPinValue+0x1a4>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	23 30       	cpi	r18, 0x03	; 3
     ec8:	31 05       	cpc	r19, r1
     eca:	34 f4       	brge	.+12     	; 0xed8 <M_DIO_Void_SetPinValue+0x166>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	61 f0       	breq	.+24     	; 0xeee <M_DIO_Void_SetPinValue+0x17c>
     ed6:	5a c0       	rjmp	.+180    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
     ed8:	2d 81       	ldd	r18, Y+5	; 0x05
     eda:	3e 81       	ldd	r19, Y+6	; 0x06
     edc:	23 30       	cpi	r18, 0x03	; 3
     ede:	31 05       	cpc	r19, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <M_DIO_Void_SetPinValue+0x1cc>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	91 05       	cpc	r25, r1
     eea:	e9 f1       	breq	.+122    	; 0xf66 <M_DIO_Void_SetPinValue+0x1f4>
     eec:	4f c0       	rjmp	.+158    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <M_DIO_Void_SetPinValue+0x19a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <M_DIO_Void_SetPinValue+0x196>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	3b c0       	rjmp	.+118    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
     f16:	a8 e3       	ldi	r26, 0x38	; 56
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e8 e3       	ldi	r30, 0x38	; 56
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <M_DIO_Void_SetPinValue+0x1c2>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <M_DIO_Void_SetPinValue+0x1be>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	27 c0       	rjmp	.+78     	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
     f3e:	a5 e3       	ldi	r26, 0x35	; 53
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e3       	ldi	r30, 0x35	; 53
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <M_DIO_Void_SetPinValue+0x1ea>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <M_DIO_Void_SetPinValue+0x1e6>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <M_DIO_Void_SetPinValue+0x212>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <M_DIO_Void_SetPinValue+0x20e>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
     f8c:	2a 96       	adiw	r28, 0x0a	; 10
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <M_DIO_Void_GetPinValue+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <M_DIO_Void_GetPinValue+0x8>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <M_DIO_Void_GetPinValue+0xa>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9a e0       	ldi	r25, 0x0A	; 10
     fb2:	69 2f       	mov	r22, r25
     fb4:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     fb8:	89 2f       	mov	r24, r25
     fba:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9a e0       	ldi	r25, 0x0A	; 10
     fc0:	69 2f       	mov	r22, r25
     fc2:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
     fc8:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	4d 81       	ldd	r20, Y+5	; 0x05
     fd6:	5e 81       	ldd	r21, Y+6	; 0x06
     fd8:	42 30       	cpi	r20, 0x02	; 2
     fda:	51 05       	cpc	r21, r1
     fdc:	41 f1       	breq	.+80     	; 0x102e <M_DIO_Void_GetPinValue+0x90>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	34 f4       	brge	.+12     	; 0xff4 <M_DIO_Void_GetPinValue+0x56>
     fe8:	2d 81       	ldd	r18, Y+5	; 0x05
     fea:	3e 81       	ldd	r19, Y+6	; 0x06
     fec:	21 30       	cpi	r18, 0x01	; 1
     fee:	31 05       	cpc	r19, r1
     ff0:	61 f0       	breq	.+24     	; 0x100a <M_DIO_Void_GetPinValue+0x6c>
     ff2:	52 c0       	rjmp	.+164    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
     ff4:	4d 81       	ldd	r20, Y+5	; 0x05
     ff6:	5e 81       	ldd	r21, Y+6	; 0x06
     ff8:	43 30       	cpi	r20, 0x03	; 3
     ffa:	51 05       	cpc	r21, r1
     ffc:	51 f1       	breq	.+84     	; 0x1052 <M_DIO_Void_GetPinValue+0xb4>
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	91 05       	cpc	r25, r1
    1006:	b9 f1       	breq	.+110    	; 0x1076 <M_DIO_Void_GetPinValue+0xd8>
    1008:	47 c0       	rjmp	.+142    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    100a:	e9 e3       	ldi	r30, 0x39	; 57
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <M_DIO_Void_GetPinValue+0x84>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <M_DIO_Void_GetPinValue+0x80>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	35 c0       	rjmp	.+106    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    102e:	e6 e3       	ldi	r30, 0x36	; 54
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <M_DIO_Void_GetPinValue+0xa8>
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <M_DIO_Void_GetPinValue+0xa4>
    104a:	ca 01       	movw	r24, r20
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	23 c0       	rjmp	.+70     	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1052:	e3 e3       	ldi	r30, 0x33	; 51
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <M_DIO_Void_GetPinValue+0xcc>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <M_DIO_Void_GetPinValue+0xc8>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	11 c0       	rjmp	.+34     	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1076:	e0 e3       	ldi	r30, 0x30	; 48
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <M_DIO_Void_GetPinValue+0xf0>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <M_DIO_Void_GetPinValue+0xec>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
}
    109a:	26 96       	adiw	r28, 0x06	; 6
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <M_DIO_Void_TogPin+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <M_DIO_Void_TogPin+0x8>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9a e0       	ldi	r25, 0x0A	; 10
    10c0:	69 2f       	mov	r22, r25
    10c2:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
    10c6:	89 2f       	mov	r24, r25
    10c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9a e0       	ldi	r25, 0x0A	; 10
    10ce:	69 2f       	mov	r22, r25
    10d0:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
    10d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	51 f1       	breq	.+84     	; 0x113e <M_DIO_Void_TogPin+0x92>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	23 30       	cpi	r18, 0x03	; 3
    10f0:	31 05       	cpc	r19, r1
    10f2:	34 f4       	brge	.+12     	; 0x1100 <M_DIO_Void_TogPin+0x54>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	61 f0       	breq	.+24     	; 0x1116 <M_DIO_Void_TogPin+0x6a>
    10fe:	5a c0       	rjmp	.+180    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	23 30       	cpi	r18, 0x03	; 3
    1106:	31 05       	cpc	r19, r1
    1108:	71 f1       	breq	.+92     	; 0x1166 <M_DIO_Void_TogPin+0xba>
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	91 05       	cpc	r25, r1
    1112:	e9 f1       	breq	.+122    	; 0x118e <M_DIO_Void_TogPin+0xe2>
    1114:	4f c0       	rjmp	.+158    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1116:	ab e3       	ldi	r26, 0x3B	; 59
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <M_DIO_Void_TogPin+0x88>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <M_DIO_Void_TogPin+0x84>
    1138:	84 27       	eor	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	3b c0       	rjmp	.+118    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <M_DIO_Void_TogPin+0xb0>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <M_DIO_Void_TogPin+0xac>
    1160:	84 27       	eor	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1166:	a5 e3       	ldi	r26, 0x35	; 53
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <M_DIO_Void_TogPin+0xd8>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <M_DIO_Void_TogPin+0xd4>
    1188:	84 27       	eor	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	13 c0       	rjmp	.+38     	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <M_DIO_Void_TogPin+0x100>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <M_DIO_Void_TogPin+0xfc>
    11b0:	84 27       	eor	r24, r20
    11b2:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2a 97       	sbiw	r28, 0x0a	; 10
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9a e0       	ldi	r25, 0x0A	; 10
    11e0:	69 2f       	mov	r22, r25
    11e2:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
    11e6:	89 2f       	mov	r24, r25
    11e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	69 2f       	mov	r22, r25
    11f0:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodqi4>
    11f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3a 87       	std	Y+10, r19	; 0x0a
    11fe:	29 87       	std	Y+9, r18	; 0x09
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	39 f0       	breq	.+14     	; 0x1216 <M_DIO_Void_SetPinPullUpRes+0x52>
    1208:	29 85       	ldd	r18, Y+9	; 0x09
    120a:	3a 85       	ldd	r19, Y+10	; 0x0a
    120c:	21 30       	cpi	r18, 0x01	; 1
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <M_DIO_Void_SetPinPullUpRes+0x50>
    1212:	76 c0       	rjmp	.+236    	; 0x1300 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1214:	e4 c0       	rjmp	.+456    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	38 87       	std	Y+8, r19	; 0x08
    121e:	2f 83       	std	Y+7, r18	; 0x07
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	61 f1       	breq	.+88     	; 0x1282 <M_DIO_Void_SetPinPullUpRes+0xbe>
    122a:	2f 81       	ldd	r18, Y+7	; 0x07
    122c:	38 85       	ldd	r19, Y+8	; 0x08
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	69 f0       	breq	.+26     	; 0x1258 <M_DIO_Void_SetPinPullUpRes+0x94>
    123e:	cf c0       	rjmp	.+414    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
    1240:	2f 81       	ldd	r18, Y+7	; 0x07
    1242:	38 85       	ldd	r19, Y+8	; 0x08
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	89 f1       	breq	.+98     	; 0x12ac <M_DIO_Void_SetPinPullUpRes+0xe8>
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <M_DIO_Void_SetPinPullUpRes+0x92>
    1254:	40 c0       	rjmp	.+128    	; 0x12d6 <M_DIO_Void_SetPinPullUpRes+0x112>
    1256:	c3 c0       	rjmp	.+390    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1258:	ab e3       	ldi	r26, 0x3B	; 59
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <M_DIO_Void_SetPinPullUpRes+0xae>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	ae c0       	rjmp	.+348    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <M_DIO_Void_SetPinPullUpRes+0xdc>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <M_DIO_Void_SetPinPullUpRes+0xd8>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	99 c0       	rjmp	.+306    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <M_DIO_Void_SetPinPullUpRes+0x106>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <M_DIO_Void_SetPinPullUpRes+0x102>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	84 c0       	rjmp	.+264    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <M_DIO_Void_SetPinPullUpRes+0x130>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <M_DIO_Void_SetPinPullUpRes+0x12c>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	6f c0       	rjmp	.+222    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Group)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	91 05       	cpc	r25, r1
    1312:	51 f1       	breq	.+84     	; 0x1368 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	23 30       	cpi	r18, 0x03	; 3
    131a:	31 05       	cpc	r19, r1
    131c:	34 f4       	brge	.+12     	; 0x132a <M_DIO_Void_SetPinPullUpRes+0x166>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	61 f0       	breq	.+24     	; 0x1340 <M_DIO_Void_SetPinPullUpRes+0x17c>
    1328:	5a c0       	rjmp	.+180    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
    132a:	2d 81       	ldd	r18, Y+5	; 0x05
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	23 30       	cpi	r18, 0x03	; 3
    1330:	31 05       	cpc	r19, r1
    1332:	71 f1       	breq	.+92     	; 0x1390 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	91 05       	cpc	r25, r1
    133c:	e9 f1       	breq	.+122    	; 0x13b8 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    133e:	4f c0       	rjmp	.+158    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <M_DIO_Void_SetPinPullUpRes+0x19a>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <M_DIO_Void_SetPinPullUpRes+0x196>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	3b c0       	rjmp	.+118    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <M_DIO_Void_SetPinPullUpRes+0x1be>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	27 c0       	rjmp	.+78     	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1390:	a5 e3       	ldi	r26, 0x35	; 53
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <M_DIO_Void_SetPinPullUpRes+0x1ea>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <M_DIO_Void_SetPinPullUpRes+0x1e6>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <M_DIO_Void_SetPinPullUpRes+0x212>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <M_DIO_Void_SetPinPullUpRes+0x20e>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    13de:	2a 96       	adiw	r28, 0x0a	; 10
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <FP_checkintro>:

ERRORS_ FP_ERRORS;

/*CHECK INTRO*/
void FP_checkintro(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    /*reset all errors flags*/
    FP_ERRORS.ERR_all=0;
    13f8:	10 92 f8 00 	sts	0x00F8, r1
    /*check header:0,1*/
    if((App_u8UARTRecPack[0]!=0xEF) && (App_u8UARTRecPack[1]!=0x01))   
    13fc:	80 91 f9 00 	lds	r24, 0x00F9
    1400:	8f 3e       	cpi	r24, 0xEF	; 239
    1402:	49 f0       	breq	.+18     	; 0x1416 <FP_checkintro+0x26>
    1404:	80 91 fa 00 	lds	r24, 0x00FA
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	29 f0       	breq	.+10     	; 0x1416 <FP_checkintro+0x26>
        {FP_ERRORS.STR.ERR_header=1;}
    140c:	80 91 f8 00 	lds	r24, 0x00F8
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 93 f8 00 	sts	0x00F8, r24
    /*check add:2>>5*/
    if((App_u8UARTRecPack[2]!=0xFF) && (App_u8UARTRecPack[3]!=0xFF)&&(App_u8UARTRecPack[4]!=0xFF) && (App_u8UARTRecPack[5]!=0xFF))   
    1416:	80 91 fb 00 	lds	r24, 0x00FB
    141a:	8f 3f       	cpi	r24, 0xFF	; 255
    141c:	89 f0       	breq	.+34     	; 0x1440 <FP_checkintro+0x50>
    141e:	80 91 fc 00 	lds	r24, 0x00FC
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	69 f0       	breq	.+26     	; 0x1440 <FP_checkintro+0x50>
    1426:	80 91 fd 00 	lds	r24, 0x00FD
    142a:	8f 3f       	cpi	r24, 0xFF	; 255
    142c:	49 f0       	breq	.+18     	; 0x1440 <FP_checkintro+0x50>
    142e:	80 91 fe 00 	lds	r24, 0x00FE
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	29 f0       	breq	.+10     	; 0x1440 <FP_checkintro+0x50>
        {FP_ERRORS.STR.ERR_add=1;}
    1436:	80 91 f8 00 	lds	r24, 0x00F8
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	80 93 f8 00 	sts	0x00F8, r24
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <UART_CallBackFunction>:

void UART_CallBackFunction (u8 Copy_u8UARTRecByte)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	0f 92       	push	r0
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
    if(ArrIndex<50)
    1452:	80 91 f2 00 	lds	r24, 0x00F2
    1456:	82 33       	cpi	r24, 0x32	; 50
    1458:	78 f4       	brcc	.+30     	; 0x1478 <UART_CallBackFunction+0x32>
    {
        App_u8UARTRecPack[ArrIndex] = Copy_u8UARTRecByte;
    145a:	80 91 f2 00 	lds	r24, 0x00F2
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	e7 50       	subi	r30, 0x07	; 7
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 83       	st	Z, r24
        /*FOR debugging*/
        //H_Lcd_Void_LCDWriteCharacter(App_u8UARTRecPack[ArrIndex]);
        ArrIndex++;
    146c:	80 91 f2 00 	lds	r24, 0x00F2
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 f2 00 	sts	0x00F2, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <UART_CallBackFunction+0x36>
    }
    else 
    {ArrIndex=0;}     
    1478:	10 92 f2 00 	sts	0x00F2, r1
}
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <FP_intit>:

void FP_intit(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	2e 97       	sbiw	r28, 0x0e	; 14
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    /*rx and tx i\o */
    M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
    1498:	89 e2       	ldi	r24, 0x29	; 41
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
    14a0:	88 e2       	ldi	r24, 0x28	; 40
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a8 e4       	ldi	r26, 0x48	; 72
    14ae:	b3 e4       	ldi	r27, 0x43	; 67
    14b0:	8b 87       	std	Y+11, r24	; 0x0b
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	ad 87       	std	Y+13, r26	; 0x0d
    14b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	55 e4       	ldi	r21, 0x45	; 69
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8f 83       	std	Y+7, r24	; 0x07
    14d2:	98 87       	std	Y+8, r25	; 0x08
    14d4:	a9 87       	std	Y+9, r26	; 0x09
    14d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <FP_intit+0x76>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <FP_intit+0xf4>
	else if (__tmp > 65535)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <FP_intit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	0f c0       	rjmp	.+30     	; 0x155a <FP_intit+0xd6>
    153c:	80 e9       	ldi	r24, 0x90	; 144
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <FP_intit+0xc4>
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <FP_intit+0xb8>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <FP_intit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6f 81       	ldd	r22, Y+7	; 0x07
    1566:	78 85       	ldd	r23, Y+8	; 0x08
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <FP_intit+0x100>
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
    UART_Init();
    158c:	0e 94 13 1a 	call	0x3426	; 0x3426 <UART_Init>
    /*receive*/
    GIE_voidEnable();
    1590:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <GIE_voidEnable>
    UART_ReceiveByteAsyncCallBack(UART_CallBackFunction);
    1594:	83 e2       	ldi	r24, 0x23	; 35
    1596:	9a e0       	ldi	r25, 0x0A	; 10
    1598:	0e 94 aa 1a 	call	0x3554	; 0x3554 <UART_ReceiveByteAsyncCallBack>
}
    159c:	2e 96       	adiw	r28, 0x0e	; 14
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <FPSend>:
  
u8 FPSend(u8 copy_u8PID,u16 Copy_u16PackLength,u8* copy_Pu8Pack)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	2d 97       	sbiw	r28, 0x0d	; 13
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	8f 83       	std	Y+7, r24	; 0x07
    15c4:	79 87       	std	Y+9, r23	; 0x09
    15c6:	68 87       	std	Y+8, r22	; 0x08
    15c8:	5b 87       	std	Y+11, r21	; 0x0b
    15ca:	4a 87       	std	Y+10, r20	; 0x0a
    u8 local_u8RetuenState = STD_NOK;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8e 83       	std	Y+6, r24	; 0x06
    u16 Local_u16CS=0;
    15d0:	1d 82       	std	Y+5, r1	; 0x05
    15d2:	1c 82       	std	Y+4, r1	; 0x04
    u8 arraySize = Copy_u16PackLength-2;//pack length refer to array length + 2 bits check sum
    15d4:	88 85       	ldd	r24, Y+8	; 0x08
    15d6:	82 50       	subi	r24, 0x02	; 2
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    /*header*/
    UART_SendByte(0xEF);
    15da:	8f ee       	ldi	r24, 0xEF	; 239
    15dc:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte(0x01);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    /*add*/
    UART_SendByte(0xFF);
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte(0xFF);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte(0xFF);
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte(0xFF);
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    /*package identifier*/
    switch (copy_u8PID)
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3d 87       	std	Y+13, r19	; 0x0d
    1606:	2c 87       	std	Y+12, r18	; 0x0c
    1608:	8c 85       	ldd	r24, Y+12	; 0x0c
    160a:	9d 85       	ldd	r25, Y+13	; 0x0d
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 05       	cpc	r25, r1
    1610:	d1 f0       	breq	.+52     	; 0x1646 <FPSend+0x98>
    1612:	2c 85       	ldd	r18, Y+12	; 0x0c
    1614:	3d 85       	ldd	r19, Y+13	; 0x0d
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	31 05       	cpc	r19, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <FPSend+0x7a>
    161c:	8c 85       	ldd	r24, Y+12	; 0x0c
    161e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	61 f0       	breq	.+24     	; 0x163e <FPSend+0x90>
    1626:	1a c0       	rjmp	.+52     	; 0x165c <FPSend+0xae>
    1628:	2c 85       	ldd	r18, Y+12	; 0x0c
    162a:	3d 85       	ldd	r19, Y+13	; 0x0d
    162c:	27 30       	cpi	r18, 0x07	; 7
    162e:	31 05       	cpc	r19, r1
    1630:	71 f0       	breq	.+28     	; 0x164e <FPSend+0xa0>
    1632:	8c 85       	ldd	r24, Y+12	; 0x0c
    1634:	9d 85       	ldd	r25, Y+13	; 0x0d
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	91 05       	cpc	r25, r1
    163a:	69 f0       	breq	.+26     	; 0x1656 <FPSend+0xa8>
    163c:	0f c0       	rjmp	.+30     	; 0x165c <FPSend+0xae>
    {
    case CMND_PACK:UART_SendByte(CMND_PACK);   break;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    1644:	0b c0       	rjmp	.+22     	; 0x165c <FPSend+0xae>
    case DATA_PACK:UART_SendByte(DATA_PACK);   break;
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    164c:	07 c0       	rjmp	.+14     	; 0x165c <FPSend+0xae>
    case ACK_PACK :UART_SendByte(ACK_PACK);    break;
    164e:	87 e0       	ldi	r24, 0x07	; 7
    1650:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    1654:	03 c0       	rjmp	.+6      	; 0x165c <FPSend+0xae>
    case END_PACK :UART_SendByte(END_PACK);    break;
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    default:                                   break;
    }
    /*PACKAGE LENGTH*/
    UART_SendByte((u8)(Copy_u16PackLength>>8));
    165c:	88 85       	ldd	r24, Y+8	; 0x08
    165e:	99 85       	ldd	r25, Y+9	; 0x09
    1660:	89 2f       	mov	r24, r25
    1662:	99 27       	eor	r25, r25
    1664:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte((u8)Copy_u16PackLength);
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    /*package sending*/
    if ((copy_Pu8Pack != NULL)&&(Copy_u16PackLength<=256))
    166e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1670:	9b 85       	ldd	r25, Y+11	; 0x0b
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	89 f1       	breq	.+98     	; 0x16d8 <FPSend+0x12a>
    1676:	88 85       	ldd	r24, Y+8	; 0x08
    1678:	99 85       	ldd	r25, Y+9	; 0x09
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	92 07       	cpc	r25, r18
    1680:	58 f5       	brcc	.+86     	; 0x16d8 <FPSend+0x12a>
	{
		for(int i =0 ;i<arraySize;i++)
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	1f c0       	rjmp	.+62     	; 0x16c6 <FPSend+0x118>
		{
			UART_SendByte(copy_Pu8Pack[i]);
    1688:	29 81       	ldd	r18, Y+1	; 0x01
    168a:	3a 81       	ldd	r19, Y+2	; 0x02
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	fc 01       	movw	r30, r24
    1692:	e2 0f       	add	r30, r18
    1694:	f3 1f       	adc	r31, r19
    1696:	80 81       	ld	r24, Z
    1698:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
            Local_u16CS += copy_Pu8Pack[i];
    169c:	29 81       	ldd	r18, Y+1	; 0x01
    169e:	3a 81       	ldd	r19, Y+2	; 0x02
    16a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a4:	fc 01       	movw	r30, r24
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	80 81       	ld	r24, Z
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    UART_SendByte((u8)(Copy_u16PackLength>>8));
    UART_SendByte((u8)Copy_u16PackLength);
    /*package sending*/
    if ((copy_Pu8Pack != NULL)&&(Copy_u16PackLength<=256))
	{
		for(int i =0 ;i<arraySize;i++)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	82 17       	cp	r24, r18
    16d2:	93 07       	cpc	r25, r19
    16d4:	cc f2       	brlt	.-78     	; 0x1688 <FPSend+0xda>
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <FPSend+0x12e>
            Local_u16CS += copy_Pu8Pack[i];
		}
	}
	else
	{
		local_u8RetuenState = STD_NOK;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	8e 83       	std	Y+6, r24	; 0x06
	}
    /*CHECK SUM*/
    Local_u16CS +=(Copy_u16PackLength +(u16)copy_u8PID); 
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	88 85       	ldd	r24, Y+8	; 0x08
    16e4:	99 85       	ldd	r25, Y+9	; 0x09
    16e6:	28 0f       	add	r18, r24
    16e8:	39 1f       	adc	r19, r25
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	82 0f       	add	r24, r18
    16f0:	93 1f       	adc	r25, r19
    16f2:	9d 83       	std	Y+5, r25	; 0x05
    16f4:	8c 83       	std	Y+4, r24	; 0x04
    UART_SendByte((Local_u16CS>>8));
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	89 2f       	mov	r24, r25
    16fc:	99 27       	eor	r25, r25
    16fe:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    UART_SendByte(Local_u16CS);
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
    return local_u8RetuenState;
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
}
    170a:	2d 96       	adiw	r28, 0x0d	; 13
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <FPReceiveACK>:

void FPReceiveACK(u8 copy_u8code)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
    FP_checkintro();
    1728:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <FP_checkintro>
    /*check PID:6*/
    if(App_u8UARTRecPack[6]!=PID_ACK) 
    172c:	80 91 ff 00 	lds	r24, 0x00FF
    1730:	87 30       	cpi	r24, 0x07	; 7
    1732:	29 f0       	breq	.+10     	; 0x173e <FPReceiveACK+0x22>
        {FP_ERRORS.STR.ERR_PID =1;}
    1734:	80 91 f8 00 	lds	r24, 0x00F8
    1738:	84 60       	ori	r24, 0x04	; 4
    173a:	80 93 f8 00 	sts	0x00F8, r24
    /*check pack length:7,8*/
    if(App_u8UARTRecPack[8]!= 0x03) 
    173e:	80 91 01 01 	lds	r24, 0x0101
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	29 f0       	breq	.+10     	; 0x1750 <FPReceiveACK+0x34>
        {FP_ERRORS.STR.ERR_PL =1;}
    1746:	80 91 f8 00 	lds	r24, 0x00F8
    174a:	88 60       	ori	r24, 0x08	; 8
    174c:	80 93 f8 00 	sts	0x00F8, r24
    /*check ack:9*/
    if(App_u8UARTRecPack[9]!= copy_u8code) 
    1750:	90 91 02 01 	lds	r25, 0x0102
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	98 17       	cp	r25, r24
    1758:	29 f0       	breq	.+10     	; 0x1764 <FPReceiveACK+0x48>
        {FP_ERRORS.STR.ERR_pac =1;}
    175a:	80 91 f8 00 	lds	r24, 0x00F8
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	80 93 f8 00 	sts	0x00F8, r24
    /*CHECKSUM: 10,11*/ 
    if(0x0A !=App_u8UARTRecPack[11] )
    1764:	80 91 04 01 	lds	r24, 0x0104
    1768:	8a 30       	cpi	r24, 0x0A	; 10
    176a:	29 f0       	breq	.+10     	; 0x1776 <FPReceiveACK+0x5a>
         {FP_ERRORS.STR.ERR_CS =1;}
    176c:	80 91 f8 00 	lds	r24, 0x00F8
    1770:	80 62       	ori	r24, 0x20	; 32
    1772:	80 93 f8 00 	sts	0x00F8, r24
}
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <FingerPS_handShake>:

u8 FingerPS_handShake(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <FingerPS_handShake+0x6>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x40};
    1788:	80 e4       	ldi	r24, 0x40	; 64
    178a:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    178c:	19 82       	std	Y+1, r1	; 0x01

    /*send*/
    FPSend(PID_CMND,3,pack_content);
    178e:	9e 01       	movw	r18, r28
    1790:	2e 5f       	subi	r18, 0xFE	; 254
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	63 e0       	ldi	r22, 0x03	; 3
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    17a0:	80 91 f2 00 	lds	r24, 0x00F2
    17a4:	8c 30       	cpi	r24, 0x0C	; 12
    17a6:	e0 f3       	brcs	.-8      	; 0x17a0 <FingerPS_handShake+0x22>
    Completeflag =1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 f5 00 	sts	0x00F5, r24
    //test();
    FPReceiveACK(pack_ACK);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    17b4:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    17b8:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    17bc:	80 91 f8 00 	lds	r24, 0x00F8
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <FingerPS_genImg>:

u8 FingerPS_genImg(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <FingerPS_genImg+0x6>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x01};
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    17d8:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    17da:	9e 01       	movw	r18, r28
    17dc:	2e 5f       	subi	r18, 0xFE	; 254
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	63 e0       	ldi	r22, 0x03	; 3
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    17ec:	80 91 f2 00 	lds	r24, 0x00F2
    17f0:	8c 30       	cpi	r24, 0x0C	; 12
    17f2:	e0 f3       	brcs	.-8      	; 0x17ec <FingerPS_genImg+0x22>
    Completeflag =1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1800:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1804:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    1808:	80 91 f8 00 	lds	r24, 0x00F8
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <FingerPS_genTemplate>:

u8 FingerPS_genTemplate(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <FingerPS_genTemplate+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x05};
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    1824:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    1826:	9e 01       	movw	r18, r28
    1828:	2e 5f       	subi	r18, 0xFE	; 254
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	63 e0       	ldi	r22, 0x03	; 3
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1838:	80 91 f2 00 	lds	r24, 0x00F2
    183c:	8c 30       	cpi	r24, 0x0C	; 12
    183e:	e0 f3       	brcs	.-8      	; 0x1838 <FingerPS_genTemplate+0x22>
    Completeflag =1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    184c:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1850:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    1854:	80 91 f8 00 	lds	r24, 0x00F8
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <FingerPS_ConvertImg2CharFile>:

u8 FingerPS_ConvertImg2CharFile(u8 Copy_u8bufferID)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <FingerPS_ConvertImg2CharFile+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <FingerPS_ConvertImg2CharFile+0x8>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	8c 83       	std	Y+4, r24	; 0x04
    u8 pack_content[2] = {0x02,Copy_u8bufferID};
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    u8 pack_ACK = 0x00;
    1878:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,4,pack_content);
    187a:	9e 01       	movw	r18, r28
    187c:	2e 5f       	subi	r18, 0xFE	; 254
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    188c:	80 91 f2 00 	lds	r24, 0x00F2
    1890:	8c 30       	cpi	r24, 0x0C	; 12
    1892:	e0 f3       	brcs	.-8      	; 0x188c <FingerPS_ConvertImg2CharFile+0x2a>
    Completeflag =1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    18a0:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    18a4:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    18a8:	80 91 f8 00 	lds	r24, 0x00F8
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <FingerPS_LoadCharFile>:

u8 FingerPS_LoadCharFile(u8 Copy_u8bufferID,u16 Copy_u16PageID)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	28 97       	sbiw	r28, 0x08	; 8
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	78 87       	std	Y+8, r23	; 0x08
    18d2:	6f 83       	std	Y+7, r22	; 0x07
    u8 pack_content[4] = {0x07,Copy_u8bufferID,(u8)(Copy_u16PageID>>8),(u8)Copy_u16PageID};
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	89 2f       	mov	r24, r25
    18da:	99 27       	eor	r25, r25
    18dc:	98 2f       	mov	r25, r24
    18de:	2f 81       	ldd	r18, Y+7	; 0x07
    18e0:	87 e0       	ldi	r24, 0x07	; 7
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	2d 83       	std	Y+5, r18	; 0x05
    u8 pack_ACK = 0x00;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,6,pack_content);
    18ee:	9e 01       	movw	r18, r28
    18f0:	2e 5f       	subi	r18, 0xFE	; 254
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	66 e0       	ldi	r22, 0x06	; 6
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1900:	80 91 f2 00 	lds	r24, 0x00F2
    1904:	8c 30       	cpi	r24, 0x0C	; 12
    1906:	e0 f3       	brcs	.-8      	; 0x1900 <FingerPS_LoadCharFile+0x46>
    Completeflag =1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1914:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1918:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    191c:	80 91 f8 00 	lds	r24, 0x00F8
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <FingerPS_StoreTemplate>:

u8 FingerPS_StoreTemplate(u8 Copy_u8bufferID,u16 Copy_u16PageID)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	28 97       	sbiw	r28, 0x08	; 8
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	8e 83       	std	Y+6, r24	; 0x06
    1948:	78 87       	std	Y+8, r23	; 0x08
    194a:	6f 83       	std	Y+7, r22	; 0x07
    u8 pack_content[4] = {0x06,Copy_u8bufferID,(u8)(Copy_u16PageID>>8),(u8)Copy_u16PageID};
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	98 85       	ldd	r25, Y+8	; 0x08
    1950:	89 2f       	mov	r24, r25
    1952:	99 27       	eor	r25, r25
    1954:	98 2f       	mov	r25, r24
    1956:	2f 81       	ldd	r18, Y+7	; 0x07
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	8b 83       	std	Y+3, r24	; 0x03
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	2d 83       	std	Y+5, r18	; 0x05
    u8 pack_ACK = 0x00;
    1964:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,6,pack_content);
    1966:	9e 01       	movw	r18, r28
    1968:	2e 5f       	subi	r18, 0xFE	; 254
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	66 e0       	ldi	r22, 0x06	; 6
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1978:	80 91 f2 00 	lds	r24, 0x00F2
    197c:	8c 30       	cpi	r24, 0x0C	; 12
    197e:	e0 f3       	brcs	.-8      	; 0x1978 <FingerPS_StoreTemplate+0x46>
    Completeflag =1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    198c:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1990:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    1994:	80 91 f8 00 	lds	r24, 0x00F8
}
    1998:	28 96       	adiw	r28, 0x08	; 8
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <FingerPS_Match>:

u8 FingerPS_Match(void)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <FingerPS_Match+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x03};
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    19b8:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    19ba:	9e 01       	movw	r18, r28
    19bc:	2e 5f       	subi	r18, 0xFE	; 254
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	63 e0       	ldi	r22, 0x03	; 3
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <14);/*TODO: need to be enhanced*/
    19cc:	80 91 f2 00 	lds	r24, 0x00F2
    19d0:	8e 30       	cpi	r24, 0x0E	; 14
    19d2:	e0 f3       	brcs	.-8      	; 0x19cc <FingerPS_Match+0x22>
    Completeflag =1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 f5 00 	sts	0x00F5, r24
    /*different in receiving*/
    FP_checkintro();
    19da:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <FP_checkintro>
    if(0x00 !=App_u8UARTRecPack[9] )
    19de:	80 91 02 01 	lds	r24, 0x0102
    19e2:	88 23       	and	r24, r24
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <FingerPS_Match+0x46>
         {FP_ERRORS.STR.ERR_Fingermatch =1;}
    19e6:	80 91 f8 00 	lds	r24, 0x00F8
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	80 93 f8 00 	sts	0x00F8, r24
    Completeflag =0;
    19f0:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    19f4:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    19f8:	80 91 f8 00 	lds	r24, 0x00F8
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <FP_voidMemoryFree>:

u8 FP_voidMemoryFree(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <FP_voidMemoryFree+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x0D};
    1a10:	8d e0       	ldi	r24, 0x0D	; 13
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    1a14:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    1a16:	9e 01       	movw	r18, r28
    1a18:	2e 5f       	subi	r18, 0xFE	; 254
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	63 e0       	ldi	r22, 0x03	; 3
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	a9 01       	movw	r20, r18
    1a24:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1a28:	80 91 f2 00 	lds	r24, 0x00F2
    1a2c:	8c 30       	cpi	r24, 0x0C	; 12
    1a2e:	e0 f3       	brcs	.-8      	; 0x1a28 <FP_voidMemoryFree+0x22>
    Completeflag =1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1a3c:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1a40:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all; 
    1a44:	80 91 f8 00 	lds	r24, 0x00F8
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <FingerPS_Auraked>:

u8 FingerPS_Auraked(u8 copy_u8Control,u8 copy_u8Speed,u8 copy_u8Color,u8 copy_u8Cycles)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	2a 97       	sbiw	r28, 0x0a	; 10
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8f 83       	std	Y+7, r24	; 0x07
    1a68:	68 87       	std	Y+8, r22	; 0x08
    1a6a:	49 87       	std	Y+9, r20	; 0x09
    1a6c:	2a 87       	std	Y+10, r18	; 0x0a
    u8 pack_content[5] = {0x35,copy_u8Control,copy_u8Speed,copy_u8Color,copy_u8Cycles};
    1a6e:	85 e3       	ldi	r24, 0x35	; 53
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	8f 81       	ldd	r24, Y+7	; 0x07
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	88 85       	ldd	r24, Y+8	; 0x08
    1a78:	8c 83       	std	Y+4, r24	; 0x04
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a80:	8e 83       	std	Y+6, r24	; 0x06
    u8 pack_ACK = 0x00;
    1a82:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,7,pack_content);
    1a84:	9e 01       	movw	r18, r28
    1a86:	2e 5f       	subi	r18, 0xFE	; 254
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	67 e0       	ldi	r22, 0x07	; 7
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	a9 01       	movw	r20, r18
    1a92:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1a96:	80 91 f2 00 	lds	r24, 0x00F2
    1a9a:	8c 30       	cpi	r24, 0x0C	; 12
    1a9c:	e0 f3       	brcs	.-8      	; 0x1a96 <FingerPS_Auraked+0x44>
    Completeflag =1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 f5 00 	sts	0x00F5, r24
    FPReceiveACK(pack_ACK);
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1aaa:	10 92 f5 00 	sts	0x00F5, r1
    ArrIndex=0;
    1aae:	10 92 f2 00 	sts	0x00F2, r1
    return FP_ERRORS.ERR_all;
    1ab2:	80 91 f8 00 	lds	r24, 0x00F8
}
    1ab6:	2a 96       	adiw	r28, 0x0a	; 10
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <FP_setNewFinger>:

void FP_setNewFinger(u16 Copy_u16StoreLoc)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	61 97       	sbiw	r28, 0x11	; 17
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	99 8b       	std	Y+17, r25	; 0x11
    1ade:	88 8b       	std	Y+16, r24	; 0x10
    u8 x=1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    /********************************************
    *1- gen img
    *********************************************/
    H_Lcd_Void_LCDGoTo(0,0);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("Place your finger");
    1aec:	80 e6       	ldi	r24, 0x60	; 96
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <FP_setNewFinger+0x40>
    while(x!=0)
    {
        x = FingerPS_genImg();
    1af6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1afa:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	6a ea       	ldi	r22, 0xAA	; 170
    1b00:	42 e0       	ldi	r20, 0x02	; 2
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    /********************************************
    *1- gen img
    *********************************************/
    H_Lcd_Void_LCDGoTo(0,0);
    H_Lcd_Void_LCDWriteString("Place your finger");
    while(x!=0)
    1b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0a:	88 23       	and	r24, r24
    1b0c:	a1 f7       	brne	.-24     	; 0x1af6 <FP_setNewFinger+0x2e>
    {
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDGoTo(1,0);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteCharacter('*');
    1b16:	8a e2       	ldi	r24, 0x2A	; 42
    1b18:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
    //H_Lcd_Void_LCDGoTo(0,0);
    //H_Lcd_Void_LCDWriteString("First img generated ");
    x=1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	8f 87       	std	Y+15, r24	; 0x0f
    1b20:	0a c0       	rjmp	.+20     	; 0x1b36 <FP_setNewFinger+0x6e>
    /********************************************
    *2- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1b28:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	6a ea       	ldi	r22, 0xAA	; 170
    1b2e:	43 e0       	ldi	r20, 0x03	; 3
    1b30:	21 e0       	ldi	r18, 0x01	; 1
    1b32:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    //H_Lcd_Void_LCDWriteString("First img generated ");
    x=1;
    /********************************************
    *2- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	88 23       	and	r24, r24
    1b3a:	99 f7       	brne	.-26     	; 0x1b22 <FP_setNewFinger+0x5a>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1b3c:	8a e2       	ldi	r24, 0x2A	; 42
    1b3e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <FP_setNewFinger+0x92>
    /********************************************
    *3- gen img
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_genImg();
    1b48:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1b4c:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	6a ea       	ldi	r22, 0xAA	; 170
    1b52:	42 e0       	ldi	r20, 0x02	; 2
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *3- gen img
    *********************************************/
    while(x!=0)
    1b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5c:	88 23       	and	r24, r24
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <FP_setNewFinger+0x80>
    {
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1b60:	8a e2       	ldi	r24, 0x2A	; 42
    1b62:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <FP_setNewFinger+0xb8>
    /********************************************
    *4- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_2);
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1b72:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	6a ea       	ldi	r22, 0xAA	; 170
    1b78:	43 e0       	ldi	r20, 0x03	; 3
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *4- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b82:	88 23       	and	r24, r24
    1b84:	99 f7       	brne	.-26     	; 0x1b6c <FP_setNewFinger+0xa4>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_2);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1b86:	8a e2       	ldi	r24, 0x2A	; 42
    1b88:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <FP_setNewFinger+0xdc>
    /********************************************
    *5- Generate Tempelate
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_genTemplate();
    1b92:	0e 94 0b 0c 	call	0x1816	; 0x1816 <FingerPS_genTemplate>
    1b96:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	6a ea       	ldi	r22, 0xAA	; 170
    1b9c:	42 e0       	ldi	r20, 0x02	; 2
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *5- Generate Tempelate
    *********************************************/
    while(x!=0)
    1ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba6:	88 23       	and	r24, r24
    1ba8:	a1 f7       	brne	.-24     	; 0x1b92 <FP_setNewFinger+0xca>
    {
        x = FingerPS_genTemplate();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1baa:	8a e2       	ldi	r24, 0x2A	; 42
    1bac:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <FP_setNewFinger+0x108>
    /********************************************
    *6- Tempelate Storing
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_StoreTemplate(CHAR_BUFFER_1,Copy_u16StoreLoc);
    1bb6:	28 89       	ldd	r18, Y+16	; 0x10
    1bb8:	39 89       	ldd	r19, Y+17	; 0x11
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	b9 01       	movw	r22, r18
    1bbe:	0e 94 99 0c 	call	0x1932	; 0x1932 <FingerPS_StoreTemplate>
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
        FingerPS_Auraked(FLASHING,0xAA,RED,3);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	6a ea       	ldi	r22, 0xAA	; 170
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	23 e0       	ldi	r18, 0x03	; 3
    1bcc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *6- Tempelate Storing
    *********************************************/
    while(x!=0)
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	88 23       	and	r24, r24
    1bd4:	81 f7       	brne	.-32     	; 0x1bb6 <FP_setNewFinger+0xee>
    {
        x = FingerPS_StoreTemplate(CHAR_BUFFER_1,Copy_u16StoreLoc);
        FingerPS_Auraked(FLASHING,0xAA,RED,3);

    }
    x=1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
    H_Lcd_Void_LCDGoTo(0,0);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("Finger Storing done ");
    1be2:	82 e7       	ldi	r24, 0x72	; 114
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(1,0);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("                    ");
    1bf2:	87 e8       	ldi	r24, 0x87	; 135
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a8 e4       	ldi	r26, 0x48	; 72
    1c00:	b3 e4       	ldi	r27, 0x43	; 67
    1c02:	8b 87       	std	Y+11, r24	; 0x0b
    1c04:	9c 87       	std	Y+12, r25	; 0x0c
    1c06:	ad 87       	std	Y+13, r26	; 0x0d
    1c08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a e7       	ldi	r20, 0x7A	; 122
    1c18:	55 e4       	ldi	r21, 0x45	; 69
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8f 83       	std	Y+7, r24	; 0x07
    1c24:	98 87       	std	Y+8, r25	; 0x08
    1c26:	a9 87       	std	Y+9, r26	; 0x09
    1c28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <FP_setNewFinger+0x184>
		__ticks = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <FP_setNewFinger+0x202>
	else if (__tmp > 65535)
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	4c f5       	brge	.+82     	; 0x1cb6 <FP_setNewFinger+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <FP_setNewFinger+0x1e4>
    1c8e:	80 e9       	ldi	r24, 0x90	; 144
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <FP_setNewFinger+0x1d2>
    1c9e:	9c 83       	std	Y+4, r25	; 0x04
    1ca0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <FP_setNewFinger+0x1c6>
    1cb4:	14 c0       	rjmp	.+40     	; 0x1cde <FP_setNewFinger+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <FP_setNewFinger+0x20e>
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
}
    1cde:	61 96       	adiw	r28, 0x11	; 17
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <FP_CheckMatch>:
    }
} 
#endif

u8 FP_CheckMatch(u16 Copy_u16StoreLoc)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <FP_CheckMatch+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <FP_CheckMatch+0x8>
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    u8 MatchScore =0;
    1d00:	1a 82       	std	Y+2, r1	; 0x02
    H_Lcd_Void_LCDGoTo(0,0);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("Place your finger");
    1d0a:	80 e6       	ldi	r24, 0x60	; 96
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    u8 x=1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <FP_CheckMatch+0x3a>
    /********************************************
    *7- gen img
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_genImg();
    1d18:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1d1c:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	6a ea       	ldi	r22, 0xAA	; 170
    1d22:	42 e0       	ldi	r20, 0x02	; 2
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteString("Place your finger");
    u8 x=1;
    /********************************************
    *7- gen img
    *********************************************/
    while(x!=0)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	88 23       	and	r24, r24
    1d2e:	a1 f7       	brne	.-24     	; 0x1d18 <FP_CheckMatch+0x28>
    {
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    x=1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	0a c0       	rjmp	.+20     	; 0x1d4a <FP_CheckMatch+0x5a>
    /********************************************
    *8- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1d3c:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	6a ea       	ldi	r22, 0xAA	; 170
    1d42:	43 e0       	ldi	r20, 0x03	; 3
    1d44:	21 e0       	ldi	r18, 0x01	; 1
    1d46:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteString("loading: *");
    #endif
    /********************************************
    *8- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	88 23       	and	r24, r24
    1d4e:	99 f7       	brne	.-26     	; 0x1d36 <FP_CheckMatch+0x46>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    x=1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <FP_CheckMatch+0x80>
    /********************************************
    *9- Load Char in char file 2
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_LoadCharFile(CHAR_BUFFER_2,Copy_u16StoreLoc);
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <FingerPS_LoadCharFile>
    1d62:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	6a ea       	ldi	r22, 0xAA	; 170
    1d68:	42 e0       	ldi	r20, 0x02	; 2
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    #endif
    /********************************************
    *9- Load Char in char file 2
    *********************************************/
    while(x!=0)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	88 23       	and	r24, r24
    1d74:	81 f7       	brne	.-32     	; 0x1d56 <FP_CheckMatch+0x66>
    H_Lcd_Void_LCDWriteCharacter('*');
    #endif
    /********************************************
    *10- CHECK MATCH
    *********************************************/
    x = FingerPS_Match();
    1d76:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <FingerPS_Match>
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	6a ea       	ldi	r22, 0xAA	; 170
    1d80:	42 e0       	ldi	r20, 0x02	; 2
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    if(x==0)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	88 23       	and	r24, r24
    1d8c:	49 f4       	brne	.+18     	; 0x1da0 <FP_CheckMatch+0xb0>
    {
        #if (DEBUGGING)
        H_Lcd_Void_LCDGoTo(0,0);
        H_Lcd_Void_LCDWriteString("    Matched  *_^     ");
        #endif
        MatchScore =1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	8a 83       	std	Y+2, r24	; 0x02
        FingerPS_Auraked(FLASHING,0xAA,PURPLE,3);
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	6a ea       	ldi	r22, 0xAA	; 170
    1d96:	43 e0       	ldi	r20, 0x03	; 3
    1d98:	23 e0       	ldi	r18, 0x03	; 3
    1d9a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <FingerPS_Auraked>
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <FP_CheckMatch+0xb8>
    }
    else if(x==FP_NOT_MATCHED)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	80 34       	cpi	r24, 0x40	; 64
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <FP_CheckMatch+0xb8>
    {
        #if (DEBUGGING)
        H_Lcd_Void_LCDGoTo(0,0);
        H_Lcd_Void_LCDWriteString(" Not  Matched  -_-  ");
        #endif
        MatchScore = 0;
    1da6:	1a 82       	std	Y+2, r1	; 0x02
    #if (DEBUGGING)
    H_Lcd_Void_LCDGoTo(1,0);
    H_Lcd_Void_LCDWriteString("                    ");
    #endif

    return MatchScore;
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <GIE_voidEnable>:

#include "BitMath.h"
#include "STD.h"

void GIE_voidEnable(void)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIE_SREG,7);
    1dc0:	af e5       	ldi	r26, 0x5F	; 95
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ef e5       	ldi	r30, 0x5F	; 95
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	8c 93       	st	X, r24
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <GIE_voidDisble>:
void GIE_voidDisble(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GIE_SREG,7);
    1ddc:	af e5       	ldi	r26, 0x5F	; 95
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	ef e5       	ldi	r30, 0x5F	; 95
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8f 77       	andi	r24, 0x7F	; 127
    1de8:	8c 93       	st	X, r24
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1df8:	84 e1       	ldi	r24, 0x14	; 20
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1e00:	85 e1       	ldi	r24, 0x15	; 21
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1e08:	86 e1       	ldi	r24, 0x16	; 22
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1e10:	88 e1       	ldi	r24, 0x18	; 24
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1e18:	8d e0       	ldi	r24, 0x0D	; 13
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1e20:	8c e0       	ldi	r24, 0x0C	; 12
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1e28:	83 e3       	ldi	r24, 0x33	; 51
    1e2a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1e2e:	82 e3       	ldi	r24, 0x32	; 50
    1e30:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1e34:	88 e2       	ldi	r24, 0x28	; 40
    1e36:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1e3a:	8c e0       	ldi	r24, 0x0C	; 12
    1e3c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	e9 97       	sbiw	r28, 0x39	; 57
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1e68:	8d e0       	ldi	r24, 0x0D	; 13
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1e70:	89 ad       	ldd	r24, Y+57	; 0x39
    1e72:	82 95       	swap	r24
    1e74:	8f 70       	andi	r24, 0x0F	; 15
    1e76:	98 2f       	mov	r25, r24
    1e78:	91 70       	andi	r25, 0x01	; 1
    1e7a:	84 e1       	ldi	r24, 0x14	; 20
    1e7c:	69 2f       	mov	r22, r25
    1e7e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1e82:	89 ad       	ldd	r24, Y+57	; 0x39
    1e84:	82 95       	swap	r24
    1e86:	86 95       	lsr	r24
    1e88:	87 70       	andi	r24, 0x07	; 7
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	91 70       	andi	r25, 0x01	; 1
    1e8e:	85 e1       	ldi	r24, 0x15	; 21
    1e90:	69 2f       	mov	r22, r25
    1e92:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1e96:	89 ad       	ldd	r24, Y+57	; 0x39
    1e98:	82 95       	swap	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	83 70       	andi	r24, 0x03	; 3
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	91 70       	andi	r25, 0x01	; 1
    1ea4:	86 e1       	ldi	r24, 0x16	; 22
    1ea6:	69 2f       	mov	r22, r25
    1ea8:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1eac:	89 ad       	ldd	r24, Y+57	; 0x39
    1eae:	98 2f       	mov	r25, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	99 27       	eor	r25, r25
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	88 e1       	ldi	r24, 0x18	; 24
    1eb8:	69 2f       	mov	r22, r25
    1eba:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1ebe:	8c e0       	ldi	r24, 0x0C	; 12
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8d ab       	std	Y+53, r24	; 0x35
    1ed0:	9e ab       	std	Y+54, r25	; 0x36
    1ed2:	af ab       	std	Y+55, r26	; 0x37
    1ed4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eda:	8f a9       	ldd	r24, Y+55	; 0x37
    1edc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	55 e4       	ldi	r21, 0x45	; 69
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	89 ab       	std	Y+49, r24	; 0x31
    1ef0:	9a ab       	std	Y+50, r25	; 0x32
    1ef2:	ab ab       	std	Y+51, r26	; 0x33
    1ef4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    1efa:	8b a9       	ldd	r24, Y+51	; 0x33
    1efc:	9c a9       	ldd	r25, Y+52	; 0x34
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 ab       	std	Y+48, r25	; 0x30
    1f14:	8f a7       	std	Y+47, r24	; 0x2f
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1f18:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6d a9       	ldd	r22, Y+53	; 0x35
    1f32:	7e a9       	ldd	r23, Y+54	; 0x36
    1f34:	8f a9       	ldd	r24, Y+55	; 0x37
    1f36:	98 ad       	ldd	r25, Y+56	; 0x38
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	98 ab       	std	Y+48, r25	; 0x30
    1f56:	8f a7       	std	Y+47, r24	; 0x2f
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <H_Lcd_Void_LCDWriteCharacter+0x126>
    1f5a:	80 e9       	ldi	r24, 0x90	; 144
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	8d a7       	std	Y+45, r24	; 0x2d
    1f62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <H_Lcd_Void_LCDWriteCharacter+0x114>
    1f6a:	9e a7       	std	Y+46, r25	; 0x2e
    1f6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f70:	98 a9       	ldd	r25, Y+48	; 0x30
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <H_Lcd_Void_LCDWriteCharacter+0x108>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	98 ab       	std	Y+48, r25	; 0x30
    1f94:	8f a7       	std	Y+47, r24	; 0x2f
    1f96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f98:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9a:	9c a7       	std	Y+44, r25	; 0x2c
    1f9c:	8b a7       	std	Y+43, r24	; 0x2b
    1f9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1fa6:	9c a7       	std	Y+44, r25	; 0x2c
    1fa8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1faa:	8c e0       	ldi	r24, 0x0C	; 12
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	8f a3       	std	Y+39, r24	; 0x27
    1fbc:	98 a7       	std	Y+40, r25	; 0x28
    1fbe:	a9 a7       	std	Y+41, r26	; 0x29
    1fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8b a3       	std	Y+35, r24	; 0x23
    1fdc:	9c a3       	std	Y+36, r25	; 0x24
    1fde:	ad a3       	std	Y+37, r26	; 0x25
    1fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <H_Lcd_Void_LCDWriteCharacter+0x212>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	98 a1       	ldd	r25, Y+32	; 0x20
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <H_Lcd_Void_LCDWriteCharacter+0x200>
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <H_Lcd_Void_LCDWriteCharacter+0x23c>
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2096:	89 ad       	ldd	r24, Y+57	; 0x39
    2098:	98 2f       	mov	r25, r24
    209a:	91 70       	andi	r25, 0x01	; 1
    209c:	84 e1       	ldi	r24, 0x14	; 20
    209e:	69 2f       	mov	r22, r25
    20a0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    20a4:	89 ad       	ldd	r24, Y+57	; 0x39
    20a6:	86 95       	lsr	r24
    20a8:	98 2f       	mov	r25, r24
    20aa:	91 70       	andi	r25, 0x01	; 1
    20ac:	85 e1       	ldi	r24, 0x15	; 21
    20ae:	69 2f       	mov	r22, r25
    20b0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    20b4:	89 ad       	ldd	r24, Y+57	; 0x39
    20b6:	86 95       	lsr	r24
    20b8:	86 95       	lsr	r24
    20ba:	98 2f       	mov	r25, r24
    20bc:	91 70       	andi	r25, 0x01	; 1
    20be:	86 e1       	ldi	r24, 0x16	; 22
    20c0:	69 2f       	mov	r22, r25
    20c2:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    20c6:	89 ad       	ldd	r24, Y+57	; 0x39
    20c8:	86 95       	lsr	r24
    20ca:	86 95       	lsr	r24
    20cc:	86 95       	lsr	r24
    20ce:	98 2f       	mov	r25, r24
    20d0:	91 70       	andi	r25, 0x01	; 1
    20d2:	88 e1       	ldi	r24, 0x18	; 24
    20d4:	69 2f       	mov	r22, r25
    20d6:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    20da:	8c e0       	ldi	r24, 0x0C	; 12
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	89 8f       	std	Y+25, r24	; 0x19
    20ec:	9a 8f       	std	Y+26, r25	; 0x1a
    20ee:	ab 8f       	std	Y+27, r26	; 0x1b
    20f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	69 8d       	ldd	r22, Y+25	; 0x19
    20f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8d 8b       	std	Y+21, r24	; 0x15
    210c:	9e 8b       	std	Y+22, r25	; 0x16
    210e:	af 8b       	std	Y+23, r26	; 0x17
    2110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	69 8d       	ldd	r22, Y+25	; 0x19
    214e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <H_Lcd_Void_LCDWriteCharacter+0x342>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	9a 89       	ldd	r25, Y+18	; 0x12
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <H_Lcd_Void_LCDWriteCharacter+0x330>
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <H_Lcd_Void_LCDWriteCharacter+0x324>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	98 89       	ldd	r25, Y+16	; 0x10
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <H_Lcd_Void_LCDWriteCharacter+0x36c>
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    21c6:	8c e0       	ldi	r24, 0x0C	; 12
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 ea       	ldi	r26, 0xA0	; 160
    21d4:	b0 e4       	ldi	r27, 0x40	; 64
    21d6:	8b 87       	std	Y+11, r24	; 0x0b
    21d8:	9c 87       	std	Y+12, r25	; 0x0c
    21da:	ad 87       	std	Y+13, r26	; 0x0d
    21dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a e7       	ldi	r20, 0x7A	; 122
    21ec:	55 e4       	ldi	r21, 0x45	; 69
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8f 83       	std	Y+7, r24	; 0x07
    21f8:	98 87       	std	Y+8, r25	; 0x08
    21fa:	a9 87       	std	Y+9, r26	; 0x09
    21fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	2c f4       	brge	.+10     	; 0x2220 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	3f c0       	rjmp	.+126    	; 0x229e <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	4c f5       	brge	.+82     	; 0x228a <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	6b 85       	ldd	r22, Y+11	; 0x0b
    223a:	7c 85       	ldd	r23, Y+12	; 0x0c
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    2262:	80 e9       	ldi	r24, 0x90	; 144
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <H_Lcd_Void_LCDWriteCharacter+0x41c>
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	69 f7       	brne	.-38     	; 0x2262 <H_Lcd_Void_LCDWriteCharacter+0x410>
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <H_Lcd_Void_LCDWriteCharacter+0x458>
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    22b2:	e9 96       	adiw	r28, 0x39	; 57
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	e9 97       	sbiw	r28, 0x39	; 57
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    22da:	8d e0       	ldi	r24, 0x0D	; 13
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    22e2:	89 ad       	ldd	r24, Y+57	; 0x39
    22e4:	82 95       	swap	r24
    22e6:	8f 70       	andi	r24, 0x0F	; 15
    22e8:	98 2f       	mov	r25, r24
    22ea:	91 70       	andi	r25, 0x01	; 1
    22ec:	84 e1       	ldi	r24, 0x14	; 20
    22ee:	69 2f       	mov	r22, r25
    22f0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    22f4:	89 ad       	ldd	r24, Y+57	; 0x39
    22f6:	82 95       	swap	r24
    22f8:	86 95       	lsr	r24
    22fa:	87 70       	andi	r24, 0x07	; 7
    22fc:	98 2f       	mov	r25, r24
    22fe:	91 70       	andi	r25, 0x01	; 1
    2300:	85 e1       	ldi	r24, 0x15	; 21
    2302:	69 2f       	mov	r22, r25
    2304:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    2308:	89 ad       	ldd	r24, Y+57	; 0x39
    230a:	82 95       	swap	r24
    230c:	86 95       	lsr	r24
    230e:	86 95       	lsr	r24
    2310:	83 70       	andi	r24, 0x03	; 3
    2312:	98 2f       	mov	r25, r24
    2314:	91 70       	andi	r25, 0x01	; 1
    2316:	86 e1       	ldi	r24, 0x16	; 22
    2318:	69 2f       	mov	r22, r25
    231a:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    231e:	89 ad       	ldd	r24, Y+57	; 0x39
    2320:	98 2f       	mov	r25, r24
    2322:	99 1f       	adc	r25, r25
    2324:	99 27       	eor	r25, r25
    2326:	99 1f       	adc	r25, r25
    2328:	88 e1       	ldi	r24, 0x18	; 24
    232a:	69 2f       	mov	r22, r25
    232c:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2330:	8c e0       	ldi	r24, 0x0C	; 12
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e8       	ldi	r26, 0x80	; 128
    233e:	bf e3       	ldi	r27, 0x3F	; 63
    2340:	8d ab       	std	Y+53, r24	; 0x35
    2342:	9e ab       	std	Y+54, r25	; 0x36
    2344:	af ab       	std	Y+55, r26	; 0x37
    2346:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	89 ab       	std	Y+49, r24	; 0x31
    2362:	9a ab       	std	Y+50, r25	; 0x32
    2364:	ab ab       	std	Y+51, r26	; 0x33
    2366:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    238a:	69 a9       	ldd	r22, Y+49	; 0x31
    238c:	7a a9       	ldd	r23, Y+50	; 0x32
    238e:	8b a9       	ldd	r24, Y+51	; 0x33
    2390:	9c a9       	ldd	r25, Y+52	; 0x34
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6d a9       	ldd	r22, Y+53	; 0x35
    23a4:	7e a9       	ldd	r23, Y+54	; 0x36
    23a6:	8f a9       	ldd	r24, Y+55	; 0x37
    23a8:	98 ad       	ldd	r25, Y+56	; 0x38
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	98 ab       	std	Y+48, r25	; 0x30
    23c8:	8f a7       	std	Y+47, r24	; 0x2f
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <H_Lcd_Void_LCDWriteCommand+0x126>
    23cc:	80 e9       	ldi	r24, 0x90	; 144
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9e a7       	std	Y+46, r25	; 0x2e
    23d2:	8d a7       	std	Y+45, r24	; 0x2d
    23d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <H_Lcd_Void_LCDWriteCommand+0x114>
    23dc:	9e a7       	std	Y+46, r25	; 0x2e
    23de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e2:	98 a9       	ldd	r25, Y+48	; 0x30
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	98 ab       	std	Y+48, r25	; 0x30
    23e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ec:	98 a9       	ldd	r25, Y+48	; 0x30
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <H_Lcd_Void_LCDWriteCommand+0x108>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	9c a7       	std	Y+44, r25	; 0x2c
    240e:	8b a7       	std	Y+43, r24	; 0x2b
    2410:	8b a5       	ldd	r24, Y+43	; 0x2b
    2412:	9c a5       	ldd	r25, Y+44	; 0x2c
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <H_Lcd_Void_LCDWriteCommand+0x150>
    2418:	9c a7       	std	Y+44, r25	; 0x2c
    241a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    241c:	8c e0       	ldi	r24, 0x0C	; 12
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e8       	ldi	r26, 0x80	; 128
    242a:	bf e3       	ldi	r27, 0x3F	; 63
    242c:	8f a3       	std	Y+39, r24	; 0x27
    242e:	98 a7       	std	Y+40, r25	; 0x28
    2430:	a9 a7       	std	Y+41, r26	; 0x29
    2432:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6f a1       	ldd	r22, Y+39	; 0x27
    2436:	78 a5       	ldd	r23, Y+40	; 0x28
    2438:	89 a5       	ldd	r24, Y+41	; 0x29
    243a:	9a a5       	ldd	r25, Y+42	; 0x2a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	55 e4       	ldi	r21, 0x45	; 69
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8b a3       	std	Y+35, r24	; 0x23
    244e:	9c a3       	std	Y+36, r25	; 0x24
    2450:	ad a3       	std	Y+37, r26	; 0x25
    2452:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2454:	6b a1       	ldd	r22, Y+35	; 0x23
    2456:	7c a1       	ldd	r23, Y+36	; 0x24
    2458:	8d a1       	ldd	r24, Y+37	; 0x25
    245a:	9e a1       	ldd	r25, Y+38	; 0x26
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2476:	6b a1       	ldd	r22, Y+35	; 0x23
    2478:	7c a1       	ldd	r23, Y+36	; 0x24
    247a:	8d a1       	ldd	r24, Y+37	; 0x25
    247c:	9e a1       	ldd	r25, Y+38	; 0x26
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6f a1       	ldd	r22, Y+39	; 0x27
    2490:	78 a5       	ldd	r23, Y+40	; 0x28
    2492:	89 a5       	ldd	r24, Y+41	; 0x29
    2494:	9a a5       	ldd	r25, Y+42	; 0x2a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <H_Lcd_Void_LCDWriteCommand+0x212>
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	98 a3       	std	Y+32, r25	; 0x20
    24be:	8f 8f       	std	Y+31, r24	; 0x1f
    24c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c2:	98 a1       	ldd	r25, Y+32	; 0x20
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <H_Lcd_Void_LCDWriteCommand+0x200>
    24c8:	98 a3       	std	Y+32, r25	; 0x20
    24ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	89 a1       	ldd	r24, Y+33	; 0x21
    24ce:	9a a1       	ldd	r25, Y+34	; 0x22
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	89 a1       	ldd	r24, Y+33	; 0x21
    24d8:	9a a1       	ldd	r25, Y+34	; 0x22
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <H_Lcd_Void_LCDWriteCommand+0x1f4>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9a a3       	std	Y+34, r25	; 0x22
    24f2:	89 a3       	std	Y+33, r24	; 0x21
    24f4:	89 a1       	ldd	r24, Y+33	; 0x21
    24f6:	9a a1       	ldd	r25, Y+34	; 0x22
    24f8:	9e 8f       	std	Y+30, r25	; 0x1e
    24fa:	8d 8f       	std	Y+29, r24	; 0x1d
    24fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2504:	9e 8f       	std	Y+30, r25	; 0x1e
    2506:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    2508:	89 ad       	ldd	r24, Y+57	; 0x39
    250a:	98 2f       	mov	r25, r24
    250c:	91 70       	andi	r25, 0x01	; 1
    250e:	84 e1       	ldi	r24, 0x14	; 20
    2510:	69 2f       	mov	r22, r25
    2512:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2516:	89 ad       	ldd	r24, Y+57	; 0x39
    2518:	86 95       	lsr	r24
    251a:	98 2f       	mov	r25, r24
    251c:	91 70       	andi	r25, 0x01	; 1
    251e:	85 e1       	ldi	r24, 0x15	; 21
    2520:	69 2f       	mov	r22, r25
    2522:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2526:	89 ad       	ldd	r24, Y+57	; 0x39
    2528:	86 95       	lsr	r24
    252a:	86 95       	lsr	r24
    252c:	98 2f       	mov	r25, r24
    252e:	91 70       	andi	r25, 0x01	; 1
    2530:	86 e1       	ldi	r24, 0x16	; 22
    2532:	69 2f       	mov	r22, r25
    2534:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    2538:	89 ad       	ldd	r24, Y+57	; 0x39
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	86 95       	lsr	r24
    2540:	98 2f       	mov	r25, r24
    2542:	91 70       	andi	r25, 0x01	; 1
    2544:	88 e1       	ldi	r24, 0x18	; 24
    2546:	69 2f       	mov	r22, r25
    2548:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    254c:	8c e0       	ldi	r24, 0x0C	; 12
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e8       	ldi	r26, 0x80	; 128
    255a:	bf e3       	ldi	r27, 0x3F	; 63
    255c:	89 8f       	std	Y+25, r24	; 0x19
    255e:	9a 8f       	std	Y+26, r25	; 0x1a
    2560:	ab 8f       	std	Y+27, r26	; 0x1b
    2562:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	55 e4       	ldi	r21, 0x45	; 69
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8d 8b       	std	Y+21, r24	; 0x15
    257e:	9e 8b       	std	Y+22, r25	; 0x16
    2580:	af 8b       	std	Y+23, r26	; 0x17
    2582:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 8b       	std	Y+20, r25	; 0x14
    25a2:	8b 8b       	std	Y+19, r24	; 0x13
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    25a6:	6d 89       	ldd	r22, Y+21	; 0x15
    25a8:	7e 89       	ldd	r23, Y+22	; 0x16
    25aa:	8f 89       	ldd	r24, Y+23	; 0x17
    25ac:	98 8d       	ldd	r25, Y+24	; 0x18
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	69 8d       	ldd	r22, Y+25	; 0x19
    25c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <H_Lcd_Void_LCDWriteCommand+0x342>
    25e8:	80 e9       	ldi	r24, 0x90	; 144
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	9a 8b       	std	Y+18, r25	; 0x12
    25ee:	89 8b       	std	Y+17, r24	; 0x11
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <H_Lcd_Void_LCDWriteCommand+0x330>
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <H_Lcd_Void_LCDWriteCommand+0x324>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	98 8b       	std	Y+16, r25	; 0x10
    262a:	8f 87       	std	Y+15, r24	; 0x0f
    262c:	8f 85       	ldd	r24, Y+15	; 0x0f
    262e:	98 89       	ldd	r25, Y+16	; 0x10
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <H_Lcd_Void_LCDWriteCommand+0x36c>
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2638:	8c e0       	ldi	r24, 0x0C	; 12
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 ea       	ldi	r26, 0xA0	; 160
    2646:	b0 e4       	ldi	r27, 0x40	; 64
    2648:	8b 87       	std	Y+11, r24	; 0x0b
    264a:	9c 87       	std	Y+12, r25	; 0x0c
    264c:	ad 87       	std	Y+13, r26	; 0x0d
    264e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a e7       	ldi	r20, 0x7A	; 122
    265e:	55 e4       	ldi	r21, 0x45	; 69
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8f 83       	std	Y+7, r24	; 0x07
    266a:	98 87       	std	Y+8, r25	; 0x08
    266c:	a9 87       	std	Y+9, r26	; 0x09
    266e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2692:	6f 81       	ldd	r22, Y+7	; 0x07
    2694:	78 85       	ldd	r23, Y+8	; 0x08
    2696:	89 85       	ldd	r24, Y+9	; 0x09
    2698:	9a 85       	ldd	r25, Y+10	; 0x0a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <H_Lcd_Void_LCDWriteCommand+0x42e>
    26d4:	80 e9       	ldi	r24, 0x90	; 144
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <H_Lcd_Void_LCDWriteCommand+0x41c>
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <H_Lcd_Void_LCDWriteCommand+0x410>
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <H_Lcd_Void_LCDWriteCommand+0x458>
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2724:	e9 96       	adiw	r28, 0x39	; 57
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <H_Lcd_Void_LCDWriteString+0x6>
    273c:	0f 92       	push	r0
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    2746:	19 82       	std	Y+1, r1	; 0x01
    2748:	0e c0       	rjmp	.+28     	; 0x2766 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	fc 01       	movw	r30, r24
    2756:	e2 0f       	add	r30, r18
    2758:	f3 1f       	adc	r31, r19
    275a:	80 81       	ld	r24, Z
    275c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	9b 81       	ldd	r25, Y+3	; 0x03
    2770:	fc 01       	movw	r30, r24
    2772:	e2 0f       	add	r30, r18
    2774:	f3 1f       	adc	r31, r19
    2776:	80 81       	ld	r24, Z
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	29 f7       	brne	.-54     	; 0x274a <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	2f 97       	sbiw	r28, 0x0f	; 15
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	6c 87       	std	Y+12, r22	; 0x0c
    27ba:	7d 87       	std	Y+13, r23	; 0x0d
    27bc:	8e 87       	std	Y+14, r24	; 0x0e
    27be:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    27c0:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    27c2:	8a e0       	ldi	r24, 0x0A	; 10
    27c4:	fe 01       	movw	r30, r28
    27c6:	32 96       	adiw	r30, 0x02	; 2
    27c8:	df 01       	movw	r26, r30
    27ca:	98 2f       	mov	r25, r24
    27cc:	1d 92       	st	X+, r1
    27ce:	9a 95       	dec	r25
    27d0:	e9 f7       	brne	.-6      	; 0x27cc <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    27d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    27d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    27d6:	ae 85       	ldd	r26, Y+14	; 0x0e
    27d8:	bf 85       	ldd	r27, Y+15	; 0x0f
    27da:	bb 23       	and	r27, r27
    27dc:	94 f4       	brge	.+36     	; 0x2802 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    27de:	8c 85       	ldd	r24, Y+12	; 0x0c
    27e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27e2:	ae 85       	ldd	r26, Y+14	; 0x0e
    27e4:	bf 85       	ldd	r27, Y+15	; 0x0f
    27e6:	b0 95       	com	r27
    27e8:	a0 95       	com	r26
    27ea:	90 95       	com	r25
    27ec:	81 95       	neg	r24
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	af 4f       	sbci	r26, 0xFF	; 255
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	8c 87       	std	Y+12, r24	; 0x0c
    27f6:	9d 87       	std	Y+13, r25	; 0x0d
    27f8:	ae 87       	std	Y+14, r26	; 0x0e
    27fa:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    27fc:	8d e2       	ldi	r24, 0x2D	; 45
    27fe:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	08 2f       	mov	r16, r24
    2806:	11 27       	eor	r17, r17
    2808:	07 fd       	sbrc	r16, 7
    280a:	10 95       	com	r17
    280c:	8c 85       	ldd	r24, Y+12	; 0x0c
    280e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2810:	ae 85       	ldd	r26, Y+14	; 0x0e
    2812:	bf 85       	ldd	r27, Y+15	; 0x0f
    2814:	2a e0       	ldi	r18, 0x0A	; 10
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divmodsi4>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	28 2f       	mov	r18, r24
    282a:	ce 01       	movw	r24, r28
    282c:	02 96       	adiw	r24, 0x02	; 2
    282e:	fc 01       	movw	r30, r24
    2830:	e0 0f       	add	r30, r16
    2832:	f1 1f       	adc	r31, r17
    2834:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2836:	8c 85       	ldd	r24, Y+12	; 0x0c
    2838:	9d 85       	ldd	r25, Y+13	; 0x0d
    283a:	ae 85       	ldd	r26, Y+14	; 0x0e
    283c:	bf 85       	ldd	r27, Y+15	; 0x0f
    283e:	2a e0       	ldi	r18, 0x0A	; 10
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__divmodsi4>
    284e:	da 01       	movw	r26, r20
    2850:	c9 01       	movw	r24, r18
    2852:	8c 87       	std	Y+12, r24	; 0x0c
    2854:	9d 87       	std	Y+13, r25	; 0x0d
    2856:	ae 87       	std	Y+14, r26	; 0x0e
    2858:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    2860:	8c 85       	ldd	r24, Y+12	; 0x0c
    2862:	9d 85       	ldd	r25, Y+13	; 0x0d
    2864:	ae 85       	ldd	r26, Y+14	; 0x0e
    2866:	bf 85       	ldd	r27, Y+15	; 0x0f
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	a1 05       	cpc	r26, r1
    286c:	b1 05       	cpc	r27, r1
    286e:	49 f6       	brne	.-110    	; 0x2802 <H_Lcd_Void_LCDWriteNumber+0x62>
    2870:	11 c0       	rjmp	.+34     	; 0x2894 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	81 50       	subi	r24, 0x01	; 1
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	33 27       	eor	r19, r19
    287e:	27 fd       	sbrc	r18, 7
    2880:	30 95       	com	r19
    2882:	ce 01       	movw	r24, r28
    2884:	02 96       	adiw	r24, 0x02	; 2
    2886:	fc 01       	movw	r30, r24
    2888:	e2 0f       	add	r30, r18
    288a:	f3 1f       	adc	r31, r19
    288c:	80 81       	ld	r24, Z
    288e:	80 5d       	subi	r24, 0xD0	; 208
    2890:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	18 16       	cp	r1, r24
    2898:	64 f3       	brlt	.-40     	; 0x2872 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    289a:	2f 96       	adiw	r28, 0x0f	; 15
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	08 95       	ret

000028b0 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <H_Lcd_Void_LCDGoTo+0x6>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <H_Lcd_Void_LCDGoTo+0x8>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <H_Lcd_Void_LCDGoTo+0xa>
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	80 ec       	ldi	r24, 0xC0	; 192
    28c8:	8a 83       	std	Y+2, r24	; 0x02
    28ca:	84 e9       	ldi	r24, 0x94	; 148
    28cc:	8b 83       	std	Y+3, r24	; 0x03
    28ce:	84 ed       	ldi	r24, 0xD4	; 212
    28d0:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	ce 01       	movw	r24, r28
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	fc 01       	movw	r30, r24
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	90 81       	ld	r25, Z
    28e4:	8e 81       	ldd	r24, Y+6	; 0x06
    28e6:	89 0f       	add	r24, r25
    28e8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <H_Lcd_Void_LCDWriteCommand>
}
    28ec:	26 96       	adiw	r28, 0x06	; 6
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <H_LED_Void_LedInit+0x6>
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	3b 83       	std	Y+3, r19	; 0x03
    2914:	2a 83       	std	Y+2, r18	; 0x02
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	82 30       	cpi	r24, 0x02	; 2
    291c:	91 05       	cpc	r25, r1
    291e:	d9 f0       	breq	.+54     	; 0x2956 <H_LED_Void_LedInit+0x58>
    2920:	2a 81       	ldd	r18, Y+2	; 0x02
    2922:	3b 81       	ldd	r19, Y+3	; 0x03
    2924:	23 30       	cpi	r18, 0x03	; 3
    2926:	31 05       	cpc	r19, r1
    2928:	34 f4       	brge	.+12     	; 0x2936 <H_LED_Void_LedInit+0x38>
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	91 05       	cpc	r25, r1
    2932:	61 f0       	breq	.+24     	; 0x294c <H_LED_Void_LedInit+0x4e>
    2934:	1e c0       	rjmp	.+60     	; 0x2972 <H_LED_Void_LedInit+0x74>
    2936:	2a 81       	ldd	r18, Y+2	; 0x02
    2938:	3b 81       	ldd	r19, Y+3	; 0x03
    293a:	23 30       	cpi	r18, 0x03	; 3
    293c:	31 05       	cpc	r19, r1
    293e:	81 f0       	breq	.+32     	; 0x2960 <H_LED_Void_LedInit+0x62>
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	84 30       	cpi	r24, 0x04	; 4
    2946:	91 05       	cpc	r25, r1
    2948:	81 f0       	breq	.+32     	; 0x296a <H_LED_Void_LedInit+0x6c>
    294a:	13 c0       	rjmp	.+38     	; 0x2972 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    294c:	80 e1       	ldi	r24, 0x10	; 16
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2954:	0e c0       	rjmp	.+28     	; 0x2972 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    2956:	8f e0       	ldi	r24, 0x0F	; 15
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    295e:	09 c0       	rjmp	.+18     	; 0x2972 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2960:	8e e0       	ldi	r24, 0x0E	; 14
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2968:	04 c0       	rjmp	.+8      	; 0x2972 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    296a:	8b e1       	ldi	r24, 0x1B	; 27
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <H_LED_Void_LedOn+0x6>
    2984:	0f 92       	push	r0
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	3b 83       	std	Y+3, r19	; 0x03
    2994:	2a 83       	std	Y+2, r18	; 0x02
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	82 30       	cpi	r24, 0x02	; 2
    299c:	91 05       	cpc	r25, r1
    299e:	d9 f0       	breq	.+54     	; 0x29d6 <H_LED_Void_LedOn+0x58>
    29a0:	2a 81       	ldd	r18, Y+2	; 0x02
    29a2:	3b 81       	ldd	r19, Y+3	; 0x03
    29a4:	23 30       	cpi	r18, 0x03	; 3
    29a6:	31 05       	cpc	r19, r1
    29a8:	34 f4       	brge	.+12     	; 0x29b6 <H_LED_Void_LedOn+0x38>
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	9b 81       	ldd	r25, Y+3	; 0x03
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	91 05       	cpc	r25, r1
    29b2:	61 f0       	breq	.+24     	; 0x29cc <H_LED_Void_LedOn+0x4e>
    29b4:	1e c0       	rjmp	.+60     	; 0x29f2 <H_LED_Void_LedOn+0x74>
    29b6:	2a 81       	ldd	r18, Y+2	; 0x02
    29b8:	3b 81       	ldd	r19, Y+3	; 0x03
    29ba:	23 30       	cpi	r18, 0x03	; 3
    29bc:	31 05       	cpc	r19, r1
    29be:	81 f0       	breq	.+32     	; 0x29e0 <H_LED_Void_LedOn+0x62>
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	91 05       	cpc	r25, r1
    29c8:	81 f0       	breq	.+32     	; 0x29ea <H_LED_Void_LedOn+0x6c>
    29ca:	13 c0       	rjmp	.+38     	; 0x29f2 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    29cc:	80 e1       	ldi	r24, 0x10	; 16
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    29d4:	0e c0       	rjmp	.+28     	; 0x29f2 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    29d6:	8f e0       	ldi	r24, 0x0F	; 15
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    29de:	09 c0       	rjmp	.+18     	; 0x29f2 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    29e0:	8e e0       	ldi	r24, 0x0E	; 14
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    29e8:	04 c0       	rjmp	.+8      	; 0x29f2 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    29ea:	8b e1       	ldi	r24, 0x1B	; 27
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <H_LED_Void_LedOff+0x6>
    2a04:	0f 92       	push	r0
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	3b 83       	std	Y+3, r19	; 0x03
    2a14:	2a 83       	std	Y+2, r18	; 0x02
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	d9 f0       	breq	.+54     	; 0x2a56 <H_LED_Void_LedOff+0x58>
    2a20:	2a 81       	ldd	r18, Y+2	; 0x02
    2a22:	3b 81       	ldd	r19, Y+3	; 0x03
    2a24:	23 30       	cpi	r18, 0x03	; 3
    2a26:	31 05       	cpc	r19, r1
    2a28:	34 f4       	brge	.+12     	; 0x2a36 <H_LED_Void_LedOff+0x38>
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	61 f0       	breq	.+24     	; 0x2a4c <H_LED_Void_LedOff+0x4e>
    2a34:	1e c0       	rjmp	.+60     	; 0x2a72 <H_LED_Void_LedOff+0x74>
    2a36:	2a 81       	ldd	r18, Y+2	; 0x02
    2a38:	3b 81       	ldd	r19, Y+3	; 0x03
    2a3a:	23 30       	cpi	r18, 0x03	; 3
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	81 f0       	breq	.+32     	; 0x2a60 <H_LED_Void_LedOff+0x62>
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	84 30       	cpi	r24, 0x04	; 4
    2a46:	91 05       	cpc	r25, r1
    2a48:	81 f0       	breq	.+32     	; 0x2a6a <H_LED_Void_LedOff+0x6c>
    2a4a:	13 c0       	rjmp	.+38     	; 0x2a72 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    2a4c:	80 e1       	ldi	r24, 0x10	; 16
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2a54:	0e c0       	rjmp	.+28     	; 0x2a72 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2a56:	8f e0       	ldi	r24, 0x0F	; 15
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2a5e:	09 c0       	rjmp	.+18     	; 0x2a72 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2a60:	8e e0       	ldi	r24, 0x0E	; 14
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    2a6a:	8b e1       	ldi	r24, 0x1B	; 27
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	eb 97       	sbiw	r28, 0x3b	; 59
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2a94:	89 ad       	ldd	r24, Y+57	; 0x39
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	3b af       	std	Y+59, r19	; 0x3b
    2a9c:	2a af       	std	Y+58, r18	; 0x3a
    2a9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2aa0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <H_LED_Void_LedBlink+0x2c>
    2aa8:	93 c0       	rjmp	.+294    	; 0x2bd0 <H_LED_Void_LedBlink+0x152>
    2aaa:	2a ad       	ldd	r18, Y+58	; 0x3a
    2aac:	3b ad       	ldd	r19, Y+59	; 0x3b
    2aae:	23 30       	cpi	r18, 0x03	; 3
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	34 f4       	brge	.+12     	; 0x2ac0 <H_LED_Void_LedBlink+0x42>
    2ab4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ab6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	71 f0       	breq	.+28     	; 0x2ada <H_LED_Void_LedBlink+0x5c>
    2abe:	f8 c1       	rjmp	.+1008   	; 0x2eb0 <H_LED_Void_LedBlink+0x432>
    2ac0:	2a ad       	ldd	r18, Y+58	; 0x3a
    2ac2:	3b ad       	ldd	r19, Y+59	; 0x3b
    2ac4:	23 30       	cpi	r18, 0x03	; 3
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <H_LED_Void_LedBlink+0x4e>
    2aca:	fd c0       	rjmp	.+506    	; 0x2cc6 <H_LED_Void_LedBlink+0x248>
    2acc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ace:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ad0:	84 30       	cpi	r24, 0x04	; 4
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <H_LED_Void_LedBlink+0x5a>
    2ad6:	72 c1       	rjmp	.+740    	; 0x2dbc <H_LED_Void_LedBlink+0x33e>
    2ad8:	eb c1       	rjmp	.+982    	; 0x2eb0 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    2ada:	80 e1       	ldi	r24, 0x10	; 16
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a6 e9       	ldi	r26, 0x96	; 150
    2ae8:	b3 e4       	ldi	r27, 0x43	; 67
    2aea:	8d ab       	std	Y+53, r24	; 0x35
    2aec:	9e ab       	std	Y+54, r25	; 0x36
    2aee:	af ab       	std	Y+55, r26	; 0x37
    2af0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6d a9       	ldd	r22, Y+53	; 0x35
    2af4:	7e a9       	ldd	r23, Y+54	; 0x36
    2af6:	8f a9       	ldd	r24, Y+55	; 0x37
    2af8:	98 ad       	ldd	r25, Y+56	; 0x38
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a e7       	ldi	r20, 0x7A	; 122
    2b00:	55 e4       	ldi	r21, 0x45	; 69
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	89 ab       	std	Y+49, r24	; 0x31
    2b0c:	9a ab       	std	Y+50, r25	; 0x32
    2b0e:	ab ab       	std	Y+51, r26	; 0x33
    2b10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b12:	69 a9       	ldd	r22, Y+49	; 0x31
    2b14:	7a a9       	ldd	r23, Y+50	; 0x32
    2b16:	8b a9       	ldd	r24, Y+51	; 0x33
    2b18:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	98 ab       	std	Y+48, r25	; 0x30
    2b30:	8f a7       	std	Y+47, r24	; 0x2f
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2b34:	69 a9       	ldd	r22, Y+49	; 0x31
    2b36:	7a a9       	ldd	r23, Y+50	; 0x32
    2b38:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b50:	8f a9       	ldd	r24, Y+55	; 0x37
    2b52:	98 ad       	ldd	r25, Y+56	; 0x38
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	98 ab       	std	Y+48, r25	; 0x30
    2b72:	8f a7       	std	Y+47, r24	; 0x2f
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <H_LED_Void_LedBlink+0x116>
    2b76:	80 e9       	ldi	r24, 0x90	; 144
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	9e a7       	std	Y+46, r25	; 0x2e
    2b7c:	8d a7       	std	Y+45, r24	; 0x2d
    2b7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <H_LED_Void_LedBlink+0x104>
    2b86:	9e a7       	std	Y+46, r25	; 0x2e
    2b88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <H_LED_Void_LedBlink+0xf8>
    2b9c:	14 c0       	rjmp	.+40     	; 0x2bc6 <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	98 ab       	std	Y+48, r25	; 0x30
    2bb0:	8f a7       	std	Y+47, r24	; 0x2f
    2bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb6:	9c a7       	std	Y+44, r25	; 0x2c
    2bb8:	8b a7       	std	Y+43, r24	; 0x2b
    2bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <H_LED_Void_LedBlink+0x140>
    2bc2:	9c a7       	std	Y+44, r25	; 0x2c
    2bc4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    2bc6:	80 e1       	ldi	r24, 0x10	; 16
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2bce:	70 c1       	rjmp	.+736    	; 0x2eb0 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    2bd0:	8f e0       	ldi	r24, 0x0F	; 15
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a6 e9       	ldi	r26, 0x96	; 150
    2bde:	b3 e4       	ldi	r27, 0x43	; 67
    2be0:	8f a3       	std	Y+39, r24	; 0x27
    2be2:	98 a7       	std	Y+40, r25	; 0x28
    2be4:	a9 a7       	std	Y+41, r26	; 0x29
    2be6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bea:	78 a5       	ldd	r23, Y+40	; 0x28
    2bec:	89 a5       	ldd	r24, Y+41	; 0x29
    2bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	55 e4       	ldi	r21, 0x45	; 69
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8b a3       	std	Y+35, r24	; 0x23
    2c02:	9c a3       	std	Y+36, r25	; 0x24
    2c04:	ad a3       	std	Y+37, r26	; 0x25
    2c06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c08:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    2c2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c30:	9e a1       	ldd	r25, Y+38	; 0x26
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6f a1       	ldd	r22, Y+39	; 0x27
    2c44:	78 a5       	ldd	r23, Y+40	; 0x28
    2c46:	89 a5       	ldd	r24, Y+41	; 0x29
    2c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <H_LED_Void_LedBlink+0x20c>
    2c6c:	80 e9       	ldi	r24, 0x90	; 144
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	98 a3       	std	Y+32, r25	; 0x20
    2c72:	8f 8f       	std	Y+31, r24	; 0x1f
    2c74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c76:	98 a1       	ldd	r25, Y+32	; 0x20
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <H_LED_Void_LedBlink+0x1fa>
    2c7c:	98 a3       	std	Y+32, r25	; 0x20
    2c7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	89 a1       	ldd	r24, Y+33	; 0x21
    2c82:	9a a1       	ldd	r25, Y+34	; 0x22
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9a a3       	std	Y+34, r25	; 0x22
    2c88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <H_LED_Void_LedBlink+0x1ee>
    2c92:	14 c0       	rjmp	.+40     	; 0x2cbc <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6b a1       	ldd	r22, Y+35	; 0x23
    2c96:	7c a1       	ldd	r23, Y+36	; 0x24
    2c98:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9a a3       	std	Y+34, r25	; 0x22
    2ca6:	89 a3       	std	Y+33, r24	; 0x21
    2ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    2caa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cac:	9e 8f       	std	Y+30, r25	; 0x1e
    2cae:	8d 8f       	std	Y+29, r24	; 0x1d
    2cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <H_LED_Void_LedBlink+0x236>
    2cb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cba:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2cbc:	8f e0       	ldi	r24, 0x0F	; 15
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2cc4:	f5 c0       	rjmp	.+490    	; 0x2eb0 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2cc6:	8e e0       	ldi	r24, 0x0E	; 14
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a6 e9       	ldi	r26, 0x96	; 150
    2cd4:	b3 e4       	ldi	r27, 0x43	; 67
    2cd6:	89 8f       	std	Y+25, r24	; 0x19
    2cd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2cda:	ab 8f       	std	Y+27, r26	; 0x1b
    2cdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a e7       	ldi	r20, 0x7A	; 122
    2cec:	55 e4       	ldi	r21, 0x45	; 69
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8d 8b       	std	Y+21, r24	; 0x15
    2cf8:	9e 8b       	std	Y+22, r25	; 0x16
    2cfa:	af 8b       	std	Y+23, r26	; 0x17
    2cfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9c 8b       	std	Y+20, r25	; 0x14
    2d1c:	8b 8b       	std	Y+19, r24	; 0x13
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2d20:	6d 89       	ldd	r22, Y+21	; 0x15
    2d22:	7e 89       	ldd	r23, Y+22	; 0x16
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9c 8b       	std	Y+20, r25	; 0x14
    2d5e:	8b 8b       	std	Y+19, r24	; 0x13
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <H_LED_Void_LedBlink+0x302>
    2d62:	80 e9       	ldi	r24, 0x90	; 144
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	9a 8b       	std	Y+18, r25	; 0x12
    2d68:	89 8b       	std	Y+17, r24	; 0x11
    2d6a:	89 89       	ldd	r24, Y+17	; 0x11
    2d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <H_LED_Void_LedBlink+0x2f0>
    2d72:	9a 8b       	std	Y+18, r25	; 0x12
    2d74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	9c 8b       	std	Y+20, r25	; 0x14
    2d7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	8b 89       	ldd	r24, Y+19	; 0x13
    2d82:	9c 89       	ldd	r25, Y+20	; 0x14
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <H_LED_Void_LedBlink+0x2e4>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9c 8b       	std	Y+20, r25	; 0x14
    2d9c:	8b 8b       	std	Y+19, r24	; 0x13
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	98 8b       	std	Y+16, r25	; 0x10
    2da4:	8f 87       	std	Y+15, r24	; 0x0f
    2da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da8:	98 89       	ldd	r25, Y+16	; 0x10
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <H_LED_Void_LedBlink+0x32c>
    2dae:	98 8b       	std	Y+16, r25	; 0x10
    2db0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2db2:	8e e0       	ldi	r24, 0x0E	; 14
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2dba:	7a c0       	rjmp	.+244    	; 0x2eb0 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    2dbc:	8b e1       	ldi	r24, 0x1B	; 27
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a6 e9       	ldi	r26, 0x96	; 150
    2dca:	b3 e4       	ldi	r27, 0x43	; 67
    2dcc:	8b 87       	std	Y+11, r24	; 0x0b
    2dce:	9c 87       	std	Y+12, r25	; 0x0c
    2dd0:	ad 87       	std	Y+13, r26	; 0x0d
    2dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a e7       	ldi	r20, 0x7A	; 122
    2de2:	55 e4       	ldi	r21, 0x45	; 69
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8f 83       	std	Y+7, r24	; 0x07
    2dee:	98 87       	std	Y+8, r25	; 0x08
    2df0:	a9 87       	std	Y+9, r26	; 0x09
    2df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <H_LED_Void_LedBlink+0x3f8>
    2e58:	80 e9       	ldi	r24, 0x90	; 144
    2e5a:	91 e0       	ldi	r25, 0x01	; 1
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <H_LED_Void_LedBlink+0x3e6>
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <H_LED_Void_LedBlink+0x3da>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <H_LED_Void_LedBlink+0x422>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2ea8:	8b e1       	ldi	r24, 0x1B	; 27
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    2eb0:	eb 96       	adiw	r28, 0x3b	; 59
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <H_LED_Void_LedTog+0x6>
    2ec8:	0f 92       	push	r0
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	3b 83       	std	Y+3, r19	; 0x03
    2ed8:	2a 83       	std	Y+2, r18	; 0x02
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	82 30       	cpi	r24, 0x02	; 2
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	d1 f0       	breq	.+52     	; 0x2f18 <H_LED_Void_LedTog+0x56>
    2ee4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ee6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ee8:	23 30       	cpi	r18, 0x03	; 3
    2eea:	31 05       	cpc	r19, r1
    2eec:	34 f4       	brge	.+12     	; 0x2efa <H_LED_Void_LedTog+0x38>
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef2:	81 30       	cpi	r24, 0x01	; 1
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	61 f0       	breq	.+24     	; 0x2f10 <H_LED_Void_LedTog+0x4e>
    2ef8:	1a c0       	rjmp	.+52     	; 0x2f2e <H_LED_Void_LedTog+0x6c>
    2efa:	2a 81       	ldd	r18, Y+2	; 0x02
    2efc:	3b 81       	ldd	r19, Y+3	; 0x03
    2efe:	23 30       	cpi	r18, 0x03	; 3
    2f00:	31 05       	cpc	r19, r1
    2f02:	71 f0       	breq	.+28     	; 0x2f20 <H_LED_Void_LedTog+0x5e>
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	84 30       	cpi	r24, 0x04	; 4
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	69 f0       	breq	.+26     	; 0x2f28 <H_LED_Void_LedTog+0x66>
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2f10:	80 e1       	ldi	r24, 0x10	; 16
    2f12:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2f16:	0b c0       	rjmp	.+22     	; 0x2f2e <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2f18:	8f e0       	ldi	r24, 0x0F	; 15
    2f1a:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2f20:	8e e0       	ldi	r24, 0x0E	; 14
    2f22:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2f26:	03 c0       	rjmp	.+6      	; 0x2f2e <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2f28:	8b e1       	ldi	r24, 0x1B	; 27
    2f2a:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <H_PushButton_Void_PushButtonInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <H_PushButton_Void_PushButtonInit+0x6>
    2f40:	0f 92       	push	r0
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	3b 83       	std	Y+3, r19	; 0x03
    2f50:	2a 83       	std	Y+2, r18	; 0x02
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	9b 81       	ldd	r25, Y+3	; 0x03
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	91 05       	cpc	r25, r1
    2f5a:	d1 f0       	breq	.+52     	; 0x2f90 <H_PushButton_Void_PushButtonInit+0x56>
    2f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    2f60:	22 30       	cpi	r18, 0x02	; 2
    2f62:	31 05       	cpc	r19, r1
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <H_PushButton_Void_PushButtonInit+0x36>
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	61 f0       	breq	.+24     	; 0x2f86 <H_PushButton_Void_PushButtonInit+0x4c>
    2f6e:	1e c0       	rjmp	.+60     	; 0x2fac <H_PushButton_Void_PushButtonInit+0x72>
    2f70:	2a 81       	ldd	r18, Y+2	; 0x02
    2f72:	3b 81       	ldd	r19, Y+3	; 0x03
    2f74:	22 30       	cpi	r18, 0x02	; 2
    2f76:	31 05       	cpc	r19, r1
    2f78:	81 f0       	breq	.+32     	; 0x2f9a <H_PushButton_Void_PushButtonInit+0x60>
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	91 05       	cpc	r25, r1
    2f82:	81 f0       	breq	.+32     	; 0x2fa4 <H_PushButton_Void_PushButtonInit+0x6a>
    2f84:	13 c0       	rjmp	.+38     	; 0x2fac <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    2f86:	8f e2       	ldi	r24, 0x2F	; 47
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2f8e:	0e c0       	rjmp	.+28     	; 0x2fac <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    2f90:	8e e2       	ldi	r24, 0x2E	; 46
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2f98:	09 c0       	rjmp	.+18     	; 0x2fac <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    2f9a:	8d e2       	ldi	r24, 0x2D	; 45
    2f9c:	60 e0       	ldi	r22, 0x00	; 0
    2f9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    2fa4:	8b e2       	ldi	r24, 0x2B	; 43
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	ec 97       	sbiw	r28, 0x3c	; 60
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    2fd2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	3c af       	std	Y+60, r19	; 0x3c
    2fda:	2b af       	std	Y+59, r18	; 0x3b
    2fdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fde:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fe0:	81 30       	cpi	r24, 0x01	; 1
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <H_PushButton_U8_PushButtonRead+0x30>
    2fe6:	97 c0       	rjmp	.+302    	; 0x3116 <H_PushButton_U8_PushButtonRead+0x15e>
    2fe8:	2b ad       	ldd	r18, Y+59	; 0x3b
    2fea:	3c ad       	ldd	r19, Y+60	; 0x3c
    2fec:	22 30       	cpi	r18, 0x02	; 2
    2fee:	31 05       	cpc	r19, r1
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <H_PushButton_U8_PushButtonRead+0x44>
    2ff2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	71 f0       	breq	.+28     	; 0x3016 <H_PushButton_U8_PushButtonRead+0x5e>
    2ffa:	0b c2       	rjmp	.+1046   	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
    2ffc:	2b ad       	ldd	r18, Y+59	; 0x3b
    2ffe:	3c ad       	ldd	r19, Y+60	; 0x3c
    3000:	22 30       	cpi	r18, 0x02	; 2
    3002:	31 05       	cpc	r19, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <H_PushButton_U8_PushButtonRead+0x50>
    3006:	07 c1       	rjmp	.+526    	; 0x3216 <H_PushButton_U8_PushButtonRead+0x25e>
    3008:	8b ad       	ldd	r24, Y+59	; 0x3b
    300a:	9c ad       	ldd	r25, Y+60	; 0x3c
    300c:	83 30       	cpi	r24, 0x03	; 3
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <H_PushButton_U8_PushButtonRead+0x5c>
    3012:	81 c1       	rjmp	.+770    	; 0x3316 <H_PushButton_U8_PushButtonRead+0x35e>
    3014:	fe c1       	rjmp	.+1020   	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3016:	8f e2       	ldi	r24, 0x2F	; 47
    3018:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    301c:	88 23       	and	r24, r24
    301e:	09 f0       	breq	.+2      	; 0x3022 <H_PushButton_U8_PushButtonRead+0x6a>
    3020:	f8 c1       	rjmp	.+1008   	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a8 e4       	ldi	r26, 0x48	; 72
    3028:	b2 e4       	ldi	r27, 0x42	; 66
    302a:	8d ab       	std	Y+53, r24	; 0x35
    302c:	9e ab       	std	Y+54, r25	; 0x36
    302e:	af ab       	std	Y+55, r26	; 0x37
    3030:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	6d a9       	ldd	r22, Y+53	; 0x35
    3034:	7e a9       	ldd	r23, Y+54	; 0x36
    3036:	8f a9       	ldd	r24, Y+55	; 0x37
    3038:	98 ad       	ldd	r25, Y+56	; 0x38
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	4a e7       	ldi	r20, 0x7A	; 122
    3040:	55 e4       	ldi	r21, 0x45	; 69
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	89 ab       	std	Y+49, r24	; 0x31
    304c:	9a ab       	std	Y+50, r25	; 0x32
    304e:	ab ab       	std	Y+51, r26	; 0x33
    3050:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3052:	69 a9       	ldd	r22, Y+49	; 0x31
    3054:	7a a9       	ldd	r23, Y+50	; 0x32
    3056:	8b a9       	ldd	r24, Y+51	; 0x33
    3058:	9c a9       	ldd	r25, Y+52	; 0x34
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e8       	ldi	r20, 0x80	; 128
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3066:	88 23       	and	r24, r24
    3068:	2c f4       	brge	.+10     	; 0x3074 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	98 ab       	std	Y+48, r25	; 0x30
    3070:	8f a7       	std	Y+47, r24	; 0x2f
    3072:	3f c0       	rjmp	.+126    	; 0x30f2 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    3074:	69 a9       	ldd	r22, Y+49	; 0x31
    3076:	7a a9       	ldd	r23, Y+50	; 0x32
    3078:	8b a9       	ldd	r24, Y+51	; 0x33
    307a:	9c a9       	ldd	r25, Y+52	; 0x34
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	57 e4       	ldi	r21, 0x47	; 71
    3084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3088:	18 16       	cp	r1, r24
    308a:	4c f5       	brge	.+82     	; 0x30de <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308c:	6d a9       	ldd	r22, Y+53	; 0x35
    308e:	7e a9       	ldd	r23, Y+54	; 0x36
    3090:	8f a9       	ldd	r24, Y+55	; 0x37
    3092:	98 ad       	ldd	r25, Y+56	; 0x38
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e2       	ldi	r20, 0x20	; 32
    309a:	51 e4       	ldi	r21, 0x41	; 65
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	98 ab       	std	Y+48, r25	; 0x30
    30b2:	8f a7       	std	Y+47, r24	; 0x2f
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <H_PushButton_U8_PushButtonRead+0x11c>
    30b6:	80 e9       	ldi	r24, 0x90	; 144
    30b8:	91 e0       	ldi	r25, 0x01	; 1
    30ba:	9e a7       	std	Y+46, r25	; 0x2e
    30bc:	8d a7       	std	Y+45, r24	; 0x2d
    30be:	8d a5       	ldd	r24, Y+45	; 0x2d
    30c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <H_PushButton_U8_PushButtonRead+0x10a>
    30c6:	9e a7       	std	Y+46, r25	; 0x2e
    30c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    30cc:	98 a9       	ldd	r25, Y+48	; 0x30
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	98 ab       	std	Y+48, r25	; 0x30
    30d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d6:	98 a9       	ldd	r25, Y+48	; 0x30
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	69 f7       	brne	.-38     	; 0x30b6 <H_PushButton_U8_PushButtonRead+0xfe>
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	69 a9       	ldd	r22, Y+49	; 0x31
    30e0:	7a a9       	ldd	r23, Y+50	; 0x32
    30e2:	8b a9       	ldd	r24, Y+51	; 0x33
    30e4:	9c a9       	ldd	r25, Y+52	; 0x34
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	98 ab       	std	Y+48, r25	; 0x30
    30f0:	8f a7       	std	Y+47, r24	; 0x2f
    30f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f4:	98 a9       	ldd	r25, Y+48	; 0x30
    30f6:	9c a7       	std	Y+44, r25	; 0x2c
    30f8:	8b a7       	std	Y+43, r24	; 0x2b
    30fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    30fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <H_PushButton_U8_PushButtonRead+0x146>
    3102:	9c a7       	std	Y+44, r25	; 0x2c
    3104:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3106:	8f e2       	ldi	r24, 0x2F	; 47
    3108:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    310c:	88 23       	and	r24, r24
    310e:	09 f0       	breq	.+2      	; 0x3112 <H_PushButton_U8_PushButtonRead+0x15a>
    3110:	80 c1       	rjmp	.+768    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3112:	19 ae       	std	Y+57, r1	; 0x39
    3114:	7e c1       	rjmp	.+764    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3116:	8e e2       	ldi	r24, 0x2E	; 46
    3118:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    311c:	88 23       	and	r24, r24
    311e:	09 f0       	breq	.+2      	; 0x3122 <H_PushButton_U8_PushButtonRead+0x16a>
    3120:	78 c1       	rjmp	.+752    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a8 e4       	ldi	r26, 0x48	; 72
    3128:	b2 e4       	ldi	r27, 0x42	; 66
    312a:	8f a3       	std	Y+39, r24	; 0x27
    312c:	98 a7       	std	Y+40, r25	; 0x28
    312e:	a9 a7       	std	Y+41, r26	; 0x29
    3130:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3132:	6f a1       	ldd	r22, Y+39	; 0x27
    3134:	78 a5       	ldd	r23, Y+40	; 0x28
    3136:	89 a5       	ldd	r24, Y+41	; 0x29
    3138:	9a a5       	ldd	r25, Y+42	; 0x2a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a e7       	ldi	r20, 0x7A	; 122
    3140:	55 e4       	ldi	r21, 0x45	; 69
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8b a3       	std	Y+35, r24	; 0x23
    314c:	9c a3       	std	Y+36, r25	; 0x24
    314e:	ad a3       	std	Y+37, r26	; 0x25
    3150:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3152:	6b a1       	ldd	r22, Y+35	; 0x23
    3154:	7c a1       	ldd	r23, Y+36	; 0x24
    3156:	8d a1       	ldd	r24, Y+37	; 0x25
    3158:	9e a1       	ldd	r25, Y+38	; 0x26
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e8       	ldi	r20, 0x80	; 128
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3166:	88 23       	and	r24, r24
    3168:	2c f4       	brge	.+10     	; 0x3174 <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9a a3       	std	Y+34, r25	; 0x22
    3170:	89 a3       	std	Y+33, r24	; 0x21
    3172:	3f c0       	rjmp	.+126    	; 0x31f2 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    3174:	6b a1       	ldd	r22, Y+35	; 0x23
    3176:	7c a1       	ldd	r23, Y+36	; 0x24
    3178:	8d a1       	ldd	r24, Y+37	; 0x25
    317a:	9e a1       	ldd	r25, Y+38	; 0x26
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	3f ef       	ldi	r19, 0xFF	; 255
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	57 e4       	ldi	r21, 0x47	; 71
    3184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	4c f5       	brge	.+82     	; 0x31de <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318c:	6f a1       	ldd	r22, Y+39	; 0x27
    318e:	78 a5       	ldd	r23, Y+40	; 0x28
    3190:	89 a5       	ldd	r24, Y+41	; 0x29
    3192:	9a a5       	ldd	r25, Y+42	; 0x2a
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9a a3       	std	Y+34, r25	; 0x22
    31b2:	89 a3       	std	Y+33, r24	; 0x21
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <H_PushButton_U8_PushButtonRead+0x21c>
    31b6:	80 e9       	ldi	r24, 0x90	; 144
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	98 a3       	std	Y+32, r25	; 0x20
    31bc:	8f 8f       	std	Y+31, r24	; 0x1f
    31be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c0:	98 a1       	ldd	r25, Y+32	; 0x20
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <H_PushButton_U8_PushButtonRead+0x20a>
    31c6:	98 a3       	std	Y+32, r25	; 0x20
    31c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ca:	89 a1       	ldd	r24, Y+33	; 0x21
    31cc:	9a a1       	ldd	r25, Y+34	; 0x22
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	9a a3       	std	Y+34, r25	; 0x22
    31d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d4:	89 a1       	ldd	r24, Y+33	; 0x21
    31d6:	9a a1       	ldd	r25, Y+34	; 0x22
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	69 f7       	brne	.-38     	; 0x31b6 <H_PushButton_U8_PushButtonRead+0x1fe>
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31de:	6b a1       	ldd	r22, Y+35	; 0x23
    31e0:	7c a1       	ldd	r23, Y+36	; 0x24
    31e2:	8d a1       	ldd	r24, Y+37	; 0x25
    31e4:	9e a1       	ldd	r25, Y+38	; 0x26
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9a a3       	std	Y+34, r25	; 0x22
    31f0:	89 a3       	std	Y+33, r24	; 0x21
    31f2:	89 a1       	ldd	r24, Y+33	; 0x21
    31f4:	9a a1       	ldd	r25, Y+34	; 0x22
    31f6:	9e 8f       	std	Y+30, r25	; 0x1e
    31f8:	8d 8f       	std	Y+29, r24	; 0x1d
    31fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <H_PushButton_U8_PushButtonRead+0x246>
    3202:	9e 8f       	std	Y+30, r25	; 0x1e
    3204:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3206:	8e e2       	ldi	r24, 0x2E	; 46
    3208:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    320c:	88 23       	and	r24, r24
    320e:	09 f0       	breq	.+2      	; 0x3212 <H_PushButton_U8_PushButtonRead+0x25a>
    3210:	00 c1       	rjmp	.+512    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3212:	19 ae       	std	Y+57, r1	; 0x39
    3214:	fe c0       	rjmp	.+508    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3216:	8d e2       	ldi	r24, 0x2D	; 45
    3218:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    321c:	88 23       	and	r24, r24
    321e:	09 f0       	breq	.+2      	; 0x3222 <H_PushButton_U8_PushButtonRead+0x26a>
    3220:	f8 c0       	rjmp	.+496    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	a8 e4       	ldi	r26, 0x48	; 72
    3228:	b2 e4       	ldi	r27, 0x42	; 66
    322a:	89 8f       	std	Y+25, r24	; 0x19
    322c:	9a 8f       	std	Y+26, r25	; 0x1a
    322e:	ab 8f       	std	Y+27, r26	; 0x1b
    3230:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3232:	69 8d       	ldd	r22, Y+25	; 0x19
    3234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a e7       	ldi	r20, 0x7A	; 122
    3240:	55 e4       	ldi	r21, 0x45	; 69
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	8d 8b       	std	Y+21, r24	; 0x15
    324c:	9e 8b       	std	Y+22, r25	; 0x16
    324e:	af 8b       	std	Y+23, r26	; 0x17
    3250:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3252:	6d 89       	ldd	r22, Y+21	; 0x15
    3254:	7e 89       	ldd	r23, Y+22	; 0x16
    3256:	8f 89       	ldd	r24, Y+23	; 0x17
    3258:	98 8d       	ldd	r25, Y+24	; 0x18
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e8       	ldi	r20, 0x80	; 128
    3260:	5f e3       	ldi	r21, 0x3F	; 63
    3262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3266:	88 23       	and	r24, r24
    3268:	2c f4       	brge	.+10     	; 0x3274 <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	9c 8b       	std	Y+20, r25	; 0x14
    3270:	8b 8b       	std	Y+19, r24	; 0x13
    3272:	3f c0       	rjmp	.+126    	; 0x32f2 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	3f ef       	ldi	r19, 0xFF	; 255
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	57 e4       	ldi	r21, 0x47	; 71
    3284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	4c f5       	brge	.+82     	; 0x32de <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328c:	69 8d       	ldd	r22, Y+25	; 0x19
    328e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e2       	ldi	r20, 0x20	; 32
    329a:	51 e4       	ldi	r21, 0x41	; 65
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9c 8b       	std	Y+20, r25	; 0x14
    32b2:	8b 8b       	std	Y+19, r24	; 0x13
    32b4:	0f c0       	rjmp	.+30     	; 0x32d4 <H_PushButton_U8_PushButtonRead+0x31c>
    32b6:	80 e9       	ldi	r24, 0x90	; 144
    32b8:	91 e0       	ldi	r25, 0x01	; 1
    32ba:	9a 8b       	std	Y+18, r25	; 0x12
    32bc:	89 8b       	std	Y+17, r24	; 0x11
    32be:	89 89       	ldd	r24, Y+17	; 0x11
    32c0:	9a 89       	ldd	r25, Y+18	; 0x12
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <H_PushButton_U8_PushButtonRead+0x30a>
    32c6:	9a 8b       	std	Y+18, r25	; 0x12
    32c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ca:	8b 89       	ldd	r24, Y+19	; 0x13
    32cc:	9c 89       	ldd	r25, Y+20	; 0x14
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d4:	8b 89       	ldd	r24, Y+19	; 0x13
    32d6:	9c 89       	ldd	r25, Y+20	; 0x14
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	69 f7       	brne	.-38     	; 0x32b6 <H_PushButton_U8_PushButtonRead+0x2fe>
    32dc:	14 c0       	rjmp	.+40     	; 0x3306 <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32de:	6d 89       	ldd	r22, Y+21	; 0x15
    32e0:	7e 89       	ldd	r23, Y+22	; 0x16
    32e2:	8f 89       	ldd	r24, Y+23	; 0x17
    32e4:	98 8d       	ldd	r25, Y+24	; 0x18
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9c 8b       	std	Y+20, r25	; 0x14
    32f0:	8b 8b       	std	Y+19, r24	; 0x13
    32f2:	8b 89       	ldd	r24, Y+19	; 0x13
    32f4:	9c 89       	ldd	r25, Y+20	; 0x14
    32f6:	98 8b       	std	Y+16, r25	; 0x10
    32f8:	8f 87       	std	Y+15, r24	; 0x0f
    32fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    32fc:	98 89       	ldd	r25, Y+16	; 0x10
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <H_PushButton_U8_PushButtonRead+0x346>
    3302:	98 8b       	std	Y+16, r25	; 0x10
    3304:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3306:	8d e2       	ldi	r24, 0x2D	; 45
    3308:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    330c:	88 23       	and	r24, r24
    330e:	09 f0       	breq	.+2      	; 0x3312 <H_PushButton_U8_PushButtonRead+0x35a>
    3310:	80 c0       	rjmp	.+256    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3312:	19 ae       	std	Y+57, r1	; 0x39
    3314:	7e c0       	rjmp	.+252    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3316:	8b e2       	ldi	r24, 0x2B	; 43
    3318:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    331c:	88 23       	and	r24, r24
    331e:	09 f0       	breq	.+2      	; 0x3322 <H_PushButton_U8_PushButtonRead+0x36a>
    3320:	78 c0       	rjmp	.+240    	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a8 e4       	ldi	r26, 0x48	; 72
    3328:	b2 e4       	ldi	r27, 0x42	; 66
    332a:	8b 87       	std	Y+11, r24	; 0x0b
    332c:	9c 87       	std	Y+12, r25	; 0x0c
    332e:	ad 87       	std	Y+13, r26	; 0x0d
    3330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	6b 85       	ldd	r22, Y+11	; 0x0b
    3334:	7c 85       	ldd	r23, Y+12	; 0x0c
    3336:	8d 85       	ldd	r24, Y+13	; 0x0d
    3338:	9e 85       	ldd	r25, Y+14	; 0x0e
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a e7       	ldi	r20, 0x7A	; 122
    3340:	55 e4       	ldi	r21, 0x45	; 69
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8f 83       	std	Y+7, r24	; 0x07
    334c:	98 87       	std	Y+8, r25	; 0x08
    334e:	a9 87       	std	Y+9, r26	; 0x09
    3350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3352:	6f 81       	ldd	r22, Y+7	; 0x07
    3354:	78 85       	ldd	r23, Y+8	; 0x08
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	2c f4       	brge	.+10     	; 0x3374 <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
    3372:	3f c0       	rjmp	.+126    	; 0x33f2 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    3374:	6f 81       	ldd	r22, Y+7	; 0x07
    3376:	78 85       	ldd	r23, Y+8	; 0x08
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	9a 85       	ldd	r25, Y+10	; 0x0a
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	57 e4       	ldi	r21, 0x47	; 71
    3384:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3388:	18 16       	cp	r1, r24
    338a:	4c f5       	brge	.+82     	; 0x33de <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338c:	6b 85       	ldd	r22, Y+11	; 0x0b
    338e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3390:	8d 85       	ldd	r24, Y+13	; 0x0d
    3392:	9e 85       	ldd	r25, Y+14	; 0x0e
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9e 83       	std	Y+6, r25	; 0x06
    33b2:	8d 83       	std	Y+5, r24	; 0x05
    33b4:	0f c0       	rjmp	.+30     	; 0x33d4 <H_PushButton_U8_PushButtonRead+0x41c>
    33b6:	80 e9       	ldi	r24, 0x90	; 144
    33b8:	91 e0       	ldi	r25, 0x01	; 1
    33ba:	9c 83       	std	Y+4, r25	; 0x04
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <H_PushButton_U8_PushButtonRead+0x40a>
    33c6:	9c 83       	std	Y+4, r25	; 0x04
    33c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	9e 81       	ldd	r25, Y+6	; 0x06
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	69 f7       	brne	.-38     	; 0x33b6 <H_PushButton_U8_PushButtonRead+0x3fe>
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33de:	6f 81       	ldd	r22, Y+7	; 0x07
    33e0:	78 85       	ldd	r23, Y+8	; 0x08
    33e2:	89 85       	ldd	r24, Y+9	; 0x09
    33e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	8d 81       	ldd	r24, Y+5	; 0x05
    33f4:	9e 81       	ldd	r25, Y+6	; 0x06
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	9a 81       	ldd	r25, Y+2	; 0x02
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <H_PushButton_U8_PushButtonRead+0x446>
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3406:	8b e2       	ldi	r24, 0x2B	; 43
    3408:	0e 94 cf 07 	call	0xf9e	; 0xf9e <M_DIO_Void_GetPinValue>
    340c:	88 23       	and	r24, r24
    340e:	09 f4       	brne	.+2      	; 0x3412 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3410:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    3412:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3414:	ec 96       	adiw	r28, 0x3c	; 60
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <UART_Init>:
#include "UART_Private.h"

static void(*UARTPfun)(u8 )=NULL;

void UART_Init(void)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
	/*set Baud rate :9600*/
	UBRRH_REG =(u8)(UART_BAUD_RATE>>8);
    342e:	e0 e4       	ldi	r30, 0x40	; 64
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	10 82       	st	Z, r1
    UBRRL_REG =(u8)UART_BAUD_RATE ;
    3434:	e9 e2       	ldi	r30, 0x29	; 41
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 e1       	ldi	r24, 0x10	; 16
    343a:	80 83       	st	Z, r24
	/* TO ENABLE RX and TX CIRCUIT */
	UCSRB_REG = (1<<RXEN_BIT)|(1<<TXEN_BIT);
    343c:	ea e2       	ldi	r30, 0x2A	; 42
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	88 e1       	ldi	r24, 0x18	; 24
    3442:	80 83       	st	Z, r24
	/*set frame format*/
	UCSRC_REG = (1<<URSEL_BIT)|(UART_STOP_BIT<<USBS_BIT)|(UART_FRAME_SIZE<<UCSZ0_BIT);
    3444:	e0 e4       	ldi	r30, 0x40	; 64
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	86 e8       	ldi	r24, 0x86	; 134
    344a:	80 83       	st	Z, r24
}
    344c:	cf 91       	pop	r28
    344e:	df 91       	pop	r29
    3450:	08 95       	ret

00003452 <UART_SendByte>:

void UART_SendByte(u8 Data)
{
    3452:	df 93       	push	r29
    3454:	cf 93       	push	r28
    3456:	00 d0       	rcall	.+0      	; 0x3458 <UART_SendByte+0x6>
    3458:	0f 92       	push	r0
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Counter=0;
    3460:	1a 82       	std	Y+2, r1	; 0x02
    3462:	19 82       	std	Y+1, r1	; 0x01
    3464:	05 c0       	rjmp	.+10     	; 0x3470 <UART_SendByte+0x1e>
	while((!(GET_BIT(UCSRA_REG,UDRE_BIT)))&&(Local_u16Counter<UART_POLLING_TIME) )
	{
		Local_u16Counter++;
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	01 96       	adiw	r24, 0x01	; 1
    346c:	9a 83       	std	Y+2, r25	; 0x02
    346e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendByte(u8 Data)
{
	u16 Local_u16Counter=0;
	while((!(GET_BIT(UCSRA_REG,UDRE_BIT)))&&(Local_u16Counter<UART_POLLING_TIME) )
    3470:	eb e2       	ldi	r30, 0x2B	; 43
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	82 95       	swap	r24
    3478:	86 95       	lsr	r24
    347a:	87 70       	andi	r24, 0x07	; 7
    347c:	88 2f       	mov	r24, r24
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	81 70       	andi	r24, 0x01	; 1
    3482:	90 70       	andi	r25, 0x00	; 0
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	31 f4       	brne	.+12     	; 0x3494 <UART_SendByte+0x42>
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	23 ec       	ldi	r18, 0xC3	; 195
    348e:	80 35       	cpi	r24, 0x50	; 80
    3490:	92 07       	cpc	r25, r18
    3492:	48 f3       	brcs	.-46     	; 0x3466 <UART_SendByte+0x14>
	{
		Local_u16Counter++;
	}
	UDR_REG = Data;
    3494:	ec e2       	ldi	r30, 0x2C	; 44
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	80 83       	st	Z, r24
}
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <UART_SendString>:

u8 UART_SendString(u8*Copy_Pu8Arr , u8 Copy_u8size)
{
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <UART_SendString+0x6>
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <UART_SendString+0x8>
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <UART_SendString+0xa>
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	9d 83       	std	Y+5, r25	; 0x05
    34b8:	8c 83       	std	Y+4, r24	; 0x04
    34ba:	6e 83       	std	Y+6, r22	; 0x06
	u8 local_u8RetuenState = STD_OK;
    34bc:	1b 82       	std	Y+3, r1	; 0x03
	if (Copy_Pu8Arr != NULL)
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	9d 81       	ldd	r25, Y+5	; 0x05
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	d9 f0       	breq	.+54     	; 0x34fc <UART_SendString+0x54>
	{
		for(int i =0 ;i<Copy_u8size;i++)
    34c6:	1a 82       	std	Y+2, r1	; 0x02
    34c8:	19 82       	std	Y+1, r1	; 0x01
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <UART_SendString+0x42>
		{
			UART_SendByte(Copy_Pu8Arr[i]);
    34cc:	29 81       	ldd	r18, Y+1	; 0x01
    34ce:	3a 81       	ldd	r19, Y+2	; 0x02
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	9d 81       	ldd	r25, Y+5	; 0x05
    34d4:	fc 01       	movw	r30, r24
    34d6:	e2 0f       	add	r30, r18
    34d8:	f3 1f       	adc	r31, r19
    34da:	80 81       	ld	r24, Z
    34dc:	0e 94 29 1a 	call	0x3452	; 0x3452 <UART_SendByte>
u8 UART_SendString(u8*Copy_Pu8Arr , u8 Copy_u8size)
{
	u8 local_u8RetuenState = STD_OK;
	if (Copy_Pu8Arr != NULL)
	{
		for(int i =0 ;i<Copy_u8size;i++)
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	8e 81       	ldd	r24, Y+6	; 0x06
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	82 17       	cp	r24, r18
    34f6:	93 07       	cpc	r25, r19
    34f8:	4c f3       	brlt	.-46     	; 0x34cc <UART_SendString+0x24>
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <UART_SendString+0x58>
			UART_SendByte(Copy_Pu8Arr[i]);
		}
	}
	else
	{
		local_u8RetuenState = STD_NOK;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8RetuenState;
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3502:	26 96       	adiw	r28, 0x06	; 6
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <UART_ReceiveByteSync>:

u8   UART_ReceiveByteSync(void)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <UART_ReceiveByteSync+0x6>
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Counter =0;
    351e:	1a 82       	std	Y+2, r1	; 0x02
    3520:	19 82       	std	Y+1, r1	; 0x01
    3522:	05 c0       	rjmp	.+10     	; 0x352e <UART_ReceiveByteSync+0x1a>
	/* Wait for data to be received */
	while ( !(GET_BIT(UCSRA_REG,RXC_BIT)) && (Local_u16Counter<UART_POLLING_TIME))
	{
		Local_u16Counter++;
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	01 96       	adiw	r24, 0x01	; 1
    352a:	9a 83       	std	Y+2, r25	; 0x02
    352c:	89 83       	std	Y+1, r24	; 0x01

u8   UART_ReceiveByteSync(void)
{
	u16 Local_u16Counter =0;
	/* Wait for data to be received */
	while ( !(GET_BIT(UCSRA_REG,RXC_BIT)) && (Local_u16Counter<UART_POLLING_TIME))
    352e:	eb e2       	ldi	r30, 0x2B	; 43
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	88 23       	and	r24, r24
    3536:	34 f0       	brlt	.+12     	; 0x3544 <UART_ReceiveByteSync+0x30>
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	23 ec       	ldi	r18, 0xC3	; 195
    353e:	80 35       	cpi	r24, 0x50	; 80
    3540:	92 07       	cpc	r25, r18
    3542:	80 f3       	brcs	.-32     	; 0x3524 <UART_ReceiveByteSync+0x10>
	{
		Local_u16Counter++;
	}
	/* Get and return received data from buffer */
	return UDR_REG;
    3544:	ec e2       	ldi	r30, 0x2C	; 44
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
}
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <UART_ReceiveByteAsyncCallBack>:

u8 UART_ReceiveByteAsyncCallBack(void(*Pfun)(u8 ))
{
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	00 d0       	rcall	.+0      	; 0x355a <UART_ReceiveByteAsyncCallBack+0x6>
    355a:	0f 92       	push	r0
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	9b 83       	std	Y+3, r25	; 0x03
    3562:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8REturnType =STD_OK;
    3564:	19 82       	std	Y+1, r1	; 0x01
	if(Pfun!=NULL)
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	9b 81       	ldd	r25, Y+3	; 0x03
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	71 f0       	breq	.+28     	; 0x358a <UART_ReceiveByteAsyncCallBack+0x36>
	{
		/*set callback*/
		UARTPfun = Pfun;
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	90 93 f7 00 	sts	0x00F7, r25
    3576:	80 93 f6 00 	sts	0x00F6, r24
		/*enable receive int*/
		SET_BIT(UCSRB_REG,RXCIE_BIT);
    357a:	aa e2       	ldi	r26, 0x2A	; 42
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	ea e2       	ldi	r30, 0x2A	; 42
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	80 68       	ori	r24, 0x80	; 128
    3586:	8c 93       	st	X, r24
    3588:	02 c0       	rjmp	.+4      	; 0x358e <UART_ReceiveByteAsyncCallBack+0x3a>
	}
	else 
	{
		local_u8REturnType =STD_NOK;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8REturnType;
    358e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <__vector_13>:

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    359c:	1f 92       	push	r1
    359e:	0f 92       	push	r0
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	0f 92       	push	r0
    35a4:	11 24       	eor	r1, r1
    35a6:	2f 93       	push	r18
    35a8:	3f 93       	push	r19
    35aa:	4f 93       	push	r20
    35ac:	5f 93       	push	r21
    35ae:	6f 93       	push	r22
    35b0:	7f 93       	push	r23
    35b2:	8f 93       	push	r24
    35b4:	9f 93       	push	r25
    35b6:	af 93       	push	r26
    35b8:	bf 93       	push	r27
    35ba:	ef 93       	push	r30
    35bc:	ff 93       	push	r31
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    UARTPfun(UDR_REG);
    35c6:	e0 91 f6 00 	lds	r30, 0x00F6
    35ca:	f0 91 f7 00 	lds	r31, 0x00F7
    35ce:	ac e2       	ldi	r26, 0x2C	; 44
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	8c 91       	ld	r24, X
    35d4:	09 95       	icall
}
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	ff 91       	pop	r31
    35dc:	ef 91       	pop	r30
    35de:	bf 91       	pop	r27
    35e0:	af 91       	pop	r26
    35e2:	9f 91       	pop	r25
    35e4:	8f 91       	pop	r24
    35e6:	7f 91       	pop	r23
    35e8:	6f 91       	pop	r22
    35ea:	5f 91       	pop	r21
    35ec:	4f 91       	pop	r20
    35ee:	3f 91       	pop	r19
    35f0:	2f 91       	pop	r18
    35f2:	0f 90       	pop	r0
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	0f 90       	pop	r0
    35f8:	1f 90       	pop	r1
    35fa:	18 95       	reti

000035fc <setup>:
#include "main.h"

void setup (void)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    H_Lcd_Void_LCDInit();
    3604:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <H_Lcd_Void_LCDInit>
    H_LED_Void_LedInit(LED_GRN);
    3608:	83 e0       	ldi	r24, 0x03	; 3
    360a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_YEL);
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	0e 94 7f 14 	call	0x28fe	; 0x28fe <H_LED_Void_LedInit>
    FP_intit();
    3614:	0e 94 42 0a 	call	0x1484	; 0x1484 <FP_intit>
    H_PushButton_Void_PushButtonInit(PUSH_BUTTON_0);
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <H_PushButton_Void_PushButtonInit>
    H_PushButton_Void_PushButtonInit(PUSH_BUTTON_1);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <H_PushButton_Void_PushButtonInit>
    H_Lcd_Void_LCDGoTo(2,0);
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("********************");
    362c:	8c e9       	ldi	r24, 0x9C	; 156
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(3,0);
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("1:ADD   2:Match");
    363c:	81 eb       	ldi	r24, 0xB1	; 177
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>


    
}
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <main>:

int main(void)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	00 d0       	rcall	.+0      	; 0x3650 <main+0x6>
    3650:	0f 92       	push	r0
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
	setup();
    3656:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <setup>
    u8 local_FPIndex =1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8Flag =0;
    365e:	1a 82       	std	Y+2, r1	; 0x02

    while(1)
    {
		if((H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0)==PUSH_BUTTON_PRESSED)&&(local_FPIndex<15))
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <H_PushButton_U8_PushButtonRead>
    3666:	88 23       	and	r24, r24
    3668:	61 f4       	brne	.+24     	; 0x3682 <main+0x38>
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	8f 30       	cpi	r24, 0x0F	; 15
    366e:	48 f4       	brcc	.+18     	; 0x3682 <main+0x38>
		{
            FP_setNewFinger(local_FPIndex);
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <FP_setNewFinger>
            local_FPIndex++;
    367a:	8b 81       	ldd	r24, Y+3	; 0x03
    367c:	8f 5f       	subi	r24, 0xFF	; 255
    367e:	8b 83       	std	Y+3, r24	; 0x03
    3680:	ef cf       	rjmp	.-34     	; 0x3660 <main+0x16>
        }
		else if(H_PushButton_U8_PushButtonRead(PUSH_BUTTON_1)==PUSH_BUTTON_PRESSED)
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <H_PushButton_U8_PushButtonRead>
    3688:	88 23       	and	r24, r24
    368a:	51 f7       	brne	.-44     	; 0x3660 <main+0x16>
		{
            for(u8 i = 1;i<=local_FPIndex;i++)
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	16 c0       	rjmp	.+44     	; 0x36be <main+0x74>
            {
                if(FP_CheckMatch(i))
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <FP_CheckMatch>
    369c:	88 23       	and	r24, r24
    369e:	59 f0       	breq	.+22     	; 0x36b6 <main+0x6c>
                {
                    H_Lcd_Void_LCDGoTo(0,0);
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
                    H_Lcd_Void_LCDWriteString("    Matched  *_^    ");
    36a8:	81 ec       	ldi	r24, 0xC1	; 193
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
                    local_u8Flag = 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	8a 83       	std	Y+2, r24	; 0x02
    36b4:	08 c0       	rjmp	.+16     	; 0x36c6 <main+0x7c>
                    break;
                }
                else 
                {
                	local_u8Flag = 0;
    36b6:	1a 82       	std	Y+2, r1	; 0x02
            FP_setNewFinger(local_FPIndex);
            local_FPIndex++;
        }
		else if(H_PushButton_U8_PushButtonRead(PUSH_BUTTON_1)==PUSH_BUTTON_PRESSED)
		{
            for(u8 i = 1;i<=local_FPIndex;i++)
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	8f 5f       	subi	r24, 0xFF	; 255
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	99 81       	ldd	r25, Y+1	; 0x01
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	89 17       	cp	r24, r25
    36c4:	30 f7       	brcc	.-52     	; 0x3692 <main+0x48>
                	local_u8Flag = 0;
                    //H_Lcd_Void_LCDGoTo(0,0);
                    //H_Lcd_Void_LCDWriteString(" Not  Matched  -_-  ");
                }
            }
            if(local_u8Flag == 0)
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	88 23       	and	r24, r24
    36ca:	51 f6       	brne	.-108    	; 0x3660 <main+0x16>
            {
                H_Lcd_Void_LCDGoTo(0,0);
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <H_Lcd_Void_LCDGoTo>
                H_Lcd_Void_LCDWriteString(" Not  Matched  -_- ");
    36d4:	86 ed       	ldi	r24, 0xD6	; 214
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 9b 13 	call	0x2736	; 0x2736 <H_Lcd_Void_LCDWriteString>
    36dc:	c1 cf       	rjmp	.-126    	; 0x3660 <main+0x16>

000036de <__udivmodqi4>:
    36de:	99 1b       	sub	r25, r25
    36e0:	79 e0       	ldi	r23, 0x09	; 9
    36e2:	04 c0       	rjmp	.+8      	; 0x36ec <__udivmodqi4_ep>

000036e4 <__udivmodqi4_loop>:
    36e4:	99 1f       	adc	r25, r25
    36e6:	96 17       	cp	r25, r22
    36e8:	08 f0       	brcs	.+2      	; 0x36ec <__udivmodqi4_ep>
    36ea:	96 1b       	sub	r25, r22

000036ec <__udivmodqi4_ep>:
    36ec:	88 1f       	adc	r24, r24
    36ee:	7a 95       	dec	r23
    36f0:	c9 f7       	brne	.-14     	; 0x36e4 <__udivmodqi4_loop>
    36f2:	80 95       	com	r24
    36f4:	08 95       	ret

000036f6 <__divmodsi4>:
    36f6:	97 fb       	bst	r25, 7
    36f8:	09 2e       	mov	r0, r25
    36fa:	05 26       	eor	r0, r21
    36fc:	0e d0       	rcall	.+28     	; 0x371a <__divmodsi4_neg1>
    36fe:	57 fd       	sbrc	r21, 7
    3700:	04 d0       	rcall	.+8      	; 0x370a <__divmodsi4_neg2>
    3702:	14 d0       	rcall	.+40     	; 0x372c <__udivmodsi4>
    3704:	0a d0       	rcall	.+20     	; 0x371a <__divmodsi4_neg1>
    3706:	00 1c       	adc	r0, r0
    3708:	38 f4       	brcc	.+14     	; 0x3718 <__divmodsi4_exit>

0000370a <__divmodsi4_neg2>:
    370a:	50 95       	com	r21
    370c:	40 95       	com	r20
    370e:	30 95       	com	r19
    3710:	21 95       	neg	r18
    3712:	3f 4f       	sbci	r19, 0xFF	; 255
    3714:	4f 4f       	sbci	r20, 0xFF	; 255
    3716:	5f 4f       	sbci	r21, 0xFF	; 255

00003718 <__divmodsi4_exit>:
    3718:	08 95       	ret

0000371a <__divmodsi4_neg1>:
    371a:	f6 f7       	brtc	.-4      	; 0x3718 <__divmodsi4_exit>
    371c:	90 95       	com	r25
    371e:	80 95       	com	r24
    3720:	70 95       	com	r23
    3722:	61 95       	neg	r22
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	8f 4f       	sbci	r24, 0xFF	; 255
    3728:	9f 4f       	sbci	r25, 0xFF	; 255
    372a:	08 95       	ret

0000372c <__udivmodsi4>:
    372c:	a1 e2       	ldi	r26, 0x21	; 33
    372e:	1a 2e       	mov	r1, r26
    3730:	aa 1b       	sub	r26, r26
    3732:	bb 1b       	sub	r27, r27
    3734:	fd 01       	movw	r30, r26
    3736:	0d c0       	rjmp	.+26     	; 0x3752 <__udivmodsi4_ep>

00003738 <__udivmodsi4_loop>:
    3738:	aa 1f       	adc	r26, r26
    373a:	bb 1f       	adc	r27, r27
    373c:	ee 1f       	adc	r30, r30
    373e:	ff 1f       	adc	r31, r31
    3740:	a2 17       	cp	r26, r18
    3742:	b3 07       	cpc	r27, r19
    3744:	e4 07       	cpc	r30, r20
    3746:	f5 07       	cpc	r31, r21
    3748:	20 f0       	brcs	.+8      	; 0x3752 <__udivmodsi4_ep>
    374a:	a2 1b       	sub	r26, r18
    374c:	b3 0b       	sbc	r27, r19
    374e:	e4 0b       	sbc	r30, r20
    3750:	f5 0b       	sbc	r31, r21

00003752 <__udivmodsi4_ep>:
    3752:	66 1f       	adc	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	88 1f       	adc	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	1a 94       	dec	r1
    375c:	69 f7       	brne	.-38     	; 0x3738 <__udivmodsi4_loop>
    375e:	60 95       	com	r22
    3760:	70 95       	com	r23
    3762:	80 95       	com	r24
    3764:	90 95       	com	r25
    3766:	9b 01       	movw	r18, r22
    3768:	ac 01       	movw	r20, r24
    376a:	bd 01       	movw	r22, r26
    376c:	cf 01       	movw	r24, r30
    376e:	08 95       	ret

00003770 <__prologue_saves__>:
    3770:	2f 92       	push	r2
    3772:	3f 92       	push	r3
    3774:	4f 92       	push	r4
    3776:	5f 92       	push	r5
    3778:	6f 92       	push	r6
    377a:	7f 92       	push	r7
    377c:	8f 92       	push	r8
    377e:	9f 92       	push	r9
    3780:	af 92       	push	r10
    3782:	bf 92       	push	r11
    3784:	cf 92       	push	r12
    3786:	df 92       	push	r13
    3788:	ef 92       	push	r14
    378a:	ff 92       	push	r15
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	ca 1b       	sub	r28, r26
    379a:	db 0b       	sbc	r29, r27
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	09 94       	ijmp

000037a8 <__epilogue_restores__>:
    37a8:	2a 88       	ldd	r2, Y+18	; 0x12
    37aa:	39 88       	ldd	r3, Y+17	; 0x11
    37ac:	48 88       	ldd	r4, Y+16	; 0x10
    37ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    37b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    37b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    37b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    37b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    37b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    37ba:	b9 84       	ldd	r11, Y+9	; 0x09
    37bc:	c8 84       	ldd	r12, Y+8	; 0x08
    37be:	df 80       	ldd	r13, Y+7	; 0x07
    37c0:	ee 80       	ldd	r14, Y+6	; 0x06
    37c2:	fd 80       	ldd	r15, Y+5	; 0x05
    37c4:	0c 81       	ldd	r16, Y+4	; 0x04
    37c6:	1b 81       	ldd	r17, Y+3	; 0x03
    37c8:	aa 81       	ldd	r26, Y+2	; 0x02
    37ca:	b9 81       	ldd	r27, Y+1	; 0x01
    37cc:	ce 0f       	add	r28, r30
    37ce:	d1 1d       	adc	r29, r1
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	ed 01       	movw	r28, r26
    37dc:	08 95       	ret

000037de <_exit>:
    37de:	f8 94       	cli

000037e0 <__stop_program>:
    37e0:	ff cf       	rjmp	.-2      	; 0x37e0 <__stop_program>
