
FingerPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00003108  0000319c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  008000b4  008000b4  000031f0  2**0
                  ALLOC
  3 .stab         00002f58  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001168  00000000  00000000  00006148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <main>
      8a:	0c 94 82 18 	jmp	0x3104	; 0x3104 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9a e0       	ldi	r25, 0x0A	; 10
     b62:	69 2f       	mov	r22, r25
     b64:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     b68:	89 2f       	mov	r24, r25
     b6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9a e0       	ldi	r25, 0x0A	; 10
     b70:	69 2f       	mov	r22, r25
     b72:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     b76:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3a 87       	std	Y+10, r19	; 0x0a
     b80:	29 87       	std	Y+9, r18	; 0x09
     b82:	89 85       	ldd	r24, Y+9	; 0x09
     b84:	9a 85       	ldd	r25, Y+10	; 0x0a
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	39 f0       	breq	.+14     	; 0xb98 <M_DIO_Void_SetPinDirection+0x52>
     b8a:	29 85       	ldd	r18, Y+9	; 0x09
     b8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b8e:	21 30       	cpi	r18, 0x01	; 1
     b90:	31 05       	cpc	r19, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <M_DIO_Void_SetPinDirection+0x50>
     b94:	76 c0       	rjmp	.+236    	; 0xc82 <M_DIO_Void_SetPinDirection+0x13c>
     b96:	e4 c0       	rjmp	.+456    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	38 87       	std	Y+8, r19	; 0x08
     ba0:	2f 83       	std	Y+7, r18	; 0x07
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	98 85       	ldd	r25, Y+8	; 0x08
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	61 f1       	breq	.+88     	; 0xc04 <M_DIO_Void_SetPinDirection+0xbe>
     bac:	2f 81       	ldd	r18, Y+7	; 0x07
     bae:	38 85       	ldd	r19, Y+8	; 0x08
     bb0:	23 30       	cpi	r18, 0x03	; 3
     bb2:	31 05       	cpc	r19, r1
     bb4:	34 f4       	brge	.+12     	; 0xbc2 <M_DIO_Void_SetPinDirection+0x7c>
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	91 05       	cpc	r25, r1
     bbe:	69 f0       	breq	.+26     	; 0xbda <M_DIO_Void_SetPinDirection+0x94>
     bc0:	cf c0       	rjmp	.+414    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
     bc2:	2f 81       	ldd	r18, Y+7	; 0x07
     bc4:	38 85       	ldd	r19, Y+8	; 0x08
     bc6:	23 30       	cpi	r18, 0x03	; 3
     bc8:	31 05       	cpc	r19, r1
     bca:	89 f1       	breq	.+98     	; 0xc2e <M_DIO_Void_SetPinDirection+0xe8>
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <M_DIO_Void_SetPinDirection+0x92>
     bd6:	40 c0       	rjmp	.+128    	; 0xc58 <M_DIO_Void_SetPinDirection+0x112>
     bd8:	c3 c0       	rjmp	.+390    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <M_DIO_Void_SetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <M_DIO_Void_SetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	ae c0       	rjmp	.+348    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     c04:	a7 e3       	ldi	r26, 0x37	; 55
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <M_DIO_Void_SetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <M_DIO_Void_SetPinDirection+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	99 c0       	rjmp	.+306    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     c2e:	a4 e3       	ldi	r26, 0x34	; 52
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e4 e3       	ldi	r30, 0x34	; 52
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <M_DIO_Void_SetPinDirection+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <M_DIO_Void_SetPinDirection+0x102>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	84 c0       	rjmp	.+264    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     c58:	a1 e3       	ldi	r26, 0x31	; 49
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e1 e3       	ldi	r30, 0x31	; 49
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <M_DIO_Void_SetPinDirection+0x130>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <M_DIO_Void_SetPinDirection+0x12c>
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	6f c0       	rjmp	.+222    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Group)
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	3e 83       	std	Y+6, r19	; 0x06
     c8a:	2d 83       	std	Y+5, r18	; 0x05
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	91 05       	cpc	r25, r1
     c94:	51 f1       	breq	.+84     	; 0xcea <M_DIO_Void_SetPinDirection+0x1a4>
     c96:	2d 81       	ldd	r18, Y+5	; 0x05
     c98:	3e 81       	ldd	r19, Y+6	; 0x06
     c9a:	23 30       	cpi	r18, 0x03	; 3
     c9c:	31 05       	cpc	r19, r1
     c9e:	34 f4       	brge	.+12     	; 0xcac <M_DIO_Void_SetPinDirection+0x166>
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	61 f0       	breq	.+24     	; 0xcc2 <M_DIO_Void_SetPinDirection+0x17c>
     caa:	5a c0       	rjmp	.+180    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
     cac:	2d 81       	ldd	r18, Y+5	; 0x05
     cae:	3e 81       	ldd	r19, Y+6	; 0x06
     cb0:	23 30       	cpi	r18, 0x03	; 3
     cb2:	31 05       	cpc	r19, r1
     cb4:	71 f1       	breq	.+92     	; 0xd12 <M_DIO_Void_SetPinDirection+0x1cc>
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	91 05       	cpc	r25, r1
     cbe:	e9 f1       	breq	.+122    	; 0xd3a <M_DIO_Void_SetPinDirection+0x1f4>
     cc0:	4f c0       	rjmp	.+158    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <M_DIO_Void_SetPinDirection+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <M_DIO_Void_SetPinDirection+0x196>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	3b c0       	rjmp	.+118    	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
     cea:	a7 e3       	ldi	r26, 0x37	; 55
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e3       	ldi	r30, 0x37	; 55
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <M_DIO_Void_SetPinDirection+0x1c2>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <M_DIO_Void_SetPinDirection+0x1be>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <M_DIO_Void_SetPinDirection+0x1ea>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <M_DIO_Void_SetPinDirection+0x1e6>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	13 c0       	rjmp	.+38     	; 0xd60 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
     d3a:	a1 e3       	ldi	r26, 0x31	; 49
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <M_DIO_Void_SetPinDirection+0x212>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <M_DIO_Void_SetPinDirection+0x20e>
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
		default:                                break;
		}
		break;
	default:    break;
	}
}
     d60:	2a 96       	adiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2a 97       	sbiw	r28, 0x0a	; 10
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9a e0       	ldi	r25, 0x0A	; 10
     d8e:	69 2f       	mov	r22, r25
     d90:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     d94:	89 2f       	mov	r24, r25
     d96:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9a e0       	ldi	r25, 0x0A	; 10
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     da2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3a 87       	std	Y+10, r19	; 0x0a
     dac:	29 87       	std	Y+9, r18	; 0x09
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	39 f0       	breq	.+14     	; 0xdc4 <M_DIO_Void_SetPinValue+0x52>
     db6:	29 85       	ldd	r18, Y+9	; 0x09
     db8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dba:	21 30       	cpi	r18, 0x01	; 1
     dbc:	31 05       	cpc	r19, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <M_DIO_Void_SetPinValue+0x50>
     dc0:	76 c0       	rjmp	.+236    	; 0xeae <M_DIO_Void_SetPinValue+0x13c>
     dc2:	e4 c0       	rjmp	.+456    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	38 87       	std	Y+8, r19	; 0x08
     dcc:	2f 83       	std	Y+7, r18	; 0x07
     dce:	8f 81       	ldd	r24, Y+7	; 0x07
     dd0:	98 85       	ldd	r25, Y+8	; 0x08
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	91 05       	cpc	r25, r1
     dd6:	61 f1       	breq	.+88     	; 0xe30 <M_DIO_Void_SetPinValue+0xbe>
     dd8:	2f 81       	ldd	r18, Y+7	; 0x07
     dda:	38 85       	ldd	r19, Y+8	; 0x08
     ddc:	23 30       	cpi	r18, 0x03	; 3
     dde:	31 05       	cpc	r19, r1
     de0:	34 f4       	brge	.+12     	; 0xdee <M_DIO_Void_SetPinValue+0x7c>
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 85       	ldd	r25, Y+8	; 0x08
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	91 05       	cpc	r25, r1
     dea:	69 f0       	breq	.+26     	; 0xe06 <M_DIO_Void_SetPinValue+0x94>
     dec:	cf c0       	rjmp	.+414    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
     dee:	2f 81       	ldd	r18, Y+7	; 0x07
     df0:	38 85       	ldd	r19, Y+8	; 0x08
     df2:	23 30       	cpi	r18, 0x03	; 3
     df4:	31 05       	cpc	r19, r1
     df6:	89 f1       	breq	.+98     	; 0xe5a <M_DIO_Void_SetPinValue+0xe8>
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <M_DIO_Void_SetPinValue+0x92>
     e02:	40 c0       	rjmp	.+128    	; 0xe84 <M_DIO_Void_SetPinValue+0x112>
     e04:	c3 c0       	rjmp	.+390    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
     e06:	ab e3       	ldi	r26, 0x3B	; 59
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	eb e3       	ldi	r30, 0x3B	; 59
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <M_DIO_Void_SetPinValue+0xb2>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <M_DIO_Void_SetPinValue+0xae>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	ae c0       	rjmp	.+348    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
     e30:	a8 e3       	ldi	r26, 0x38	; 56
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e8 e3       	ldi	r30, 0x38	; 56
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <M_DIO_Void_SetPinValue+0xdc>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <M_DIO_Void_SetPinValue+0xd8>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	99 c0       	rjmp	.+306    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <M_DIO_Void_SetPinValue+0x106>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <M_DIO_Void_SetPinValue+0x102>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	84 c0       	rjmp	.+264    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
     e84:	a2 e3       	ldi	r26, 0x32	; 50
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e2 e3       	ldi	r30, 0x32	; 50
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <M_DIO_Void_SetPinValue+0x130>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <M_DIO_Void_SetPinValue+0x12c>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	6f c0       	rjmp	.+222    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Group)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3e 83       	std	Y+6, r19	; 0x06
     eb6:	2d 83       	std	Y+5, r18	; 0x05
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	51 f1       	breq	.+84     	; 0xf16 <M_DIO_Void_SetPinValue+0x1a4>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	23 30       	cpi	r18, 0x03	; 3
     ec8:	31 05       	cpc	r19, r1
     eca:	34 f4       	brge	.+12     	; 0xed8 <M_DIO_Void_SetPinValue+0x166>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	61 f0       	breq	.+24     	; 0xeee <M_DIO_Void_SetPinValue+0x17c>
     ed6:	5a c0       	rjmp	.+180    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
     ed8:	2d 81       	ldd	r18, Y+5	; 0x05
     eda:	3e 81       	ldd	r19, Y+6	; 0x06
     edc:	23 30       	cpi	r18, 0x03	; 3
     ede:	31 05       	cpc	r19, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <M_DIO_Void_SetPinValue+0x1cc>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	91 05       	cpc	r25, r1
     eea:	e9 f1       	breq	.+122    	; 0xf66 <M_DIO_Void_SetPinValue+0x1f4>
     eec:	4f c0       	rjmp	.+158    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <M_DIO_Void_SetPinValue+0x19a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <M_DIO_Void_SetPinValue+0x196>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	3b c0       	rjmp	.+118    	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
     f16:	a8 e3       	ldi	r26, 0x38	; 56
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e8 e3       	ldi	r30, 0x38	; 56
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <M_DIO_Void_SetPinValue+0x1c2>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <M_DIO_Void_SetPinValue+0x1be>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	27 c0       	rjmp	.+78     	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
     f3e:	a5 e3       	ldi	r26, 0x35	; 53
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e3       	ldi	r30, 0x35	; 53
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <M_DIO_Void_SetPinValue+0x1ea>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <M_DIO_Void_SetPinValue+0x1e6>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <M_DIO_Void_SetPinValue+0x212>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <M_DIO_Void_SetPinValue+0x20e>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
     f8c:	2a 96       	adiw	r28, 0x0a	; 10
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <M_DIO_Void_GetPinValue+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <M_DIO_Void_GetPinValue+0x8>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <M_DIO_Void_GetPinValue+0xa>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9a e0       	ldi	r25, 0x0A	; 10
     fb2:	69 2f       	mov	r22, r25
     fb4:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     fb8:	89 2f       	mov	r24, r25
     fba:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9a e0       	ldi	r25, 0x0A	; 10
     fc0:	69 2f       	mov	r22, r25
     fc2:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
     fc8:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	4d 81       	ldd	r20, Y+5	; 0x05
     fd6:	5e 81       	ldd	r21, Y+6	; 0x06
     fd8:	42 30       	cpi	r20, 0x02	; 2
     fda:	51 05       	cpc	r21, r1
     fdc:	41 f1       	breq	.+80     	; 0x102e <M_DIO_Void_GetPinValue+0x90>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	34 f4       	brge	.+12     	; 0xff4 <M_DIO_Void_GetPinValue+0x56>
     fe8:	2d 81       	ldd	r18, Y+5	; 0x05
     fea:	3e 81       	ldd	r19, Y+6	; 0x06
     fec:	21 30       	cpi	r18, 0x01	; 1
     fee:	31 05       	cpc	r19, r1
     ff0:	61 f0       	breq	.+24     	; 0x100a <M_DIO_Void_GetPinValue+0x6c>
     ff2:	52 c0       	rjmp	.+164    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
     ff4:	4d 81       	ldd	r20, Y+5	; 0x05
     ff6:	5e 81       	ldd	r21, Y+6	; 0x06
     ff8:	43 30       	cpi	r20, 0x03	; 3
     ffa:	51 05       	cpc	r21, r1
     ffc:	51 f1       	breq	.+84     	; 0x1052 <M_DIO_Void_GetPinValue+0xb4>
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	91 05       	cpc	r25, r1
    1006:	b9 f1       	breq	.+110    	; 0x1076 <M_DIO_Void_GetPinValue+0xd8>
    1008:	47 c0       	rjmp	.+142    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    100a:	e9 e3       	ldi	r30, 0x39	; 57
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <M_DIO_Void_GetPinValue+0x84>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <M_DIO_Void_GetPinValue+0x80>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	35 c0       	rjmp	.+106    	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    102e:	e6 e3       	ldi	r30, 0x36	; 54
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <M_DIO_Void_GetPinValue+0xa8>
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <M_DIO_Void_GetPinValue+0xa4>
    104a:	ca 01       	movw	r24, r20
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	23 c0       	rjmp	.+70     	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1052:	e3 e3       	ldi	r30, 0x33	; 51
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <M_DIO_Void_GetPinValue+0xcc>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <M_DIO_Void_GetPinValue+0xc8>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	11 c0       	rjmp	.+34     	; 0x1098 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1076:	e0 e3       	ldi	r30, 0x30	; 48
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <M_DIO_Void_GetPinValue+0xf0>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <M_DIO_Void_GetPinValue+0xec>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
}
    109a:	26 96       	adiw	r28, 0x06	; 6
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <M_DIO_Void_TogPin+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <M_DIO_Void_TogPin+0x8>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9a e0       	ldi	r25, 0x0A	; 10
    10c0:	69 2f       	mov	r22, r25
    10c2:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
    10c6:	89 2f       	mov	r24, r25
    10c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9a e0       	ldi	r25, 0x0A	; 10
    10ce:	69 2f       	mov	r22, r25
    10d0:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
    10d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	51 f1       	breq	.+84     	; 0x113e <M_DIO_Void_TogPin+0x92>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	23 30       	cpi	r18, 0x03	; 3
    10f0:	31 05       	cpc	r19, r1
    10f2:	34 f4       	brge	.+12     	; 0x1100 <M_DIO_Void_TogPin+0x54>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	61 f0       	breq	.+24     	; 0x1116 <M_DIO_Void_TogPin+0x6a>
    10fe:	5a c0       	rjmp	.+180    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	23 30       	cpi	r18, 0x03	; 3
    1106:	31 05       	cpc	r19, r1
    1108:	71 f1       	breq	.+92     	; 0x1166 <M_DIO_Void_TogPin+0xba>
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	91 05       	cpc	r25, r1
    1112:	e9 f1       	breq	.+122    	; 0x118e <M_DIO_Void_TogPin+0xe2>
    1114:	4f c0       	rjmp	.+158    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1116:	ab e3       	ldi	r26, 0x3B	; 59
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <M_DIO_Void_TogPin+0x88>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <M_DIO_Void_TogPin+0x84>
    1138:	84 27       	eor	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	3b c0       	rjmp	.+118    	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <M_DIO_Void_TogPin+0xb0>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <M_DIO_Void_TogPin+0xac>
    1160:	84 27       	eor	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1166:	a5 e3       	ldi	r26, 0x35	; 53
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <M_DIO_Void_TogPin+0xd8>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <M_DIO_Void_TogPin+0xd4>
    1188:	84 27       	eor	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	13 c0       	rjmp	.+38     	; 0x11b4 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <M_DIO_Void_TogPin+0x100>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <M_DIO_Void_TogPin+0xfc>
    11b0:	84 27       	eor	r24, r20
    11b2:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2a 97       	sbiw	r28, 0x0a	; 10
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9a e0       	ldi	r25, 0x0A	; 10
    11e0:	69 2f       	mov	r22, r25
    11e2:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
    11e6:	89 2f       	mov	r24, r25
    11e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	69 2f       	mov	r22, r25
    11f0:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodqi4>
    11f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3a 87       	std	Y+10, r19	; 0x0a
    11fe:	29 87       	std	Y+9, r18	; 0x09
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	39 f0       	breq	.+14     	; 0x1216 <M_DIO_Void_SetPinPullUpRes+0x52>
    1208:	29 85       	ldd	r18, Y+9	; 0x09
    120a:	3a 85       	ldd	r19, Y+10	; 0x0a
    120c:	21 30       	cpi	r18, 0x01	; 1
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <M_DIO_Void_SetPinPullUpRes+0x50>
    1212:	76 c0       	rjmp	.+236    	; 0x1300 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1214:	e4 c0       	rjmp	.+456    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	38 87       	std	Y+8, r19	; 0x08
    121e:	2f 83       	std	Y+7, r18	; 0x07
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	61 f1       	breq	.+88     	; 0x1282 <M_DIO_Void_SetPinPullUpRes+0xbe>
    122a:	2f 81       	ldd	r18, Y+7	; 0x07
    122c:	38 85       	ldd	r19, Y+8	; 0x08
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	69 f0       	breq	.+26     	; 0x1258 <M_DIO_Void_SetPinPullUpRes+0x94>
    123e:	cf c0       	rjmp	.+414    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
    1240:	2f 81       	ldd	r18, Y+7	; 0x07
    1242:	38 85       	ldd	r19, Y+8	; 0x08
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	89 f1       	breq	.+98     	; 0x12ac <M_DIO_Void_SetPinPullUpRes+0xe8>
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <M_DIO_Void_SetPinPullUpRes+0x92>
    1254:	40 c0       	rjmp	.+128    	; 0x12d6 <M_DIO_Void_SetPinPullUpRes+0x112>
    1256:	c3 c0       	rjmp	.+390    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1258:	ab e3       	ldi	r26, 0x3B	; 59
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <M_DIO_Void_SetPinPullUpRes+0xae>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	ae c0       	rjmp	.+348    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <M_DIO_Void_SetPinPullUpRes+0xdc>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <M_DIO_Void_SetPinPullUpRes+0xd8>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	99 c0       	rjmp	.+306    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <M_DIO_Void_SetPinPullUpRes+0x106>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <M_DIO_Void_SetPinPullUpRes+0x102>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	84 c0       	rjmp	.+264    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <M_DIO_Void_SetPinPullUpRes+0x130>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <M_DIO_Void_SetPinPullUpRes+0x12c>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	6f c0       	rjmp	.+222    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Group)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	91 05       	cpc	r25, r1
    1312:	51 f1       	breq	.+84     	; 0x1368 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	23 30       	cpi	r18, 0x03	; 3
    131a:	31 05       	cpc	r19, r1
    131c:	34 f4       	brge	.+12     	; 0x132a <M_DIO_Void_SetPinPullUpRes+0x166>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	61 f0       	breq	.+24     	; 0x1340 <M_DIO_Void_SetPinPullUpRes+0x17c>
    1328:	5a c0       	rjmp	.+180    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
    132a:	2d 81       	ldd	r18, Y+5	; 0x05
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	23 30       	cpi	r18, 0x03	; 3
    1330:	31 05       	cpc	r19, r1
    1332:	71 f1       	breq	.+92     	; 0x1390 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	91 05       	cpc	r25, r1
    133c:	e9 f1       	breq	.+122    	; 0x13b8 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    133e:	4f c0       	rjmp	.+158    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <M_DIO_Void_SetPinPullUpRes+0x19a>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <M_DIO_Void_SetPinPullUpRes+0x196>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	3b c0       	rjmp	.+118    	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <M_DIO_Void_SetPinPullUpRes+0x1be>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	27 c0       	rjmp	.+78     	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1390:	a5 e3       	ldi	r26, 0x35	; 53
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <M_DIO_Void_SetPinPullUpRes+0x1ea>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <M_DIO_Void_SetPinPullUpRes+0x1e6>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <M_DIO_Void_SetPinPullUpRes+0x212>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <M_DIO_Void_SetPinPullUpRes+0x20e>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    13de:	2a 96       	adiw	r28, 0x0a	; 10
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <FP_checkintro>:

ERRORS_ FP_ERRORS;

/*CHECK INTRO*/
void FP_checkintro(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    /*reset all errors flags*/
    FP_ERRORS.ERR_all=0;
    13f8:	10 92 ba 00 	sts	0x00BA, r1
    /*check header:0,1*/
    if((App_u8UARTRecPack[0]!=0xEF) && (App_u8UARTRecPack[1]!=0x01))   
    13fc:	80 91 bb 00 	lds	r24, 0x00BB
    1400:	8f 3e       	cpi	r24, 0xEF	; 239
    1402:	49 f0       	breq	.+18     	; 0x1416 <FP_checkintro+0x26>
    1404:	80 91 bc 00 	lds	r24, 0x00BC
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	29 f0       	breq	.+10     	; 0x1416 <FP_checkintro+0x26>
        {FP_ERRORS.STR.ERR_header=1;}
    140c:	80 91 ba 00 	lds	r24, 0x00BA
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 93 ba 00 	sts	0x00BA, r24
    /*check add:2>>5*/
    if((App_u8UARTRecPack[2]!=0xFF) && (App_u8UARTRecPack[3]!=0xFF)&&(App_u8UARTRecPack[4]!=0xFF) && (App_u8UARTRecPack[5]!=0xFF))   
    1416:	80 91 bd 00 	lds	r24, 0x00BD
    141a:	8f 3f       	cpi	r24, 0xFF	; 255
    141c:	89 f0       	breq	.+34     	; 0x1440 <FP_checkintro+0x50>
    141e:	80 91 be 00 	lds	r24, 0x00BE
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	69 f0       	breq	.+26     	; 0x1440 <FP_checkintro+0x50>
    1426:	80 91 bf 00 	lds	r24, 0x00BF
    142a:	8f 3f       	cpi	r24, 0xFF	; 255
    142c:	49 f0       	breq	.+18     	; 0x1440 <FP_checkintro+0x50>
    142e:	80 91 c0 00 	lds	r24, 0x00C0
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	29 f0       	breq	.+10     	; 0x1440 <FP_checkintro+0x50>
        {FP_ERRORS.STR.ERR_add=1;}
    1436:	80 91 ba 00 	lds	r24, 0x00BA
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	80 93 ba 00 	sts	0x00BA, r24
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <UART_CallBackFunction>:

void UART_CallBackFunction (u8 Copy_u8UARTRecByte)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	0f 92       	push	r0
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
    if(ArrIndex<50)
    1452:	80 91 b4 00 	lds	r24, 0x00B4
    1456:	82 33       	cpi	r24, 0x32	; 50
    1458:	78 f4       	brcc	.+30     	; 0x1478 <UART_CallBackFunction+0x32>
    {
        App_u8UARTRecPack[ArrIndex] = Copy_u8UARTRecByte;
    145a:	80 91 b4 00 	lds	r24, 0x00B4
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	e5 54       	subi	r30, 0x45	; 69
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 83       	st	Z, r24
        /*FOR debugging*/
        //H_Lcd_Void_LCDWriteCharacter(App_u8UARTRecPack[ArrIndex]);
        ArrIndex++;
    146c:	80 91 b4 00 	lds	r24, 0x00B4
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 b4 00 	sts	0x00B4, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <UART_CallBackFunction+0x36>
    }
    else 
    {ArrIndex=0;}     
    1478:	10 92 b4 00 	sts	0x00B4, r1
}
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <FP_intit>:

void FP_intit(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	2e 97       	sbiw	r28, 0x0e	; 14
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    /*rx and tx i\o */
    M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
    1498:	89 e2       	ldi	r24, 0x29	; 41
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
    14a0:	88 e2       	ldi	r24, 0x28	; 40
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a8 e4       	ldi	r26, 0x48	; 72
    14ae:	b3 e4       	ldi	r27, 0x43	; 67
    14b0:	8b 87       	std	Y+11, r24	; 0x0b
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	ad 87       	std	Y+13, r26	; 0x0d
    14b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	55 e4       	ldi	r21, 0x45	; 69
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8f 83       	std	Y+7, r24	; 0x07
    14d2:	98 87       	std	Y+8, r25	; 0x08
    14d4:	a9 87       	std	Y+9, r26	; 0x09
    14d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <FP_intit+0x76>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <FP_intit+0xf4>
	else if (__tmp > 65535)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <FP_intit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	0f c0       	rjmp	.+30     	; 0x155a <FP_intit+0xd6>
    153c:	80 e9       	ldi	r24, 0x90	; 144
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <FP_intit+0xc4>
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <FP_intit+0xb8>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <FP_intit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6f 81       	ldd	r22, Y+7	; 0x07
    1566:	78 85       	ldd	r23, Y+8	; 0x08
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <FP_intit+0x100>
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
    UART_Init();
    158c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <UART_Init>
    /*receive*/
    GIE_voidEnable();
    1590:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GIE_voidEnable>
    UART_ReceiveByteAsyncCallBack(UART_CallBackFunction);
    1594:	83 e2       	ldi	r24, 0x23	; 35
    1596:	9a e0       	ldi	r25, 0x0A	; 10
    1598:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <UART_ReceiveByteAsyncCallBack>
}
    159c:	2e 96       	adiw	r28, 0x0e	; 14
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <FPSend>:
  
u8 FPSend(u8 copy_u8PID,u16 Copy_u16PackLength,u8* copy_Pu8Pack)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	2d 97       	sbiw	r28, 0x0d	; 13
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	8f 83       	std	Y+7, r24	; 0x07
    15c4:	79 87       	std	Y+9, r23	; 0x09
    15c6:	68 87       	std	Y+8, r22	; 0x08
    15c8:	5b 87       	std	Y+11, r21	; 0x0b
    15ca:	4a 87       	std	Y+10, r20	; 0x0a
    u8 local_u8RetuenState = STD_NOK;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8e 83       	std	Y+6, r24	; 0x06
    u16 Local_u16CS=0;
    15d0:	1d 82       	std	Y+5, r1	; 0x05
    15d2:	1c 82       	std	Y+4, r1	; 0x04
    u8 arraySize = Copy_u16PackLength-2;//pack length refer to array length + 2 bits check sum
    15d4:	88 85       	ldd	r24, Y+8	; 0x08
    15d6:	82 50       	subi	r24, 0x02	; 2
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    /*header*/
    UART_SendByte(0xEF);
    15da:	8f ee       	ldi	r24, 0xEF	; 239
    15dc:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte(0x01);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    /*add*/
    UART_SendByte(0xFF);
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte(0xFF);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte(0xFF);
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte(0xFF);
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    /*package identifier*/
    switch (copy_u8PID)
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3d 87       	std	Y+13, r19	; 0x0d
    1606:	2c 87       	std	Y+12, r18	; 0x0c
    1608:	8c 85       	ldd	r24, Y+12	; 0x0c
    160a:	9d 85       	ldd	r25, Y+13	; 0x0d
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 05       	cpc	r25, r1
    1610:	d1 f0       	breq	.+52     	; 0x1646 <FPSend+0x98>
    1612:	2c 85       	ldd	r18, Y+12	; 0x0c
    1614:	3d 85       	ldd	r19, Y+13	; 0x0d
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	31 05       	cpc	r19, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <FPSend+0x7a>
    161c:	8c 85       	ldd	r24, Y+12	; 0x0c
    161e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	61 f0       	breq	.+24     	; 0x163e <FPSend+0x90>
    1626:	1a c0       	rjmp	.+52     	; 0x165c <FPSend+0xae>
    1628:	2c 85       	ldd	r18, Y+12	; 0x0c
    162a:	3d 85       	ldd	r19, Y+13	; 0x0d
    162c:	27 30       	cpi	r18, 0x07	; 7
    162e:	31 05       	cpc	r19, r1
    1630:	71 f0       	breq	.+28     	; 0x164e <FPSend+0xa0>
    1632:	8c 85       	ldd	r24, Y+12	; 0x0c
    1634:	9d 85       	ldd	r25, Y+13	; 0x0d
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	91 05       	cpc	r25, r1
    163a:	69 f0       	breq	.+26     	; 0x1656 <FPSend+0xa8>
    163c:	0f c0       	rjmp	.+30     	; 0x165c <FPSend+0xae>
    {
    case CMND_PACK:UART_SendByte(CMND_PACK);   break;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    1644:	0b c0       	rjmp	.+22     	; 0x165c <FPSend+0xae>
    case DATA_PACK:UART_SendByte(DATA_PACK);   break;
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    164c:	07 c0       	rjmp	.+14     	; 0x165c <FPSend+0xae>
    case ACK_PACK :UART_SendByte(ACK_PACK);    break;
    164e:	87 e0       	ldi	r24, 0x07	; 7
    1650:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    1654:	03 c0       	rjmp	.+6      	; 0x165c <FPSend+0xae>
    case END_PACK :UART_SendByte(END_PACK);    break;
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    default:                                   break;
    }
    /*PACKAGE LENGTH*/
    UART_SendByte((u8)(Copy_u16PackLength>>8));
    165c:	88 85       	ldd	r24, Y+8	; 0x08
    165e:	99 85       	ldd	r25, Y+9	; 0x09
    1660:	89 2f       	mov	r24, r25
    1662:	99 27       	eor	r25, r25
    1664:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte((u8)Copy_u16PackLength);
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    /*package sending*/
    if ((copy_Pu8Pack != NULL)&&(Copy_u16PackLength<=256))
    166e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1670:	9b 85       	ldd	r25, Y+11	; 0x0b
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	89 f1       	breq	.+98     	; 0x16d8 <FPSend+0x12a>
    1676:	88 85       	ldd	r24, Y+8	; 0x08
    1678:	99 85       	ldd	r25, Y+9	; 0x09
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	92 07       	cpc	r25, r18
    1680:	58 f5       	brcc	.+86     	; 0x16d8 <FPSend+0x12a>
	{
		for(int i =0 ;i<arraySize;i++)
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	1f c0       	rjmp	.+62     	; 0x16c6 <FPSend+0x118>
		{
			UART_SendByte(copy_Pu8Pack[i]);
    1688:	29 81       	ldd	r18, Y+1	; 0x01
    168a:	3a 81       	ldd	r19, Y+2	; 0x02
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	fc 01       	movw	r30, r24
    1692:	e2 0f       	add	r30, r18
    1694:	f3 1f       	adc	r31, r19
    1696:	80 81       	ld	r24, Z
    1698:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
            Local_u16CS += copy_Pu8Pack[i];
    169c:	29 81       	ldd	r18, Y+1	; 0x01
    169e:	3a 81       	ldd	r19, Y+2	; 0x02
    16a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a4:	fc 01       	movw	r30, r24
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	80 81       	ld	r24, Z
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    UART_SendByte((u8)(Copy_u16PackLength>>8));
    UART_SendByte((u8)Copy_u16PackLength);
    /*package sending*/
    if ((copy_Pu8Pack != NULL)&&(Copy_u16PackLength<=256))
	{
		for(int i =0 ;i<arraySize;i++)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	82 17       	cp	r24, r18
    16d2:	93 07       	cpc	r25, r19
    16d4:	cc f2       	brlt	.-78     	; 0x1688 <FPSend+0xda>
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <FPSend+0x12e>
            Local_u16CS += copy_Pu8Pack[i];
		}
	}
	else
	{
		local_u8RetuenState = STD_NOK;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	8e 83       	std	Y+6, r24	; 0x06
	}
    /*CHECK SUM*/
    Local_u16CS +=(Copy_u16PackLength +(u16)copy_u8PID); 
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	88 85       	ldd	r24, Y+8	; 0x08
    16e4:	99 85       	ldd	r25, Y+9	; 0x09
    16e6:	28 0f       	add	r18, r24
    16e8:	39 1f       	adc	r19, r25
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	82 0f       	add	r24, r18
    16f0:	93 1f       	adc	r25, r19
    16f2:	9d 83       	std	Y+5, r25	; 0x05
    16f4:	8c 83       	std	Y+4, r24	; 0x04
    UART_SendByte((Local_u16CS>>8));
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	89 2f       	mov	r24, r25
    16fc:	99 27       	eor	r25, r25
    16fe:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    UART_SendByte(Local_u16CS);
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
    return local_u8RetuenState;
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
}
    170a:	2d 96       	adiw	r28, 0x0d	; 13
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <FPReceiveACK>:

void FPReceiveACK(u8 copy_u8code)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
    FP_checkintro();
    1728:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <FP_checkintro>
    /*check PID:6*/
    if(App_u8UARTRecPack[6]!=PID_ACK) 
    172c:	80 91 c1 00 	lds	r24, 0x00C1
    1730:	87 30       	cpi	r24, 0x07	; 7
    1732:	29 f0       	breq	.+10     	; 0x173e <FPReceiveACK+0x22>
        {FP_ERRORS.STR.ERR_PID =1;}
    1734:	80 91 ba 00 	lds	r24, 0x00BA
    1738:	84 60       	ori	r24, 0x04	; 4
    173a:	80 93 ba 00 	sts	0x00BA, r24
    /*check pack length:7,8*/
    if(App_u8UARTRecPack[8]!= 0x03) 
    173e:	80 91 c3 00 	lds	r24, 0x00C3
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	29 f0       	breq	.+10     	; 0x1750 <FPReceiveACK+0x34>
        {FP_ERRORS.STR.ERR_PL =1;}
    1746:	80 91 ba 00 	lds	r24, 0x00BA
    174a:	88 60       	ori	r24, 0x08	; 8
    174c:	80 93 ba 00 	sts	0x00BA, r24
    /*check ack:9*/
    if(App_u8UARTRecPack[9]!= copy_u8code) 
    1750:	90 91 c4 00 	lds	r25, 0x00C4
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	98 17       	cp	r25, r24
    1758:	29 f0       	breq	.+10     	; 0x1764 <FPReceiveACK+0x48>
        {FP_ERRORS.STR.ERR_pac =1;}
    175a:	80 91 ba 00 	lds	r24, 0x00BA
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	80 93 ba 00 	sts	0x00BA, r24
    /*CHECKSUM: 10,11*/ 
    if(0x0A !=App_u8UARTRecPack[11] )
    1764:	80 91 c6 00 	lds	r24, 0x00C6
    1768:	8a 30       	cpi	r24, 0x0A	; 10
    176a:	29 f0       	breq	.+10     	; 0x1776 <FPReceiveACK+0x5a>
         {FP_ERRORS.STR.ERR_CS =1;}
    176c:	80 91 ba 00 	lds	r24, 0x00BA
    1770:	80 62       	ori	r24, 0x20	; 32
    1772:	80 93 ba 00 	sts	0x00BA, r24
}
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <FingerPS_handShake>:

u8 FingerPS_handShake(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <FingerPS_handShake+0x6>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x40};
    1788:	80 e4       	ldi	r24, 0x40	; 64
    178a:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    178c:	19 82       	std	Y+1, r1	; 0x01

    /*send*/
    FPSend(PID_CMND,3,pack_content);
    178e:	9e 01       	movw	r18, r28
    1790:	2e 5f       	subi	r18, 0xFE	; 254
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	63 e0       	ldi	r22, 0x03	; 3
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    17a0:	80 91 b4 00 	lds	r24, 0x00B4
    17a4:	8c 30       	cpi	r24, 0x0C	; 12
    17a6:	e0 f3       	brcs	.-8      	; 0x17a0 <FingerPS_handShake+0x22>
    Completeflag =1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 b7 00 	sts	0x00B7, r24
    //test();
    FPReceiveACK(pack_ACK);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    17b4:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    17b8:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    17bc:	80 91 ba 00 	lds	r24, 0x00BA
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <FingerPS_genImg>:

u8 FingerPS_genImg(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <FingerPS_genImg+0x6>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x01};
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    17d8:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    17da:	9e 01       	movw	r18, r28
    17dc:	2e 5f       	subi	r18, 0xFE	; 254
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	63 e0       	ldi	r22, 0x03	; 3
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    17ec:	80 91 b4 00 	lds	r24, 0x00B4
    17f0:	8c 30       	cpi	r24, 0x0C	; 12
    17f2:	e0 f3       	brcs	.-8      	; 0x17ec <FingerPS_genImg+0x22>
    Completeflag =1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1800:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    1804:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    1808:	80 91 ba 00 	lds	r24, 0x00BA
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <FingerPS_genTemplate>:

u8 FingerPS_genTemplate(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <FingerPS_genTemplate+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x05};
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    1824:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    1826:	9e 01       	movw	r18, r28
    1828:	2e 5f       	subi	r18, 0xFE	; 254
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	63 e0       	ldi	r22, 0x03	; 3
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1838:	80 91 b4 00 	lds	r24, 0x00B4
    183c:	8c 30       	cpi	r24, 0x0C	; 12
    183e:	e0 f3       	brcs	.-8      	; 0x1838 <FingerPS_genTemplate+0x22>
    Completeflag =1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    184c:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    1850:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    1854:	80 91 ba 00 	lds	r24, 0x00BA
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <FingerPS_ConvertImg2CharFile>:

u8 FingerPS_ConvertImg2CharFile(u8 Copy_u8bufferID)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <FingerPS_ConvertImg2CharFile+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <FingerPS_ConvertImg2CharFile+0x8>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	8c 83       	std	Y+4, r24	; 0x04
    u8 pack_content[2] = {0x02,Copy_u8bufferID};
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    u8 pack_ACK = 0x00;
    1878:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,4,pack_content);
    187a:	9e 01       	movw	r18, r28
    187c:	2e 5f       	subi	r18, 0xFE	; 254
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    188c:	80 91 b4 00 	lds	r24, 0x00B4
    1890:	8c 30       	cpi	r24, 0x0C	; 12
    1892:	e0 f3       	brcs	.-8      	; 0x188c <FingerPS_ConvertImg2CharFile+0x2a>
    Completeflag =1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    18a0:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    18a4:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    18a8:	80 91 ba 00 	lds	r24, 0x00BA
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <FingerPS_LoadCharFile>:

u8 FingerPS_LoadCharFile(u8 Copy_u8bufferID,u16 Copy_u16PageID)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	28 97       	sbiw	r28, 0x08	; 8
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	78 87       	std	Y+8, r23	; 0x08
    18d2:	6f 83       	std	Y+7, r22	; 0x07
    u8 pack_content[4] = {0x07,Copy_u8bufferID,(u8)(Copy_u16PageID>>8),(u8)Copy_u16PageID};
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	89 2f       	mov	r24, r25
    18da:	99 27       	eor	r25, r25
    18dc:	98 2f       	mov	r25, r24
    18de:	2f 81       	ldd	r18, Y+7	; 0x07
    18e0:	87 e0       	ldi	r24, 0x07	; 7
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	2d 83       	std	Y+5, r18	; 0x05
    u8 pack_ACK = 0x00;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,6,pack_content);
    18ee:	9e 01       	movw	r18, r28
    18f0:	2e 5f       	subi	r18, 0xFE	; 254
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	66 e0       	ldi	r22, 0x06	; 6
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1900:	80 91 b4 00 	lds	r24, 0x00B4
    1904:	8c 30       	cpi	r24, 0x0C	; 12
    1906:	e0 f3       	brcs	.-8      	; 0x1900 <FingerPS_LoadCharFile+0x46>
    Completeflag =1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1914:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    1918:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    191c:	80 91 ba 00 	lds	r24, 0x00BA
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <FingerPS_StoreTemplate>:

u8 FingerPS_StoreTemplate(u8 Copy_u8bufferID,u16 Copy_u16PageID)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	28 97       	sbiw	r28, 0x08	; 8
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	8e 83       	std	Y+6, r24	; 0x06
    1948:	78 87       	std	Y+8, r23	; 0x08
    194a:	6f 83       	std	Y+7, r22	; 0x07
    u8 pack_content[4] = {0x06,Copy_u8bufferID,(u8)(Copy_u16PageID>>8),(u8)Copy_u16PageID};
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	98 85       	ldd	r25, Y+8	; 0x08
    1950:	89 2f       	mov	r24, r25
    1952:	99 27       	eor	r25, r25
    1954:	98 2f       	mov	r25, r24
    1956:	2f 81       	ldd	r18, Y+7	; 0x07
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	8b 83       	std	Y+3, r24	; 0x03
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	2d 83       	std	Y+5, r18	; 0x05
    u8 pack_ACK = 0x00;
    1964:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,6,pack_content);
    1966:	9e 01       	movw	r18, r28
    1968:	2e 5f       	subi	r18, 0xFE	; 254
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	66 e0       	ldi	r22, 0x06	; 6
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1978:	80 91 b4 00 	lds	r24, 0x00B4
    197c:	8c 30       	cpi	r24, 0x0C	; 12
    197e:	e0 f3       	brcs	.-8      	; 0x1978 <FingerPS_StoreTemplate+0x46>
    Completeflag =1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    198c:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    1990:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    1994:	80 91 ba 00 	lds	r24, 0x00BA
}
    1998:	28 96       	adiw	r28, 0x08	; 8
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <FingerPS_Match>:

u8 FingerPS_Match(void)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <FingerPS_Match+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    u8 pack_content[1] = {0x03};
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 pack_ACK = 0x00;
    19b8:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,3,pack_content);
    19ba:	9e 01       	movw	r18, r28
    19bc:	2e 5f       	subi	r18, 0xFE	; 254
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	63 e0       	ldi	r22, 0x03	; 3
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <14);/*TODO: need to be enhanced*/
    19cc:	80 91 b4 00 	lds	r24, 0x00B4
    19d0:	8e 30       	cpi	r24, 0x0E	; 14
    19d2:	e0 f3       	brcs	.-8      	; 0x19cc <FingerPS_Match+0x22>
    Completeflag =1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 b7 00 	sts	0x00B7, r24
    /*different in receiving*/
    FP_checkintro();
    19da:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <FP_checkintro>
    if(0x00 !=App_u8UARTRecPack[9] )
    19de:	80 91 c4 00 	lds	r24, 0x00C4
    19e2:	88 23       	and	r24, r24
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <FingerPS_Match+0x46>
         {FP_ERRORS.STR.ERR_Fingermatch =1;}
    19e6:	80 91 ba 00 	lds	r24, 0x00BA
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	80 93 ba 00 	sts	0x00BA, r24
    Completeflag =0;
    19f0:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    19f4:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    19f8:	80 91 ba 00 	lds	r24, 0x00BA
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <FingerPS_Auraked>:

u8 FingerPS_Auraked(u8 copy_u8Control,u8 copy_u8Speed,u8 copy_u8Color,u8 copy_u8Cycles)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	8f 83       	std	Y+7, r24	; 0x07
    1a1c:	68 87       	std	Y+8, r22	; 0x08
    1a1e:	49 87       	std	Y+9, r20	; 0x09
    1a20:	2a 87       	std	Y+10, r18	; 0x0a
    u8 pack_content[5] = {0x35,copy_u8Control,copy_u8Speed,copy_u8Color,copy_u8Cycles};
    1a22:	85 e3       	ldi	r24, 0x35	; 53
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	8f 81       	ldd	r24, Y+7	; 0x07
    1a28:	8b 83       	std	Y+3, r24	; 0x03
    1a2a:	88 85       	ldd	r24, Y+8	; 0x08
    1a2c:	8c 83       	std	Y+4, r24	; 0x04
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a34:	8e 83       	std	Y+6, r24	; 0x06
    u8 pack_ACK = 0x00;
    1a36:	19 82       	std	Y+1, r1	; 0x01
    /*send*/
    FPSend(PID_CMND,7,pack_content);
    1a38:	9e 01       	movw	r18, r28
    1a3a:	2e 5f       	subi	r18, 0xFE	; 254
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	67 e0       	ldi	r22, 0x07	; 7
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	a9 01       	movw	r20, r18
    1a46:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <FPSend>
    /*receive*/
    while(ArrIndex <12);/*TODO: need to be enhanced*/
    1a4a:	80 91 b4 00 	lds	r24, 0x00B4
    1a4e:	8c 30       	cpi	r24, 0x0C	; 12
    1a50:	e0 f3       	brcs	.-8      	; 0x1a4a <FingerPS_Auraked+0x44>
    Completeflag =1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 b7 00 	sts	0x00B7, r24
    FPReceiveACK(pack_ACK);
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	0e 94 8e 0b 	call	0x171c	; 0x171c <FPReceiveACK>
    Completeflag =0;
    1a5e:	10 92 b7 00 	sts	0x00B7, r1
    ArrIndex=0;
    1a62:	10 92 b4 00 	sts	0x00B4, r1
    return FP_ERRORS.ERR_all;
    1a66:	80 91 ba 00 	lds	r24, 0x00BA
}
    1a6a:	2a 96       	adiw	r28, 0x0a	; 10
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <FP_setNewFinger>:

void FP_setNewFinger(u16 Copy_u16StoreLoc)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <FP_setNewFinger+0x6>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    u8 x=1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    /********************************************
    *1- gen img
    *********************************************/
    H_Lcd_Void_LCDWriteString("Place your finger");
    1a90:	80 e6       	ldi	r24, 0x60	; 96
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <FP_setNewFinger+0x30>
    while(x!=0)
    {
        x = FingerPS_genImg();
    1a9a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1a9e:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	6a ea       	ldi	r22, 0xAA	; 170
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    u8 x=1;
    /********************************************
    *1- gen img
    *********************************************/
    H_Lcd_Void_LCDWriteString("Place your finger");
    while(x!=0)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	88 23       	and	r24, r24
    1ab0:	a1 f7       	brne	.-24     	; 0x1a9a <FP_setNewFinger+0x1e>
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    //H_Lcd_Void_LCDGoTo(0,0);
    //H_Lcd_Void_LCDWriteString("First img generated ");
    x=1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <FP_setNewFinger+0x50>
    /********************************************
    *2- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1abe:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	6a ea       	ldi	r22, 0xAA	; 170
    1ac4:	43 e0       	ldi	r20, 0x03	; 3
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    //H_Lcd_Void_LCDWriteString("First img generated ");
    x=1;
    /********************************************
    *2- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	88 23       	and	r24, r24
    1ad0:	99 f7       	brne	.-26     	; 0x1ab8 <FP_setNewFinger+0x3c>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    H_Lcd_Void_LCDGoTo(1,0);
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	0e 94 b2 13 	call	0x2764	; 0x2764 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteCharacter('*');
    1ada:	8a e2       	ldi	r24, 0x2A	; 42
    1adc:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <FP_setNewFinger+0x7c>
    /********************************************
    *3- gen img
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_genImg();
    1ae6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1aea:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	6a ea       	ldi	r22, 0xAA	; 170
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *3- gen img
    *********************************************/
    while(x!=0)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	88 23       	and	r24, r24
    1afc:	a1 f7       	brne	.-24     	; 0x1ae6 <FP_setNewFinger+0x6a>
    {
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1afe:	8a e2       	ldi	r24, 0x2A	; 42
    1b00:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <FP_setNewFinger+0xa2>
    /********************************************
    *4- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_2);
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1b10:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	6a ea       	ldi	r22, 0xAA	; 170
    1b16:	43 e0       	ldi	r20, 0x03	; 3
    1b18:	21 e0       	ldi	r18, 0x01	; 1
    1b1a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *4- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	88 23       	and	r24, r24
    1b22:	99 f7       	brne	.-26     	; 0x1b0a <FP_setNewFinger+0x8e>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_2);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1b24:	8a e2       	ldi	r24, 0x2A	; 42
    1b26:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <FP_setNewFinger+0xc6>
    /********************************************
    *5- Generate Tempelate
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_genTemplate();
    1b30:	0e 94 0b 0c 	call	0x1816	; 0x1816 <FingerPS_genTemplate>
    1b34:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	6a ea       	ldi	r22, 0xAA	; 170
    1b3a:	42 e0       	ldi	r20, 0x02	; 2
    1b3c:	21 e0       	ldi	r18, 0x01	; 1
    1b3e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *5- Generate Tempelate
    *********************************************/
    while(x!=0)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	88 23       	and	r24, r24
    1b46:	a1 f7       	brne	.-24     	; 0x1b30 <FP_setNewFinger+0xb4>
    {
        x = FingerPS_genTemplate();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDWriteCharacter('*');
    1b48:	8a e2       	ldi	r24, 0x2A	; 42
    1b4a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
    x=1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	0d c0       	rjmp	.+26     	; 0x1b6e <FP_setNewFinger+0xf2>
    /********************************************
    *6- Tempelate Storing
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_StoreTemplate(CHAR_BUFFER_1,Copy_u16StoreLoc);
    1b54:	2a 81       	ldd	r18, Y+2	; 0x02
    1b56:	3b 81       	ldd	r19, Y+3	; 0x03
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	b9 01       	movw	r22, r18
    1b5c:	0e 94 99 0c 	call	0x1932	; 0x1932 <FingerPS_StoreTemplate>
    1b60:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	6a ea       	ldi	r22, 0xAA	; 170
    1b66:	42 e0       	ldi	r20, 0x02	; 2
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    H_Lcd_Void_LCDWriteCharacter('*');
    x=1;
    /********************************************
    *6- Tempelate Storing
    *********************************************/
    while(x!=0)
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 23       	and	r24, r24
    1b72:	81 f7       	brne	.-32     	; 0x1b54 <FP_setNewFinger+0xd8>
    {
        x = FingerPS_StoreTemplate(CHAR_BUFFER_1,Copy_u16StoreLoc);
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    H_Lcd_Void_LCDGoTo(0,0);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 b2 13 	call	0x2764	; 0x2764 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("Finger Storing done ");
    1b7c:	82 e7       	ldi	r24, 0x72	; 114
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(1,0);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	0e 94 b2 13 	call	0x2764	; 0x2764 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("                    ");
    1b8c:	87 e8       	ldi	r24, 0x87	; 135
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    x=1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	89 83       	std	Y+1, r24	; 0x01
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <FP_CheckMatch>:

void FP_CheckMatch(u16 Copy_u16StoreLoc)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <FP_CheckMatch+0x6>
    1baa:	0f 92       	push	r0
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9b 83       	std	Y+3, r25	; 0x03
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    u8 x=1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    /********************************************
    *7- gen img
    *********************************************/
    H_Lcd_Void_LCDWriteString("Place your finger");
    1bb8:	80 e6       	ldi	r24, 0x60	; 96
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <FP_CheckMatch+0x30>
    while(x!=0)
    {
        x = FingerPS_genImg();
    1bc2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FingerPS_genImg>
    1bc6:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	6a ea       	ldi	r22, 0xAA	; 170
    1bcc:	42 e0       	ldi	r20, 0x02	; 2
    1bce:	21 e0       	ldi	r18, 0x01	; 1
    1bd0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    u8 x=1;
    /********************************************
    *7- gen img
    *********************************************/
    H_Lcd_Void_LCDWriteString("Place your finger");
    while(x!=0)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	88 23       	and	r24, r24
    1bd8:	a1 f7       	brne	.-24     	; 0x1bc2 <FP_CheckMatch+0x1e>
    {
        x = FingerPS_genImg();
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    x=1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	0a c0       	rjmp	.+20     	; 0x1bf4 <FP_CheckMatch+0x50>
    /********************************************
    *8- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	0e 94 31 0c 	call	0x1862	; 0x1862 <FingerPS_ConvertImg2CharFile>
    1be6:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	6a ea       	ldi	r22, 0xAA	; 170
    1bec:	43 e0       	ldi	r20, 0x03	; 3
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    }
    x=1;
    /********************************************
    *8- FIRST CHARACTER FILE GENERATION
    *********************************************/
    while(x!=0)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	88 23       	and	r24, r24
    1bf8:	99 f7       	brne	.-26     	; 0x1be0 <FP_CheckMatch+0x3c>
    {
        x = FingerPS_ConvertImg2CharFile(CHAR_BUFFER_1);
        FingerPS_Auraked(BREATHING,0xAA,PURPLE,1);
    }
    x=1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <FP_CheckMatch+0x76>
    /********************************************
    *9- Load Char in char file 2
    *********************************************/
    while(x!=0)
    {
        x = FingerPS_LoadCharFile(CHAR_BUFFER_2,Copy_u16StoreLoc);
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	b9 01       	movw	r22, r18
    1c08:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <FingerPS_LoadCharFile>
    1c0c:	89 83       	std	Y+1, r24	; 0x01
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	6a ea       	ldi	r22, 0xAA	; 170
    1c12:	42 e0       	ldi	r20, 0x02	; 2
    1c14:	21 e0       	ldi	r18, 0x01	; 1
    1c16:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    }
    x=1;
    /********************************************
    *9- Load Char in char file 2
    *********************************************/
    while(x!=0)
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	88 23       	and	r24, r24
    1c1e:	81 f7       	brne	.-32     	; 0x1c00 <FP_CheckMatch+0x5c>
        FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    }
    /********************************************
    *10- CHECK MATCH
    *********************************************/
    x = FingerPS_Match();
    1c20:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <FingerPS_Match>
    1c24:	89 83       	std	Y+1, r24	; 0x01
    FingerPS_Auraked(BREATHING,0xAA,BLUE,1);
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	6a ea       	ldi	r22, 0xAA	; 170
    1c2a:	42 e0       	ldi	r20, 0x02	; 2
    1c2c:	21 e0       	ldi	r18, 0x01	; 1
    1c2e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <FingerPS_Auraked>
    if(x==0)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	88 23       	and	r24, r24
    1c36:	49 f4       	brne	.+18     	; 0x1c4a <FP_CheckMatch+0xa6>
    {
        H_Lcd_Void_LCDGoTo(0,0);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	0e 94 b2 13 	call	0x2764	; 0x2764 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString(" Matched  *_*  ");
    1c40:	8c e9       	ldi	r24, 0x9C	; 156
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    1c48:	0b c0       	rjmp	.+22     	; 0x1c60 <FP_CheckMatch+0xbc>
    }
    else if(x==FP_NOT_MATCHED)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	80 34       	cpi	r24, 0x40	; 64
    1c4e:	41 f4       	brne	.+16     	; 0x1c60 <FP_CheckMatch+0xbc>
    {
        
        H_Lcd_Void_LCDGoTo(0,0);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 b2 13 	call	0x2764	; 0x2764 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString(" Matched  *_*  ");
    1c58:	8c e9       	ldi	r24, 0x9C	; 156
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <H_Lcd_Void_LCDWriteString>
    }
} 
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <GIE_voidEnable>:

#include "BitMath.h"
#include "STD.h"

void GIE_voidEnable(void)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIE_SREG,7);
    1c74:	af e5       	ldi	r26, 0x5F	; 95
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ef e5       	ldi	r30, 0x5F	; 95
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 68       	ori	r24, 0x80	; 128
    1c80:	8c 93       	st	X, r24
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <GIE_voidDisble>:
void GIE_voidDisble(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GIE_SREG,7);
    1c90:	af e5       	ldi	r26, 0x5F	; 95
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef e5       	ldi	r30, 0x5F	; 95
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
    1c9c:	8c 93       	st	X, r24
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1cac:	84 e1       	ldi	r24, 0x14	; 20
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1cb4:	85 e1       	ldi	r24, 0x15	; 21
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1cbc:	86 e1       	ldi	r24, 0x16	; 22
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1cc4:	88 e1       	ldi	r24, 0x18	; 24
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1ccc:	8d e0       	ldi	r24, 0x0D	; 13
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1cd4:	8c e0       	ldi	r24, 0x0C	; 12
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1cdc:	83 e3       	ldi	r24, 0x33	; 51
    1cde:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1ce2:	82 e3       	ldi	r24, 0x32	; 50
    1ce4:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1ce8:	88 e2       	ldi	r24, 0x28	; 40
    1cea:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1cee:	8c e0       	ldi	r24, 0x0C	; 12
    1cf0:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	e9 97       	sbiw	r28, 0x39	; 57
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1d1c:	8d e0       	ldi	r24, 0x0D	; 13
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1d24:	89 ad       	ldd	r24, Y+57	; 0x39
    1d26:	82 95       	swap	r24
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	98 2f       	mov	r25, r24
    1d2c:	91 70       	andi	r25, 0x01	; 1
    1d2e:	84 e1       	ldi	r24, 0x14	; 20
    1d30:	69 2f       	mov	r22, r25
    1d32:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1d36:	89 ad       	ldd	r24, Y+57	; 0x39
    1d38:	82 95       	swap	r24
    1d3a:	86 95       	lsr	r24
    1d3c:	87 70       	andi	r24, 0x07	; 7
    1d3e:	98 2f       	mov	r25, r24
    1d40:	91 70       	andi	r25, 0x01	; 1
    1d42:	85 e1       	ldi	r24, 0x15	; 21
    1d44:	69 2f       	mov	r22, r25
    1d46:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d4c:	82 95       	swap	r24
    1d4e:	86 95       	lsr	r24
    1d50:	86 95       	lsr	r24
    1d52:	83 70       	andi	r24, 0x03	; 3
    1d54:	98 2f       	mov	r25, r24
    1d56:	91 70       	andi	r25, 0x01	; 1
    1d58:	86 e1       	ldi	r24, 0x16	; 22
    1d5a:	69 2f       	mov	r22, r25
    1d5c:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1d60:	89 ad       	ldd	r24, Y+57	; 0x39
    1d62:	98 2f       	mov	r25, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	99 27       	eor	r25, r25
    1d68:	99 1f       	adc	r25, r25
    1d6a:	88 e1       	ldi	r24, 0x18	; 24
    1d6c:	69 2f       	mov	r22, r25
    1d6e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d72:	8c e0       	ldi	r24, 0x0C	; 12
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	8d ab       	std	Y+53, r24	; 0x35
    1d84:	9e ab       	std	Y+54, r25	; 0x36
    1d86:	af ab       	std	Y+55, r26	; 0x37
    1d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d90:	98 ad       	ldd	r25, Y+56	; 0x38
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a e7       	ldi	r20, 0x7A	; 122
    1d98:	55 e4       	ldi	r21, 0x45	; 69
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	89 ab       	std	Y+49, r24	; 0x31
    1da4:	9a ab       	std	Y+50, r25	; 0x32
    1da6:	ab ab       	std	Y+51, r26	; 0x33
    1da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1daa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dac:	7a a9       	ldd	r23, Y+50	; 0x32
    1dae:	8b a9       	ldd	r24, Y+51	; 0x33
    1db0:	9c a9       	ldd	r25, Y+52	; 0x34
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dce:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <H_Lcd_Void_LCDWriteCharacter+0x126>
    1e0e:	80 e9       	ldi	r24, 0x90	; 144
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
    1e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <H_Lcd_Void_LCDWriteCharacter+0x114>
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <H_Lcd_Void_LCDWriteCharacter+0x108>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	69 a9       	ldd	r22, Y+49	; 0x31
    1e38:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1e5e:	8c e0       	ldi	r24, 0x0C	; 12
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	bf e3       	ldi	r27, 0x3F	; 63
    1e6e:	8f a3       	std	Y+39, r24	; 0x27
    1e70:	98 a7       	std	Y+40, r25	; 0x28
    1e72:	a9 a7       	std	Y+41, r26	; 0x29
    1e74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6f a1       	ldd	r22, Y+39	; 0x27
    1e78:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a e7       	ldi	r20, 0x7A	; 122
    1e84:	55 e4       	ldi	r21, 0x45	; 69
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8b a3       	std	Y+35, r24	; 0x23
    1e90:	9c a3       	std	Y+36, r25	; 0x24
    1e92:	ad a3       	std	Y+37, r26	; 0x25
    1e94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e96:	6b a1       	ldd	r22, Y+35	; 0x23
    1e98:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9a a3       	std	Y+34, r25	; 0x22
    1eb4:	89 a3       	std	Y+33, r24	; 0x21
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    1eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eba:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <H_Lcd_Void_LCDWriteCharacter+0x212>
    1efa:	80 e9       	ldi	r24, 0x90	; 144
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	98 a3       	std	Y+32, r25	; 0x20
    1f00:	8f 8f       	std	Y+31, r24	; 0x1f
    1f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f04:	98 a1       	ldd	r25, Y+32	; 0x20
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <H_Lcd_Void_LCDWriteCharacter+0x200>
    1f0a:	98 a3       	std	Y+32, r25	; 0x20
    1f0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6b a1       	ldd	r22, Y+35	; 0x23
    1f24:	7c a1       	ldd	r23, Y+36	; 0x24
    1f26:	8d a1       	ldd	r24, Y+37	; 0x25
    1f28:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    1f46:	9e 8f       	std	Y+30, r25	; 0x1e
    1f48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1f4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	91 70       	andi	r25, 0x01	; 1
    1f50:	84 e1       	ldi	r24, 0x14	; 20
    1f52:	69 2f       	mov	r22, r25
    1f54:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1f58:	89 ad       	ldd	r24, Y+57	; 0x39
    1f5a:	86 95       	lsr	r24
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	91 70       	andi	r25, 0x01	; 1
    1f60:	85 e1       	ldi	r24, 0x15	; 21
    1f62:	69 2f       	mov	r22, r25
    1f64:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1f68:	89 ad       	ldd	r24, Y+57	; 0x39
    1f6a:	86 95       	lsr	r24
    1f6c:	86 95       	lsr	r24
    1f6e:	98 2f       	mov	r25, r24
    1f70:	91 70       	andi	r25, 0x01	; 1
    1f72:	86 e1       	ldi	r24, 0x16	; 22
    1f74:	69 2f       	mov	r22, r25
    1f76:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1f7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7c:	86 95       	lsr	r24
    1f7e:	86 95       	lsr	r24
    1f80:	86 95       	lsr	r24
    1f82:	98 2f       	mov	r25, r24
    1f84:	91 70       	andi	r25, 0x01	; 1
    1f86:	88 e1       	ldi	r24, 0x18	; 24
    1f88:	69 2f       	mov	r22, r25
    1f8a:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1f8e:	8c e0       	ldi	r24, 0x0C	; 12
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	bf e3       	ldi	r27, 0x3F	; 63
    1f9e:	89 8f       	std	Y+25, r24	; 0x19
    1fa0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a e7       	ldi	r20, 0x7A	; 122
    1fb4:	55 e4       	ldi	r21, 0x45	; 69
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8d 8b       	std	Y+21, r24	; 0x15
    1fc0:	9e 8b       	std	Y+22, r25	; 0x16
    1fc2:	af 8b       	std	Y+23, r26	; 0x17
    1fc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fca:	8f 89       	ldd	r24, Y+23	; 0x17
    1fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fea:	7e 89       	ldd	r23, Y+22	; 0x16
    1fec:	8f 89       	ldd	r24, Y+23	; 0x17
    1fee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	69 8d       	ldd	r22, Y+25	; 0x19
    2002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9c 8b       	std	Y+20, r25	; 0x14
    2026:	8b 8b       	std	Y+19, r24	; 0x13
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <H_Lcd_Void_LCDWriteCharacter+0x342>
    202a:	80 e9       	ldi	r24, 0x90	; 144
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	9a 8b       	std	Y+18, r25	; 0x12
    2030:	89 8b       	std	Y+17, r24	; 0x11
    2032:	89 89       	ldd	r24, Y+17	; 0x11
    2034:	9a 89       	ldd	r25, Y+18	; 0x12
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <H_Lcd_Void_LCDWriteCharacter+0x330>
    203a:	9a 8b       	std	Y+18, r25	; 0x12
    203c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8b 89       	ldd	r24, Y+19	; 0x13
    204a:	9c 89       	ldd	r25, Y+20	; 0x14
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <H_Lcd_Void_LCDWriteCharacter+0x324>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	8b 8b       	std	Y+19, r24	; 0x13
    2066:	8b 89       	ldd	r24, Y+19	; 0x13
    2068:	9c 89       	ldd	r25, Y+20	; 0x14
    206a:	98 8b       	std	Y+16, r25	; 0x10
    206c:	8f 87       	std	Y+15, r24	; 0x0f
    206e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2070:	98 89       	ldd	r25, Y+16	; 0x10
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2076:	98 8b       	std	Y+16, r25	; 0x10
    2078:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    207a:	8c e0       	ldi	r24, 0x0C	; 12
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 ea       	ldi	r26, 0xA0	; 160
    2088:	b0 e4       	ldi	r27, 0x40	; 64
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	55 e4       	ldi	r21, 0x45	; 69
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    2116:	80 e9       	ldi	r24, 0x90	; 144
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <H_Lcd_Void_LCDWriteCharacter+0x410>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <H_Lcd_Void_LCDWriteCharacter+0x458>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2166:	e9 96       	adiw	r28, 0x39	; 57
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	e9 97       	sbiw	r28, 0x39	; 57
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    218e:	8d e0       	ldi	r24, 0x0D	; 13
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2196:	89 ad       	ldd	r24, Y+57	; 0x39
    2198:	82 95       	swap	r24
    219a:	8f 70       	andi	r24, 0x0F	; 15
    219c:	98 2f       	mov	r25, r24
    219e:	91 70       	andi	r25, 0x01	; 1
    21a0:	84 e1       	ldi	r24, 0x14	; 20
    21a2:	69 2f       	mov	r22, r25
    21a4:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    21a8:	89 ad       	ldd	r24, Y+57	; 0x39
    21aa:	82 95       	swap	r24
    21ac:	86 95       	lsr	r24
    21ae:	87 70       	andi	r24, 0x07	; 7
    21b0:	98 2f       	mov	r25, r24
    21b2:	91 70       	andi	r25, 0x01	; 1
    21b4:	85 e1       	ldi	r24, 0x15	; 21
    21b6:	69 2f       	mov	r22, r25
    21b8:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    21bc:	89 ad       	ldd	r24, Y+57	; 0x39
    21be:	82 95       	swap	r24
    21c0:	86 95       	lsr	r24
    21c2:	86 95       	lsr	r24
    21c4:	83 70       	andi	r24, 0x03	; 3
    21c6:	98 2f       	mov	r25, r24
    21c8:	91 70       	andi	r25, 0x01	; 1
    21ca:	86 e1       	ldi	r24, 0x16	; 22
    21cc:	69 2f       	mov	r22, r25
    21ce:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    21d2:	89 ad       	ldd	r24, Y+57	; 0x39
    21d4:	98 2f       	mov	r25, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	99 27       	eor	r25, r25
    21da:	99 1f       	adc	r25, r25
    21dc:	88 e1       	ldi	r24, 0x18	; 24
    21de:	69 2f       	mov	r22, r25
    21e0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    21e4:	8c e0       	ldi	r24, 0x0C	; 12
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e8       	ldi	r26, 0x80	; 128
    21f2:	bf e3       	ldi	r27, 0x3F	; 63
    21f4:	8d ab       	std	Y+53, r24	; 0x35
    21f6:	9e ab       	std	Y+54, r25	; 0x36
    21f8:	af ab       	std	Y+55, r26	; 0x37
    21fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6d a9       	ldd	r22, Y+53	; 0x35
    21fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2200:	8f a9       	ldd	r24, Y+55	; 0x37
    2202:	98 ad       	ldd	r25, Y+56	; 0x38
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a e7       	ldi	r20, 0x7A	; 122
    220a:	55 e4       	ldi	r21, 0x45	; 69
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	89 ab       	std	Y+49, r24	; 0x31
    2216:	9a ab       	std	Y+50, r25	; 0x32
    2218:	ab ab       	std	Y+51, r26	; 0x33
    221a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 ab       	std	Y+48, r25	; 0x30
    223a:	8f a7       	std	Y+47, r24	; 0x2f
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6d a9       	ldd	r22, Y+53	; 0x35
    2258:	7e a9       	ldd	r23, Y+54	; 0x36
    225a:	8f a9       	ldd	r24, Y+55	; 0x37
    225c:	98 ad       	ldd	r25, Y+56	; 0x38
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
    227e:	0f c0       	rjmp	.+30     	; 0x229e <H_Lcd_Void_LCDWriteCommand+0x126>
    2280:	80 e9       	ldi	r24, 0x90	; 144
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	9e a7       	std	Y+46, r25	; 0x2e
    2286:	8d a7       	std	Y+45, r24	; 0x2d
    2288:	8d a5       	ldd	r24, Y+45	; 0x2d
    228a:	9e a5       	ldd	r25, Y+46	; 0x2e
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <H_Lcd_Void_LCDWriteCommand+0x114>
    2290:	9e a7       	std	Y+46, r25	; 0x2e
    2292:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	98 ab       	std	Y+48, r25	; 0x30
    229c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a0:	98 a9       	ldd	r25, Y+48	; 0x30
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <H_Lcd_Void_LCDWriteCommand+0x108>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	69 a9       	ldd	r22, Y+49	; 0x31
    22aa:	7a a9       	ldd	r23, Y+50	; 0x32
    22ac:	8b a9       	ldd	r24, Y+51	; 0x33
    22ae:	9c a9       	ldd	r25, Y+52	; 0x34
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	98 ab       	std	Y+48, r25	; 0x30
    22ba:	8f a7       	std	Y+47, r24	; 0x2f
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	9c a7       	std	Y+44, r25	; 0x2c
    22c2:	8b a7       	std	Y+43, r24	; 0x2b
    22c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <H_Lcd_Void_LCDWriteCommand+0x150>
    22cc:	9c a7       	std	Y+44, r25	; 0x2c
    22ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    22d0:	8c e0       	ldi	r24, 0x0C	; 12
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e8       	ldi	r26, 0x80	; 128
    22de:	bf e3       	ldi	r27, 0x3F	; 63
    22e0:	8f a3       	std	Y+39, r24	; 0x27
    22e2:	98 a7       	std	Y+40, r25	; 0x28
    22e4:	a9 a7       	std	Y+41, r26	; 0x29
    22e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ea:	78 a5       	ldd	r23, Y+40	; 0x28
    22ec:	89 a5       	ldd	r24, Y+41	; 0x29
    22ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	55 e4       	ldi	r21, 0x45	; 69
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8b a3       	std	Y+35, r24	; 0x23
    2302:	9c a3       	std	Y+36, r25	; 0x24
    2304:	ad a3       	std	Y+37, r26	; 0x25
    2306:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2308:	6b a1       	ldd	r22, Y+35	; 0x23
    230a:	7c a1       	ldd	r23, Y+36	; 0x24
    230c:	8d a1       	ldd	r24, Y+37	; 0x25
    230e:	9e a1       	ldd	r25, Y+38	; 0x26
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9a a3       	std	Y+34, r25	; 0x22
    2326:	89 a3       	std	Y+33, r24	; 0x21
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    232a:	6b a1       	ldd	r22, Y+35	; 0x23
    232c:	7c a1       	ldd	r23, Y+36	; 0x24
    232e:	8d a1       	ldd	r24, Y+37	; 0x25
    2330:	9e a1       	ldd	r25, Y+38	; 0x26
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6f a1       	ldd	r22, Y+39	; 0x27
    2344:	78 a5       	ldd	r23, Y+40	; 0x28
    2346:	89 a5       	ldd	r24, Y+41	; 0x29
    2348:	9a a5       	ldd	r25, Y+42	; 0x2a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9a a3       	std	Y+34, r25	; 0x22
    2368:	89 a3       	std	Y+33, r24	; 0x21
    236a:	0f c0       	rjmp	.+30     	; 0x238a <H_Lcd_Void_LCDWriteCommand+0x212>
    236c:	80 e9       	ldi	r24, 0x90	; 144
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	98 a3       	std	Y+32, r25	; 0x20
    2372:	8f 8f       	std	Y+31, r24	; 0x1f
    2374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2376:	98 a1       	ldd	r25, Y+32	; 0x20
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <H_Lcd_Void_LCDWriteCommand+0x200>
    237c:	98 a3       	std	Y+32, r25	; 0x20
    237e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	89 a1       	ldd	r24, Y+33	; 0x21
    2382:	9a a1       	ldd	r25, Y+34	; 0x22
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9a a3       	std	Y+34, r25	; 0x22
    2388:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	89 a1       	ldd	r24, Y+33	; 0x21
    238c:	9a a1       	ldd	r25, Y+34	; 0x22
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6b a1       	ldd	r22, Y+35	; 0x23
    2396:	7c a1       	ldd	r23, Y+36	; 0x24
    2398:	8d a1       	ldd	r24, Y+37	; 0x25
    239a:	9e a1       	ldd	r25, Y+38	; 0x26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9a a3       	std	Y+34, r25	; 0x22
    23a6:	89 a3       	std	Y+33, r24	; 0x21
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	9a a1       	ldd	r25, Y+34	; 0x22
    23ac:	9e 8f       	std	Y+30, r25	; 0x1e
    23ae:	8d 8f       	std	Y+29, r24	; 0x1d
    23b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <H_Lcd_Void_LCDWriteCommand+0x23c>
    23b8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    23bc:	89 ad       	ldd	r24, Y+57	; 0x39
    23be:	98 2f       	mov	r25, r24
    23c0:	91 70       	andi	r25, 0x01	; 1
    23c2:	84 e1       	ldi	r24, 0x14	; 20
    23c4:	69 2f       	mov	r22, r25
    23c6:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    23ca:	89 ad       	ldd	r24, Y+57	; 0x39
    23cc:	86 95       	lsr	r24
    23ce:	98 2f       	mov	r25, r24
    23d0:	91 70       	andi	r25, 0x01	; 1
    23d2:	85 e1       	ldi	r24, 0x15	; 21
    23d4:	69 2f       	mov	r22, r25
    23d6:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    23da:	89 ad       	ldd	r24, Y+57	; 0x39
    23dc:	86 95       	lsr	r24
    23de:	86 95       	lsr	r24
    23e0:	98 2f       	mov	r25, r24
    23e2:	91 70       	andi	r25, 0x01	; 1
    23e4:	86 e1       	ldi	r24, 0x16	; 22
    23e6:	69 2f       	mov	r22, r25
    23e8:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    23ec:	89 ad       	ldd	r24, Y+57	; 0x39
    23ee:	86 95       	lsr	r24
    23f0:	86 95       	lsr	r24
    23f2:	86 95       	lsr	r24
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	88 e1       	ldi	r24, 0x18	; 24
    23fa:	69 2f       	mov	r22, r25
    23fc:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2400:	8c e0       	ldi	r24, 0x0C	; 12
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	ab 8f       	std	Y+27, r26	; 0x1b
    2416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a e7       	ldi	r20, 0x7A	; 122
    2426:	55 e4       	ldi	r21, 0x45	; 69
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8d 8b       	std	Y+21, r24	; 0x15
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	af 8b       	std	Y+23, r26	; 0x17
    2436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	69 8d       	ldd	r22, Y+25	; 0x19
    2474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <H_Lcd_Void_LCDWriteCommand+0x342>
    249c:	80 e9       	ldi	r24, 0x90	; 144
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <H_Lcd_Void_LCDWriteCommand+0x330>
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <H_Lcd_Void_LCDWriteCommand+0x324>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	98 89       	ldd	r25, Y+16	; 0x10
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <H_Lcd_Void_LCDWriteCommand+0x36c>
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    24ec:	8c e0       	ldi	r24, 0x0C	; 12
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 ea       	ldi	r26, 0xA0	; 160
    24fa:	b0 e4       	ldi	r27, 0x40	; 64
    24fc:	8b 87       	std	Y+11, r24	; 0x0b
    24fe:	9c 87       	std	Y+12, r25	; 0x0c
    2500:	ad 87       	std	Y+13, r26	; 0x0d
    2502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a e7       	ldi	r20, 0x7A	; 122
    2512:	55 e4       	ldi	r21, 0x45	; 69
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8f 83       	std	Y+7, r24	; 0x07
    251e:	98 87       	std	Y+8, r25	; 0x08
    2520:	a9 87       	std	Y+9, r26	; 0x09
    2522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <H_Lcd_Void_LCDWriteCommand+0x42e>
    2588:	80 e9       	ldi	r24, 0x90	; 144
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <H_Lcd_Void_LCDWriteCommand+0x41c>
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <H_Lcd_Void_LCDWriteCommand+0x410>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <H_Lcd_Void_LCDWriteCommand+0x458>
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    25d8:	e9 96       	adiw	r28, 0x39	; 57
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <H_Lcd_Void_LCDWriteString+0x6>
    25f0:	0f 92       	push	r0
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9b 83       	std	Y+3, r25	; 0x03
    25f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    25fa:	19 82       	std	Y+1, r1	; 0x01
    25fc:	0e c0       	rjmp	.+28     	; 0x261a <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	80 81       	ld	r24, Z
    2610:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	fc 01       	movw	r30, r24
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	80 81       	ld	r24, Z
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	29 f7       	brne	.-54     	; 0x25fe <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	2f 97       	sbiw	r28, 0x0f	; 15
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	6c 87       	std	Y+12, r22	; 0x0c
    266e:	7d 87       	std	Y+13, r23	; 0x0d
    2670:	8e 87       	std	Y+14, r24	; 0x0e
    2672:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2674:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2676:	8a e0       	ldi	r24, 0x0A	; 10
    2678:	fe 01       	movw	r30, r28
    267a:	32 96       	adiw	r30, 0x02	; 2
    267c:	df 01       	movw	r26, r30
    267e:	98 2f       	mov	r25, r24
    2680:	1d 92       	st	X+, r1
    2682:	9a 95       	dec	r25
    2684:	e9 f7       	brne	.-6      	; 0x2680 <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2686:	8c 85       	ldd	r24, Y+12	; 0x0c
    2688:	9d 85       	ldd	r25, Y+13	; 0x0d
    268a:	ae 85       	ldd	r26, Y+14	; 0x0e
    268c:	bf 85       	ldd	r27, Y+15	; 0x0f
    268e:	bb 23       	and	r27, r27
    2690:	94 f4       	brge	.+36     	; 0x26b6 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    2692:	8c 85       	ldd	r24, Y+12	; 0x0c
    2694:	9d 85       	ldd	r25, Y+13	; 0x0d
    2696:	ae 85       	ldd	r26, Y+14	; 0x0e
    2698:	bf 85       	ldd	r27, Y+15	; 0x0f
    269a:	b0 95       	com	r27
    269c:	a0 95       	com	r26
    269e:	90 95       	com	r25
    26a0:	81 95       	neg	r24
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	af 4f       	sbci	r26, 0xFF	; 255
    26a6:	bf 4f       	sbci	r27, 0xFF	; 255
    26a8:	8c 87       	std	Y+12, r24	; 0x0c
    26aa:	9d 87       	std	Y+13, r25	; 0x0d
    26ac:	ae 87       	std	Y+14, r26	; 0x0e
    26ae:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    26b0:	8d e2       	ldi	r24, 0x2D	; 45
    26b2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	08 2f       	mov	r16, r24
    26ba:	11 27       	eor	r17, r17
    26bc:	07 fd       	sbrc	r16, 7
    26be:	10 95       	com	r17
    26c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    26c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    26c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    26c8:	2a e0       	ldi	r18, 0x0A	; 10
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 0e 18 	call	0x301c	; 0x301c <__divmodsi4>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	28 2f       	mov	r18, r24
    26de:	ce 01       	movw	r24, r28
    26e0:	02 96       	adiw	r24, 0x02	; 2
    26e2:	fc 01       	movw	r30, r24
    26e4:	e0 0f       	add	r30, r16
    26e6:	f1 1f       	adc	r31, r17
    26e8:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    26ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    26ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ee:	ae 85       	ldd	r26, Y+14	; 0x0e
    26f0:	bf 85       	ldd	r27, Y+15	; 0x0f
    26f2:	2a e0       	ldi	r18, 0x0A	; 10
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 0e 18 	call	0x301c	; 0x301c <__divmodsi4>
    2702:	da 01       	movw	r26, r20
    2704:	c9 01       	movw	r24, r18
    2706:	8c 87       	std	Y+12, r24	; 0x0c
    2708:	9d 87       	std	Y+13, r25	; 0x0d
    270a:	ae 87       	std	Y+14, r26	; 0x0e
    270c:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    2714:	8c 85       	ldd	r24, Y+12	; 0x0c
    2716:	9d 85       	ldd	r25, Y+13	; 0x0d
    2718:	ae 85       	ldd	r26, Y+14	; 0x0e
    271a:	bf 85       	ldd	r27, Y+15	; 0x0f
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	a1 05       	cpc	r26, r1
    2720:	b1 05       	cpc	r27, r1
    2722:	49 f6       	brne	.-110    	; 0x26b6 <H_Lcd_Void_LCDWriteNumber+0x62>
    2724:	11 c0       	rjmp	.+34     	; 0x2748 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	28 2f       	mov	r18, r24
    2730:	33 27       	eor	r19, r19
    2732:	27 fd       	sbrc	r18, 7
    2734:	30 95       	com	r19
    2736:	ce 01       	movw	r24, r28
    2738:	02 96       	adiw	r24, 0x02	; 2
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	80 81       	ld	r24, Z
    2742:	80 5d       	subi	r24, 0xD0	; 208
    2744:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	18 16       	cp	r1, r24
    274c:	64 f3       	brlt	.-40     	; 0x2726 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    274e:	2f 96       	adiw	r28, 0x0f	; 15
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <H_Lcd_Void_LCDGoTo+0x6>
    276a:	00 d0       	rcall	.+0      	; 0x276c <H_Lcd_Void_LCDGoTo+0x8>
    276c:	00 d0       	rcall	.+0      	; 0x276e <H_Lcd_Void_LCDGoTo+0xa>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2776:	80 e8       	ldi	r24, 0x80	; 128
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	80 ec       	ldi	r24, 0xC0	; 192
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	84 e9       	ldi	r24, 0x94	; 148
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	84 ed       	ldi	r24, 0xD4	; 212
    2784:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	fc 01       	movw	r30, r24
    2792:	e2 0f       	add	r30, r18
    2794:	f3 1f       	adc	r31, r19
    2796:	90 81       	ld	r25, Z
    2798:	8e 81       	ldd	r24, Y+6	; 0x06
    279a:	89 0f       	add	r24, r25
    279c:	0e 94 bc 10 	call	0x2178	; 0x2178 <H_Lcd_Void_LCDWriteCommand>
}
    27a0:	26 96       	adiw	r28, 0x06	; 6
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <H_LED_Void_LedInit+0x6>
    27b8:	0f 92       	push	r0
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	3b 83       	std	Y+3, r19	; 0x03
    27c8:	2a 83       	std	Y+2, r18	; 0x02
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	91 05       	cpc	r25, r1
    27d2:	d9 f0       	breq	.+54     	; 0x280a <H_LED_Void_LedInit+0x58>
    27d4:	2a 81       	ldd	r18, Y+2	; 0x02
    27d6:	3b 81       	ldd	r19, Y+3	; 0x03
    27d8:	23 30       	cpi	r18, 0x03	; 3
    27da:	31 05       	cpc	r19, r1
    27dc:	34 f4       	brge	.+12     	; 0x27ea <H_LED_Void_LedInit+0x38>
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9b 81       	ldd	r25, Y+3	; 0x03
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	91 05       	cpc	r25, r1
    27e6:	61 f0       	breq	.+24     	; 0x2800 <H_LED_Void_LedInit+0x4e>
    27e8:	1e c0       	rjmp	.+60     	; 0x2826 <H_LED_Void_LedInit+0x74>
    27ea:	2a 81       	ldd	r18, Y+2	; 0x02
    27ec:	3b 81       	ldd	r19, Y+3	; 0x03
    27ee:	23 30       	cpi	r18, 0x03	; 3
    27f0:	31 05       	cpc	r19, r1
    27f2:	81 f0       	breq	.+32     	; 0x2814 <H_LED_Void_LedInit+0x62>
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	84 30       	cpi	r24, 0x04	; 4
    27fa:	91 05       	cpc	r25, r1
    27fc:	81 f0       	breq	.+32     	; 0x281e <H_LED_Void_LedInit+0x6c>
    27fe:	13 c0       	rjmp	.+38     	; 0x2826 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    2800:	80 e1       	ldi	r24, 0x10	; 16
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2808:	0e c0       	rjmp	.+28     	; 0x2826 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    280a:	8f e0       	ldi	r24, 0x0F	; 15
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    2812:	09 c0       	rjmp	.+18     	; 0x2826 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2814:	8e e0       	ldi	r24, 0x0E	; 14
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    281e:	8b e1       	ldi	r24, 0x1B	; 27
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <H_LED_Void_LedOn+0x6>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3b 83       	std	Y+3, r19	; 0x03
    2848:	2a 83       	std	Y+2, r18	; 0x02
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	91 05       	cpc	r25, r1
    2852:	d9 f0       	breq	.+54     	; 0x288a <H_LED_Void_LedOn+0x58>
    2854:	2a 81       	ldd	r18, Y+2	; 0x02
    2856:	3b 81       	ldd	r19, Y+3	; 0x03
    2858:	23 30       	cpi	r18, 0x03	; 3
    285a:	31 05       	cpc	r19, r1
    285c:	34 f4       	brge	.+12     	; 0x286a <H_LED_Void_LedOn+0x38>
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	9b 81       	ldd	r25, Y+3	; 0x03
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	91 05       	cpc	r25, r1
    2866:	61 f0       	breq	.+24     	; 0x2880 <H_LED_Void_LedOn+0x4e>
    2868:	1e c0       	rjmp	.+60     	; 0x28a6 <H_LED_Void_LedOn+0x74>
    286a:	2a 81       	ldd	r18, Y+2	; 0x02
    286c:	3b 81       	ldd	r19, Y+3	; 0x03
    286e:	23 30       	cpi	r18, 0x03	; 3
    2870:	31 05       	cpc	r19, r1
    2872:	81 f0       	breq	.+32     	; 0x2894 <H_LED_Void_LedOn+0x62>
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	84 30       	cpi	r24, 0x04	; 4
    287a:	91 05       	cpc	r25, r1
    287c:	81 f0       	breq	.+32     	; 0x289e <H_LED_Void_LedOn+0x6c>
    287e:	13 c0       	rjmp	.+38     	; 0x28a6 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    2880:	80 e1       	ldi	r24, 0x10	; 16
    2882:	61 e0       	ldi	r22, 0x01	; 1
    2884:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    288a:	8f e0       	ldi	r24, 0x0F	; 15
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    2894:	8e e0       	ldi	r24, 0x0E	; 14
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    289e:	8b e1       	ldi	r24, 0x1B	; 27
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <H_LED_Void_LedOff+0x6>
    28b8:	0f 92       	push	r0
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	3b 83       	std	Y+3, r19	; 0x03
    28c8:	2a 83       	std	Y+2, r18	; 0x02
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	91 05       	cpc	r25, r1
    28d2:	d9 f0       	breq	.+54     	; 0x290a <H_LED_Void_LedOff+0x58>
    28d4:	2a 81       	ldd	r18, Y+2	; 0x02
    28d6:	3b 81       	ldd	r19, Y+3	; 0x03
    28d8:	23 30       	cpi	r18, 0x03	; 3
    28da:	31 05       	cpc	r19, r1
    28dc:	34 f4       	brge	.+12     	; 0x28ea <H_LED_Void_LedOff+0x38>
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	91 05       	cpc	r25, r1
    28e6:	61 f0       	breq	.+24     	; 0x2900 <H_LED_Void_LedOff+0x4e>
    28e8:	1e c0       	rjmp	.+60     	; 0x2926 <H_LED_Void_LedOff+0x74>
    28ea:	2a 81       	ldd	r18, Y+2	; 0x02
    28ec:	3b 81       	ldd	r19, Y+3	; 0x03
    28ee:	23 30       	cpi	r18, 0x03	; 3
    28f0:	31 05       	cpc	r19, r1
    28f2:	81 f0       	breq	.+32     	; 0x2914 <H_LED_Void_LedOff+0x62>
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	84 30       	cpi	r24, 0x04	; 4
    28fa:	91 05       	cpc	r25, r1
    28fc:	81 f0       	breq	.+32     	; 0x291e <H_LED_Void_LedOff+0x6c>
    28fe:	13 c0       	rjmp	.+38     	; 0x2926 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    2900:	80 e1       	ldi	r24, 0x10	; 16
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2908:	0e c0       	rjmp	.+28     	; 0x2926 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    290a:	8f e0       	ldi	r24, 0x0F	; 15
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2912:	09 c0       	rjmp	.+18     	; 0x2926 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2914:	8e e0       	ldi	r24, 0x0E	; 14
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    291e:	8b e1       	ldi	r24, 0x1B	; 27
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	eb 97       	sbiw	r28, 0x3b	; 59
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2948:	89 ad       	ldd	r24, Y+57	; 0x39
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	3b af       	std	Y+59, r19	; 0x3b
    2950:	2a af       	std	Y+58, r18	; 0x3a
    2952:	8a ad       	ldd	r24, Y+58	; 0x3a
    2954:	9b ad       	ldd	r25, Y+59	; 0x3b
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	91 05       	cpc	r25, r1
    295a:	09 f4       	brne	.+2      	; 0x295e <H_LED_Void_LedBlink+0x2c>
    295c:	93 c0       	rjmp	.+294    	; 0x2a84 <H_LED_Void_LedBlink+0x152>
    295e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2960:	3b ad       	ldd	r19, Y+59	; 0x3b
    2962:	23 30       	cpi	r18, 0x03	; 3
    2964:	31 05       	cpc	r19, r1
    2966:	34 f4       	brge	.+12     	; 0x2974 <H_LED_Void_LedBlink+0x42>
    2968:	8a ad       	ldd	r24, Y+58	; 0x3a
    296a:	9b ad       	ldd	r25, Y+59	; 0x3b
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	71 f0       	breq	.+28     	; 0x298e <H_LED_Void_LedBlink+0x5c>
    2972:	f8 c1       	rjmp	.+1008   	; 0x2d64 <H_LED_Void_LedBlink+0x432>
    2974:	2a ad       	ldd	r18, Y+58	; 0x3a
    2976:	3b ad       	ldd	r19, Y+59	; 0x3b
    2978:	23 30       	cpi	r18, 0x03	; 3
    297a:	31 05       	cpc	r19, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <H_LED_Void_LedBlink+0x4e>
    297e:	fd c0       	rjmp	.+506    	; 0x2b7a <H_LED_Void_LedBlink+0x248>
    2980:	8a ad       	ldd	r24, Y+58	; 0x3a
    2982:	9b ad       	ldd	r25, Y+59	; 0x3b
    2984:	84 30       	cpi	r24, 0x04	; 4
    2986:	91 05       	cpc	r25, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <H_LED_Void_LedBlink+0x5a>
    298a:	72 c1       	rjmp	.+740    	; 0x2c70 <H_LED_Void_LedBlink+0x33e>
    298c:	eb c1       	rjmp	.+982    	; 0x2d64 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    298e:	80 e1       	ldi	r24, 0x10	; 16
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a6 e9       	ldi	r26, 0x96	; 150
    299c:	b3 e4       	ldi	r27, 0x43	; 67
    299e:	8d ab       	std	Y+53, r24	; 0x35
    29a0:	9e ab       	std	Y+54, r25	; 0x36
    29a2:	af ab       	std	Y+55, r26	; 0x37
    29a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6d a9       	ldd	r22, Y+53	; 0x35
    29a8:	7e a9       	ldd	r23, Y+54	; 0x36
    29aa:	8f a9       	ldd	r24, Y+55	; 0x37
    29ac:	98 ad       	ldd	r25, Y+56	; 0x38
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	55 e4       	ldi	r21, 0x45	; 69
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	89 ab       	std	Y+49, r24	; 0x31
    29c0:	9a ab       	std	Y+50, r25	; 0x32
    29c2:	ab ab       	std	Y+51, r26	; 0x33
    29c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29c6:	69 a9       	ldd	r22, Y+49	; 0x31
    29c8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ca:	8b a9       	ldd	r24, Y+51	; 0x33
    29cc:	9c a9       	ldd	r25, Y+52	; 0x34
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	98 ab       	std	Y+48, r25	; 0x30
    29e4:	8f a7       	std	Y+47, r24	; 0x2f
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    29e8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ea:	7a a9       	ldd	r23, Y+50	; 0x32
    29ec:	8b a9       	ldd	r24, Y+51	; 0x33
    29ee:	9c a9       	ldd	r25, Y+52	; 0x34
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6d a9       	ldd	r22, Y+53	; 0x35
    2a02:	7e a9       	ldd	r23, Y+54	; 0x36
    2a04:	8f a9       	ldd	r24, Y+55	; 0x37
    2a06:	98 ad       	ldd	r25, Y+56	; 0x38
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	98 ab       	std	Y+48, r25	; 0x30
    2a26:	8f a7       	std	Y+47, r24	; 0x2f
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <H_LED_Void_LedBlink+0x116>
    2a2a:	80 e9       	ldi	r24, 0x90	; 144
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	9e a7       	std	Y+46, r25	; 0x2e
    2a30:	8d a7       	std	Y+45, r24	; 0x2d
    2a32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a34:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <H_LED_Void_LedBlink+0x104>
    2a3a:	9e a7       	std	Y+46, r25	; 0x2e
    2a3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a40:	98 a9       	ldd	r25, Y+48	; 0x30
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <H_LED_Void_LedBlink+0xf8>
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	69 a9       	ldd	r22, Y+49	; 0x31
    2a54:	7a a9       	ldd	r23, Y+50	; 0x32
    2a56:	8b a9       	ldd	r24, Y+51	; 0x33
    2a58:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a68:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6a:	9c a7       	std	Y+44, r25	; 0x2c
    2a6c:	8b a7       	std	Y+43, r24	; 0x2b
    2a6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a70:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <H_LED_Void_LedBlink+0x140>
    2a76:	9c a7       	std	Y+44, r25	; 0x2c
    2a78:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    2a7a:	80 e1       	ldi	r24, 0x10	; 16
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2a82:	70 c1       	rjmp	.+736    	; 0x2d64 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    2a84:	8f e0       	ldi	r24, 0x0F	; 15
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a6 e9       	ldi	r26, 0x96	; 150
    2a92:	b3 e4       	ldi	r27, 0x43	; 67
    2a94:	8f a3       	std	Y+39, r24	; 0x27
    2a96:	98 a7       	std	Y+40, r25	; 0x28
    2a98:	a9 a7       	std	Y+41, r26	; 0x29
    2a9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8b a3       	std	Y+35, r24	; 0x23
    2ab6:	9c a3       	std	Y+36, r25	; 0x24
    2ab8:	ad a3       	std	Y+37, r26	; 0x25
    2aba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	89 a3       	std	Y+33, r24	; 0x21
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    2ade:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6f a1       	ldd	r22, Y+39	; 0x27
    2af8:	78 a5       	ldd	r23, Y+40	; 0x28
    2afa:	89 a5       	ldd	r24, Y+41	; 0x29
    2afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <H_LED_Void_LedBlink+0x20c>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	98 a3       	std	Y+32, r25	; 0x20
    2b26:	8f 8f       	std	Y+31, r24	; 0x1f
    2b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <H_LED_Void_LedBlink+0x1fa>
    2b30:	98 a3       	std	Y+32, r25	; 0x20
    2b32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	89 a1       	ldd	r24, Y+33	; 0x21
    2b36:	9a a1       	ldd	r25, Y+34	; 0x22
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b40:	9a a1       	ldd	r25, Y+34	; 0x22
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <H_LED_Void_LedBlink+0x1ee>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9a a3       	std	Y+34, r25	; 0x22
    2b5a:	89 a3       	std	Y+33, r24	; 0x21
    2b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b60:	9e 8f       	std	Y+30, r25	; 0x1e
    2b62:	8d 8f       	std	Y+29, r24	; 0x1d
    2b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <H_LED_Void_LedBlink+0x236>
    2b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b6e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2b70:	8f e0       	ldi	r24, 0x0F	; 15
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2b78:	f5 c0       	rjmp	.+490    	; 0x2d64 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2b7a:	8e e0       	ldi	r24, 0x0E	; 14
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a6 e9       	ldi	r26, 0x96	; 150
    2b88:	b3 e4       	ldi	r27, 0x43	; 67
    2b8a:	89 8f       	std	Y+25, r24	; 0x19
    2b8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	69 8d       	ldd	r22, Y+25	; 0x19
    2b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ba0:	55 e4       	ldi	r21, 0x45	; 69
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8d 8b       	std	Y+21, r24	; 0x15
    2bac:	9e 8b       	std	Y+22, r25	; 0x16
    2bae:	af 8b       	std	Y+23, r26	; 0x17
    2bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc6:	88 23       	and	r24, r24
    2bc8:	2c f4       	brge	.+10     	; 0x2bd4 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
    2bd2:	3f c0       	rjmp	.+126    	; 0x2c52 <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bda:	98 8d       	ldd	r25, Y+24	; 0x18
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	3f ef       	ldi	r19, 0xFF	; 255
    2be0:	4f e7       	ldi	r20, 0x7F	; 127
    2be2:	57 e4       	ldi	r21, 0x47	; 71
    2be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be8:	18 16       	cp	r1, r24
    2bea:	4c f5       	brge	.+82     	; 0x2c3e <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bec:	69 8d       	ldd	r22, Y+25	; 0x19
    2bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <H_LED_Void_LedBlink+0x302>
    2c16:	80 e9       	ldi	r24, 0x90	; 144
    2c18:	91 e0       	ldi	r25, 0x01	; 1
    2c1a:	9a 8b       	std	Y+18, r25	; 0x12
    2c1c:	89 8b       	std	Y+17, r24	; 0x11
    2c1e:	89 89       	ldd	r24, Y+17	; 0x11
    2c20:	9a 89       	ldd	r25, Y+18	; 0x12
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <H_LED_Void_LedBlink+0x2f0>
    2c26:	9a 8b       	std	Y+18, r25	; 0x12
    2c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c34:	8b 89       	ldd	r24, Y+19	; 0x13
    2c36:	9c 89       	ldd	r25, Y+20	; 0x14
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <H_LED_Void_LedBlink+0x2e4>
    2c3c:	14 c0       	rjmp	.+40     	; 0x2c66 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c40:	7e 89       	ldd	r23, Y+22	; 0x16
    2c42:	8f 89       	ldd	r24, Y+23	; 0x17
    2c44:	98 8d       	ldd	r25, Y+24	; 0x18
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9c 8b       	std	Y+20, r25	; 0x14
    2c50:	8b 8b       	std	Y+19, r24	; 0x13
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	9c 89       	ldd	r25, Y+20	; 0x14
    2c56:	98 8b       	std	Y+16, r25	; 0x10
    2c58:	8f 87       	std	Y+15, r24	; 0x0f
    2c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5c:	98 89       	ldd	r25, Y+16	; 0x10
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <H_LED_Void_LedBlink+0x32c>
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2c66:	8e e0       	ldi	r24, 0x0E	; 14
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2c6e:	7a c0       	rjmp	.+244    	; 0x2d64 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    2c70:	8b e1       	ldi	r24, 0x1B	; 27
    2c72:	61 e0       	ldi	r22, 0x01	; 1
    2c74:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a6 e9       	ldi	r26, 0x96	; 150
    2c7e:	b3 e4       	ldi	r27, 0x43	; 67
    2c80:	8b 87       	std	Y+11, r24	; 0x0b
    2c82:	9c 87       	std	Y+12, r25	; 0x0c
    2c84:	ad 87       	std	Y+13, r26	; 0x0d
    2c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	55 e4       	ldi	r21, 0x45	; 69
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8f 83       	std	Y+7, r24	; 0x07
    2ca2:	98 87       	std	Y+8, r25	; 0x08
    2ca4:	a9 87       	std	Y+9, r26	; 0x09
    2ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <H_LED_Void_LedBlink+0x3f8>
    2d0c:	80 e9       	ldi	r24, 0x90	; 144
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <H_LED_Void_LedBlink+0x3e6>
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <H_LED_Void_LedBlink+0x3da>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6f 81       	ldd	r22, Y+7	; 0x07
    2d36:	78 85       	ldd	r23, Y+8	; 0x08
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	9a 81       	ldd	r25, Y+2	; 0x02
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <H_LED_Void_LedBlink+0x422>
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2d5c:	8b e1       	ldi	r24, 0x1B	; 27
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	0e 94 b9 06 	call	0xd72	; 0xd72 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    2d64:	eb 96       	adiw	r28, 0x3b	; 59
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <H_LED_Void_LedTog+0x6>
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	3b 83       	std	Y+3, r19	; 0x03
    2d8c:	2a 83       	std	Y+2, r18	; 0x02
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	9b 81       	ldd	r25, Y+3	; 0x03
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	91 05       	cpc	r25, r1
    2d96:	d1 f0       	breq	.+52     	; 0x2dcc <H_LED_Void_LedTog+0x56>
    2d98:	2a 81       	ldd	r18, Y+2	; 0x02
    2d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d9c:	23 30       	cpi	r18, 0x03	; 3
    2d9e:	31 05       	cpc	r19, r1
    2da0:	34 f4       	brge	.+12     	; 0x2dae <H_LED_Void_LedTog+0x38>
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	9b 81       	ldd	r25, Y+3	; 0x03
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	91 05       	cpc	r25, r1
    2daa:	61 f0       	breq	.+24     	; 0x2dc4 <H_LED_Void_LedTog+0x4e>
    2dac:	1a c0       	rjmp	.+52     	; 0x2de2 <H_LED_Void_LedTog+0x6c>
    2dae:	2a 81       	ldd	r18, Y+2	; 0x02
    2db0:	3b 81       	ldd	r19, Y+3	; 0x03
    2db2:	23 30       	cpi	r18, 0x03	; 3
    2db4:	31 05       	cpc	r19, r1
    2db6:	71 f0       	breq	.+28     	; 0x2dd4 <H_LED_Void_LedTog+0x5e>
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	84 30       	cpi	r24, 0x04	; 4
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	69 f0       	breq	.+26     	; 0x2ddc <H_LED_Void_LedTog+0x66>
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2dc4:	80 e1       	ldi	r24, 0x10	; 16
    2dc6:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2dca:	0b c0       	rjmp	.+22     	; 0x2de2 <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2dcc:	8f e0       	ldi	r24, 0x0F	; 15
    2dce:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2dd2:	07 c0       	rjmp	.+14     	; 0x2de2 <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2dd4:	8e e0       	ldi	r24, 0x0E	; 14
    2dd6:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
    2dda:	03 c0       	rjmp	.+6      	; 0x2de2 <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2ddc:	8b e1       	ldi	r24, 0x1B	; 27
    2dde:	0e 94 56 08 	call	0x10ac	; 0x10ac <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <UART_Init>:
#include "UART_Private.h"

static void(*UARTPfun)(u8 )=NULL;

void UART_Init(void)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	/*set Baud rate :9600*/
	UBRRH_REG =(u8)(UART_BAUD_RATE>>8);
    2df6:	e0 e4       	ldi	r30, 0x40	; 64
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	10 82       	st	Z, r1
    UBRRL_REG =(u8)UART_BAUD_RATE ;
    2dfc:	e9 e2       	ldi	r30, 0x29	; 41
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 e1       	ldi	r24, 0x10	; 16
    2e02:	80 83       	st	Z, r24
	/* TO ENABLE RX and TX CIRCUIT */
	UCSRB_REG = (1<<RXEN_BIT)|(1<<TXEN_BIT);
    2e04:	ea e2       	ldi	r30, 0x2A	; 42
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	88 e1       	ldi	r24, 0x18	; 24
    2e0a:	80 83       	st	Z, r24
	/*set frame format*/
	UCSRC_REG = (1<<URSEL_BIT)|(UART_STOP_BIT<<USBS_BIT)|(UART_FRAME_SIZE<<UCSZ0_BIT);
    2e0c:	e0 e4       	ldi	r30, 0x40	; 64
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	86 e8       	ldi	r24, 0x86	; 134
    2e12:	80 83       	st	Z, r24
}
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <UART_SendByte>:

void UART_SendByte(u8 Data)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <UART_SendByte+0x6>
    2e20:	0f 92       	push	r0
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Counter=0;
    2e28:	1a 82       	std	Y+2, r1	; 0x02
    2e2a:	19 82       	std	Y+1, r1	; 0x01
    2e2c:	05 c0       	rjmp	.+10     	; 0x2e38 <UART_SendByte+0x1e>
	while((!(GET_BIT(UCSRA_REG,UDRE_BIT)))&&(Local_u16Counter<UART_POLLING_TIME) )
	{
		Local_u16Counter++;
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendByte(u8 Data)
{
	u16 Local_u16Counter=0;
	while((!(GET_BIT(UCSRA_REG,UDRE_BIT)))&&(Local_u16Counter<UART_POLLING_TIME) )
    2e38:	eb e2       	ldi	r30, 0x2B	; 43
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	82 95       	swap	r24
    2e40:	86 95       	lsr	r24
    2e42:	87 70       	andi	r24, 0x07	; 7
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	81 70       	andi	r24, 0x01	; 1
    2e4a:	90 70       	andi	r25, 0x00	; 0
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	31 f4       	brne	.+12     	; 0x2e5c <UART_SendByte+0x42>
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	23 ec       	ldi	r18, 0xC3	; 195
    2e56:	80 35       	cpi	r24, 0x50	; 80
    2e58:	92 07       	cpc	r25, r18
    2e5a:	48 f3       	brcs	.-46     	; 0x2e2e <UART_SendByte+0x14>
	{
		Local_u16Counter++;
	}
	UDR_REG = Data;
    2e5c:	ec e2       	ldi	r30, 0x2C	; 44
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	80 83       	st	Z, r24
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <UART_SendString>:

u8 UART_SendString(u8*Copy_Pu8Arr , u8 Copy_u8size)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <UART_SendString+0x6>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <UART_SendString+0x8>
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <UART_SendString+0xa>
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	9d 83       	std	Y+5, r25	; 0x05
    2e80:	8c 83       	std	Y+4, r24	; 0x04
    2e82:	6e 83       	std	Y+6, r22	; 0x06
	u8 local_u8RetuenState = STD_OK;
    2e84:	1b 82       	std	Y+3, r1	; 0x03
	if (Copy_Pu8Arr != NULL)
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	d9 f0       	breq	.+54     	; 0x2ec4 <UART_SendString+0x54>
	{
		for(int i =0 ;i<Copy_u8size;i++)
    2e8e:	1a 82       	std	Y+2, r1	; 0x02
    2e90:	19 82       	std	Y+1, r1	; 0x01
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <UART_SendString+0x42>
		{
			UART_SendByte(Copy_Pu8Arr[i]);
    2e94:	29 81       	ldd	r18, Y+1	; 0x01
    2e96:	3a 81       	ldd	r19, Y+2	; 0x02
    2e98:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	e2 0f       	add	r30, r18
    2ea0:	f3 1f       	adc	r31, r19
    2ea2:	80 81       	ld	r24, Z
    2ea4:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_SendByte>
u8 UART_SendString(u8*Copy_Pu8Arr , u8 Copy_u8size)
{
	u8 local_u8RetuenState = STD_OK;
	if (Copy_Pu8Arr != NULL)
	{
		for(int i =0 ;i<Copy_u8size;i++)
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebc:	82 17       	cp	r24, r18
    2ebe:	93 07       	cpc	r25, r19
    2ec0:	4c f3       	brlt	.-46     	; 0x2e94 <UART_SendString+0x24>
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <UART_SendString+0x58>
			UART_SendByte(Copy_Pu8Arr[i]);
		}
	}
	else
	{
		local_u8RetuenState = STD_NOK;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8RetuenState;
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2eca:	26 96       	adiw	r28, 0x06	; 6
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <UART_ReceiveByteSync>:

u8   UART_ReceiveByteSync(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <UART_ReceiveByteSync+0x6>
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Counter =0;
    2ee6:	1a 82       	std	Y+2, r1	; 0x02
    2ee8:	19 82       	std	Y+1, r1	; 0x01
    2eea:	05 c0       	rjmp	.+10     	; 0x2ef6 <UART_ReceiveByteSync+0x1a>
	/* Wait for data to be received */
	while ( !(GET_BIT(UCSRA_REG,RXC_BIT)) && (Local_u16Counter<UART_POLLING_TIME))
	{
		Local_u16Counter++;
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01

u8   UART_ReceiveByteSync(void)
{
	u16 Local_u16Counter =0;
	/* Wait for data to be received */
	while ( !(GET_BIT(UCSRA_REG,RXC_BIT)) && (Local_u16Counter<UART_POLLING_TIME))
    2ef6:	eb e2       	ldi	r30, 0x2B	; 43
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	88 23       	and	r24, r24
    2efe:	34 f0       	brlt	.+12     	; 0x2f0c <UART_ReceiveByteSync+0x30>
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	23 ec       	ldi	r18, 0xC3	; 195
    2f06:	80 35       	cpi	r24, 0x50	; 80
    2f08:	92 07       	cpc	r25, r18
    2f0a:	80 f3       	brcs	.-32     	; 0x2eec <UART_ReceiveByteSync+0x10>
	{
		Local_u16Counter++;
	}
	/* Get and return received data from buffer */
	return UDR_REG;
    2f0c:	ec e2       	ldi	r30, 0x2C	; 44
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <UART_ReceiveByteAsyncCallBack>:

u8 UART_ReceiveByteAsyncCallBack(void(*Pfun)(u8 ))
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <UART_ReceiveByteAsyncCallBack+0x6>
    2f22:	0f 92       	push	r0
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	9b 83       	std	Y+3, r25	; 0x03
    2f2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8REturnType =STD_OK;
    2f2c:	19 82       	std	Y+1, r1	; 0x01
	if(Pfun!=NULL)
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	71 f0       	breq	.+28     	; 0x2f52 <UART_ReceiveByteAsyncCallBack+0x36>
	{
		/*set callback*/
		UARTPfun = Pfun;
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	90 93 b9 00 	sts	0x00B9, r25
    2f3e:	80 93 b8 00 	sts	0x00B8, r24
		/*enable receive int*/
		SET_BIT(UCSRB_REG,RXCIE_BIT);
    2f42:	aa e2       	ldi	r26, 0x2A	; 42
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	ea e2       	ldi	r30, 0x2A	; 42
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	80 68       	ori	r24, 0x80	; 128
    2f4e:	8c 93       	st	X, r24
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <UART_ReceiveByteAsyncCallBack+0x3a>
	}
	else 
	{
		local_u8REturnType =STD_NOK;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8REturnType;
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <__vector_13>:

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    2f64:	1f 92       	push	r1
    2f66:	0f 92       	push	r0
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	2f 93       	push	r18
    2f70:	3f 93       	push	r19
    2f72:	4f 93       	push	r20
    2f74:	5f 93       	push	r21
    2f76:	6f 93       	push	r22
    2f78:	7f 93       	push	r23
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	af 93       	push	r26
    2f80:	bf 93       	push	r27
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    UARTPfun(UDR_REG);
    2f8e:	e0 91 b8 00 	lds	r30, 0x00B8
    2f92:	f0 91 b9 00 	lds	r31, 0x00B9
    2f96:	ac e2       	ldi	r26, 0x2C	; 44
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	8c 91       	ld	r24, X
    2f9c:	09 95       	icall
}
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	ff 91       	pop	r31
    2fa4:	ef 91       	pop	r30
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	0f 90       	pop	r0
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	0f 90       	pop	r0
    2fc0:	1f 90       	pop	r1
    2fc2:	18 95       	reti

00002fc4 <setup>:




void setup (void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    H_Lcd_Void_LCDInit();
    2fcc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <H_Lcd_Void_LCDInit>
    H_LED_Void_LedInit(LED_GRN);
    2fd0:	83 e0       	ldi	r24, 0x03	; 3
    2fd2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_YEL);
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <H_LED_Void_LedInit>
    FP_intit();
    2fdc:	0e 94 42 0a 	call	0x1484	; 0x1484 <FP_intit>
    
}
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <main>:

int main(void)
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
	setup();
    2fee:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <setup>
    
    FP_setNewFinger(2);
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <FP_setNewFinger>

    FP_CheckMatch(2);
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <FP_CheckMatch>
    3002:	ff cf       	rjmp	.-2      	; 0x3002 <main+0x1c>

00003004 <__udivmodqi4>:
    3004:	99 1b       	sub	r25, r25
    3006:	79 e0       	ldi	r23, 0x09	; 9
    3008:	04 c0       	rjmp	.+8      	; 0x3012 <__udivmodqi4_ep>

0000300a <__udivmodqi4_loop>:
    300a:	99 1f       	adc	r25, r25
    300c:	96 17       	cp	r25, r22
    300e:	08 f0       	brcs	.+2      	; 0x3012 <__udivmodqi4_ep>
    3010:	96 1b       	sub	r25, r22

00003012 <__udivmodqi4_ep>:
    3012:	88 1f       	adc	r24, r24
    3014:	7a 95       	dec	r23
    3016:	c9 f7       	brne	.-14     	; 0x300a <__udivmodqi4_loop>
    3018:	80 95       	com	r24
    301a:	08 95       	ret

0000301c <__divmodsi4>:
    301c:	97 fb       	bst	r25, 7
    301e:	09 2e       	mov	r0, r25
    3020:	05 26       	eor	r0, r21
    3022:	0e d0       	rcall	.+28     	; 0x3040 <__divmodsi4_neg1>
    3024:	57 fd       	sbrc	r21, 7
    3026:	04 d0       	rcall	.+8      	; 0x3030 <__divmodsi4_neg2>
    3028:	14 d0       	rcall	.+40     	; 0x3052 <__udivmodsi4>
    302a:	0a d0       	rcall	.+20     	; 0x3040 <__divmodsi4_neg1>
    302c:	00 1c       	adc	r0, r0
    302e:	38 f4       	brcc	.+14     	; 0x303e <__divmodsi4_exit>

00003030 <__divmodsi4_neg2>:
    3030:	50 95       	com	r21
    3032:	40 95       	com	r20
    3034:	30 95       	com	r19
    3036:	21 95       	neg	r18
    3038:	3f 4f       	sbci	r19, 0xFF	; 255
    303a:	4f 4f       	sbci	r20, 0xFF	; 255
    303c:	5f 4f       	sbci	r21, 0xFF	; 255

0000303e <__divmodsi4_exit>:
    303e:	08 95       	ret

00003040 <__divmodsi4_neg1>:
    3040:	f6 f7       	brtc	.-4      	; 0x303e <__divmodsi4_exit>
    3042:	90 95       	com	r25
    3044:	80 95       	com	r24
    3046:	70 95       	com	r23
    3048:	61 95       	neg	r22
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	8f 4f       	sbci	r24, 0xFF	; 255
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	08 95       	ret

00003052 <__udivmodsi4>:
    3052:	a1 e2       	ldi	r26, 0x21	; 33
    3054:	1a 2e       	mov	r1, r26
    3056:	aa 1b       	sub	r26, r26
    3058:	bb 1b       	sub	r27, r27
    305a:	fd 01       	movw	r30, r26
    305c:	0d c0       	rjmp	.+26     	; 0x3078 <__udivmodsi4_ep>

0000305e <__udivmodsi4_loop>:
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	ee 1f       	adc	r30, r30
    3064:	ff 1f       	adc	r31, r31
    3066:	a2 17       	cp	r26, r18
    3068:	b3 07       	cpc	r27, r19
    306a:	e4 07       	cpc	r30, r20
    306c:	f5 07       	cpc	r31, r21
    306e:	20 f0       	brcs	.+8      	; 0x3078 <__udivmodsi4_ep>
    3070:	a2 1b       	sub	r26, r18
    3072:	b3 0b       	sbc	r27, r19
    3074:	e4 0b       	sbc	r30, r20
    3076:	f5 0b       	sbc	r31, r21

00003078 <__udivmodsi4_ep>:
    3078:	66 1f       	adc	r22, r22
    307a:	77 1f       	adc	r23, r23
    307c:	88 1f       	adc	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	1a 94       	dec	r1
    3082:	69 f7       	brne	.-38     	; 0x305e <__udivmodsi4_loop>
    3084:	60 95       	com	r22
    3086:	70 95       	com	r23
    3088:	80 95       	com	r24
    308a:	90 95       	com	r25
    308c:	9b 01       	movw	r18, r22
    308e:	ac 01       	movw	r20, r24
    3090:	bd 01       	movw	r22, r26
    3092:	cf 01       	movw	r24, r30
    3094:	08 95       	ret

00003096 <__prologue_saves__>:
    3096:	2f 92       	push	r2
    3098:	3f 92       	push	r3
    309a:	4f 92       	push	r4
    309c:	5f 92       	push	r5
    309e:	6f 92       	push	r6
    30a0:	7f 92       	push	r7
    30a2:	8f 92       	push	r8
    30a4:	9f 92       	push	r9
    30a6:	af 92       	push	r10
    30a8:	bf 92       	push	r11
    30aa:	cf 92       	push	r12
    30ac:	df 92       	push	r13
    30ae:	ef 92       	push	r14
    30b0:	ff 92       	push	r15
    30b2:	0f 93       	push	r16
    30b4:	1f 93       	push	r17
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	ca 1b       	sub	r28, r26
    30c0:	db 0b       	sbc	r29, r27
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	09 94       	ijmp

000030ce <__epilogue_restores__>:
    30ce:	2a 88       	ldd	r2, Y+18	; 0x12
    30d0:	39 88       	ldd	r3, Y+17	; 0x11
    30d2:	48 88       	ldd	r4, Y+16	; 0x10
    30d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    30da:	8c 84       	ldd	r8, Y+12	; 0x0c
    30dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    30de:	aa 84       	ldd	r10, Y+10	; 0x0a
    30e0:	b9 84       	ldd	r11, Y+9	; 0x09
    30e2:	c8 84       	ldd	r12, Y+8	; 0x08
    30e4:	df 80       	ldd	r13, Y+7	; 0x07
    30e6:	ee 80       	ldd	r14, Y+6	; 0x06
    30e8:	fd 80       	ldd	r15, Y+5	; 0x05
    30ea:	0c 81       	ldd	r16, Y+4	; 0x04
    30ec:	1b 81       	ldd	r17, Y+3	; 0x03
    30ee:	aa 81       	ldd	r26, Y+2	; 0x02
    30f0:	b9 81       	ldd	r27, Y+1	; 0x01
    30f2:	ce 0f       	add	r28, r30
    30f4:	d1 1d       	adc	r29, r1
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	ed 01       	movw	r28, r26
    3102:	08 95       	ret

00003104 <_exit>:
    3104:	f8 94       	cli

00003106 <__stop_program>:
    3106:	ff cf       	rjmp	.-2      	; 0x3106 <__stop_program>
