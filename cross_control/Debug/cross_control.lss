
cross_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000049b2  00004a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008001fe  008001fe  00004be4  2**0
                  ALLOC
  3 .stab         00004854  00000000  00000000  00004be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000162c  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000adf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fc16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_1>
       8:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_2>
       c:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <main>
      8a:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ed       	ldi	r26, 0xDD	; 221
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ed       	ldi	r24, 0xDD	; 221
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 24 	jmp	0x4950	; 0x4950 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ed       	ldi	r22, 0xDD	; 221
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cc 24 	jmp	0x4998	; 0x4998 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a8 24 	jmp	0x4950	; 0x4950 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 51       	subi	r30, 0x1B	; 27
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24

}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <M_ADC_U16_ADCRead+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <M_ADC_U16_ADCRead+0x8>
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	1a 82       	std	Y+2, r1	; 0x02
     ec0:	1b 82       	std	Y+3, r1	; 0x03
     ec2:	1c 82       	std	Y+4, r1	; 0x04
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG & 0b11100000;
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 7e       	andi	r24, 0xE0	; 224
     ede:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
     ee0:	a7 e2       	ldi	r26, 0x27	; 39
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e7 e2       	ldi	r30, 0x27	; 39
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	90 81       	ld	r25, Z
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	89 2b       	or	r24, r25
     eee:	8c 93       	st	X, r24
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <M_ADC_U16_ADCRead+0x72>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	ab 81       	ldd	r26, Y+3	; 0x03
     ef8:	bc 81       	ldd	r27, Y+4	; 0x04
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	a1 1d       	adc	r26, r1
     efe:	b1 1d       	adc	r27, r1
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	ab 83       	std	Y+3, r26	; 0x03
     f06:	bc 83       	std	Y+4, r27	; 0x04
		if((GET_BIT((ADCSRA_REG),(ADIF_BIT))) == ADC_CONVERSION_COMPLETE)
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	82 95       	swap	r24
     f10:	8f 70       	andi	r24, 0x0F	; 15
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	88 23       	and	r24, r24
     f1c:	61 f4       	brne	.+24     	; 0xf36 <M_ADC_U16_ADCRead+0x8a>
	u32 Local_U32_Counter = 0;
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	ab 81       	ldd	r26, Y+3	; 0x03
     f24:	bc 81       	ldd	r27, Y+4	; 0x04
     f26:	80 38       	cpi	r24, 0x80	; 128
     f28:	24 e8       	ldi	r18, 0x84	; 132
     f2a:	92 07       	cpc	r25, r18
     f2c:	2e e1       	ldi	r18, 0x1E	; 30
     f2e:	a2 07       	cpc	r26, r18
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	b2 07       	cpc	r27, r18
     f34:	f0 f2       	brcs	.-68     	; 0xef2 <M_ADC_U16_ADCRead+0x46>
		if((GET_BIT((ADCSRA_REG),(ADIF_BIT))) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
     f36:	e4 e2       	ldi	r30, 0x24	; 36
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
     f56:	84 e2       	ldi	r24, 0x24	; 36
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     f6c:	84 e2       	ldi	r24, 0x24	; 36
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     f82:	84 e2       	ldi	r24, 0x24	; 36
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
     f98:	84 e2       	ldi	r24, 0x24	; 36
     f9a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	2e 97       	sbiw	r28, 0x0e	; 14
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a8 ec       	ldi	r26, 0xC8	; 200
     fc6:	b2 e4       	ldi	r27, 0x42	; 66
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a e7       	ldi	r20, 0x7A	; 122
     fde:	55 e4       	ldi	r21, 0x45	; 69
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <H_Buzzer_Void_BuzzerOnce+0xce>
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <H_Buzzer_Void_BuzzerOnce+0xbc>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <H_Buzzer_Void_BuzzerOnce+0xb0>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <H_Buzzer_Void_BuzzerOnce+0xf8>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    10a4:	84 e2       	ldi	r24, 0x24	; 36
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    10ac:	2e 96       	adiw	r28, 0x0e	; 14
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	aa 97       	sbiw	r28, 0x2a	; 42
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    10d2:	84 e2       	ldi	r24, 0x24	; 36
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a8 ec       	ldi	r26, 0xC8	; 200
    10e0:	b2 e4       	ldi	r27, 0x42	; 66
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	55 e4       	ldi	r21, 0x45	; 69
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <H_Buzzer_Void_BuzzerTwice+0xce>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <H_Buzzer_Void_BuzzerTwice+0xbc>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <H_Buzzer_Void_BuzzerTwice+0xb0>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <H_Buzzer_Void_BuzzerTwice+0xf8>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    11be:	84 e2       	ldi	r24, 0x24	; 36
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e7       	ldi	r26, 0x70	; 112
    11cc:	b2 e4       	ldi	r27, 0x42	; 66
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a e7       	ldi	r20, 0x7A	; 122
    11e4:	55 e4       	ldi	r21, 0x45	; 69
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <H_Buzzer_Void_BuzzerTwice+0x1ba>
    125a:	80 e9       	ldi	r24, 0x90	; 144
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <H_Buzzer_Void_BuzzerTwice+0x1a8>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <H_Buzzer_Void_BuzzerTwice+0x19c>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <H_Buzzer_Void_BuzzerTwice+0x1e4>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    12aa:	84 e2       	ldi	r24, 0x24	; 36
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a8 ec       	ldi	r26, 0xC8	; 200
    12b8:	b2 e4       	ldi	r27, 0x42	; 66
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
    12be:	ad 87       	std	Y+13, r26	; 0x0d
    12c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
    12de:	a9 87       	std	Y+9, r26	; 0x09
    12e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <H_Buzzer_Void_BuzzerTwice+0x2a6>
    1346:	80 e9       	ldi	r24, 0x90	; 144
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <H_Buzzer_Void_BuzzerTwice+0x294>
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <H_Buzzer_Void_BuzzerTwice+0x288>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <H_Buzzer_Void_BuzzerTwice+0x2d0>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    1396:	84 e2       	ldi	r24, 0x24	; 36
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    139e:	aa 96       	adiw	r28, 0x2a	; 42
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	2a 97       	sbiw	r28, 0x0a	; 10
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	69 2f       	mov	r22, r25
    13ce:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    13d2:	89 2f       	mov	r24, r25
    13d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9a e0       	ldi	r25, 0x0A	; 10
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    13e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3a 87       	std	Y+10, r19	; 0x0a
    13ea:	29 87       	std	Y+9, r18	; 0x09
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <M_DIO_Void_SetPinDirection+0x52>
    13f4:	29 85       	ldd	r18, Y+9	; 0x09
    13f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f8:	21 30       	cpi	r18, 0x01	; 1
    13fa:	31 05       	cpc	r19, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <M_DIO_Void_SetPinDirection+0x50>
    13fe:	76 c0       	rjmp	.+236    	; 0x14ec <M_DIO_Void_SetPinDirection+0x13c>
    1400:	e4 c0       	rjmp	.+456    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	38 87       	std	Y+8, r19	; 0x08
    140a:	2f 83       	std	Y+7, r18	; 0x07
    140c:	8f 81       	ldd	r24, Y+7	; 0x07
    140e:	98 85       	ldd	r25, Y+8	; 0x08
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	91 05       	cpc	r25, r1
    1414:	61 f1       	breq	.+88     	; 0x146e <M_DIO_Void_SetPinDirection+0xbe>
    1416:	2f 81       	ldd	r18, Y+7	; 0x07
    1418:	38 85       	ldd	r19, Y+8	; 0x08
    141a:	23 30       	cpi	r18, 0x03	; 3
    141c:	31 05       	cpc	r19, r1
    141e:	34 f4       	brge	.+12     	; 0x142c <M_DIO_Void_SetPinDirection+0x7c>
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	98 85       	ldd	r25, Y+8	; 0x08
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	69 f0       	breq	.+26     	; 0x1444 <M_DIO_Void_SetPinDirection+0x94>
    142a:	cf c0       	rjmp	.+414    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
    142c:	2f 81       	ldd	r18, Y+7	; 0x07
    142e:	38 85       	ldd	r19, Y+8	; 0x08
    1430:	23 30       	cpi	r18, 0x03	; 3
    1432:	31 05       	cpc	r19, r1
    1434:	89 f1       	breq	.+98     	; 0x1498 <M_DIO_Void_SetPinDirection+0xe8>
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <M_DIO_Void_SetPinDirection+0x92>
    1440:	40 c0       	rjmp	.+128    	; 0x14c2 <M_DIO_Void_SetPinDirection+0x112>
    1442:	c3 c0       	rjmp	.+390    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    1444:	aa e3       	ldi	r26, 0x3A	; 58
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ea e3       	ldi	r30, 0x3A	; 58
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <M_DIO_Void_SetPinDirection+0xb2>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <M_DIO_Void_SetPinDirection+0xae>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	ae c0       	rjmp	.+348    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    146e:	a7 e3       	ldi	r26, 0x37	; 55
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e7 e3       	ldi	r30, 0x37	; 55
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <M_DIO_Void_SetPinDirection+0xdc>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <M_DIO_Void_SetPinDirection+0xd8>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	99 c0       	rjmp	.+306    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1498:	a4 e3       	ldi	r26, 0x34	; 52
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <M_DIO_Void_SetPinDirection+0x106>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <M_DIO_Void_SetPinDirection+0x102>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	84 c0       	rjmp	.+264    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <M_DIO_Void_SetPinDirection+0x130>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <M_DIO_Void_SetPinDirection+0x12c>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	6f c0       	rjmp	.+222    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Group)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	51 f1       	breq	.+84     	; 0x1554 <M_DIO_Void_SetPinDirection+0x1a4>
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	31 05       	cpc	r19, r1
    1508:	34 f4       	brge	.+12     	; 0x1516 <M_DIO_Void_SetPinDirection+0x166>
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	61 f0       	breq	.+24     	; 0x152c <M_DIO_Void_SetPinDirection+0x17c>
    1514:	5a c0       	rjmp	.+180    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	23 30       	cpi	r18, 0x03	; 3
    151c:	31 05       	cpc	r19, r1
    151e:	71 f1       	breq	.+92     	; 0x157c <M_DIO_Void_SetPinDirection+0x1cc>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	91 05       	cpc	r25, r1
    1528:	e9 f1       	breq	.+122    	; 0x15a4 <M_DIO_Void_SetPinDirection+0x1f4>
    152a:	4f c0       	rjmp	.+158    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    152c:	aa e3       	ldi	r26, 0x3A	; 58
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_Void_SetPinDirection+0x19a>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_Void_SetPinDirection+0x196>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	3b c0       	rjmp	.+118    	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <M_DIO_Void_SetPinDirection+0x1c2>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <M_DIO_Void_SetPinDirection+0x1be>
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    157c:	a4 e3       	ldi	r26, 0x34	; 52
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e4 e3       	ldi	r30, 0x34	; 52
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <M_DIO_Void_SetPinDirection+0x1ea>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <M_DIO_Void_SetPinDirection+0x1e6>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	13 c0       	rjmp	.+38     	; 0x15ca <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    15a4:	a1 e3       	ldi	r26, 0x31	; 49
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e1 e3       	ldi	r30, 0x31	; 49
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <M_DIO_Void_SetPinDirection+0x212>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <M_DIO_Void_SetPinDirection+0x20e>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
		default:                                break;
		}
		break;
	default:    break;
	}
}
    15ca:	2a 96       	adiw	r28, 0x0a	; 10
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	2a 97       	sbiw	r28, 0x0a	; 10
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9a e0       	ldi	r25, 0x0A	; 10
    15f8:	69 2f       	mov	r22, r25
    15fa:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    15fe:	89 2f       	mov	r24, r25
    1600:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9a e0       	ldi	r25, 0x0A	; 10
    1606:	69 2f       	mov	r22, r25
    1608:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    160c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3a 87       	std	Y+10, r19	; 0x0a
    1616:	29 87       	std	Y+9, r18	; 0x09
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	39 f0       	breq	.+14     	; 0x162e <M_DIO_Void_SetPinValue+0x52>
    1620:	29 85       	ldd	r18, Y+9	; 0x09
    1622:	3a 85       	ldd	r19, Y+10	; 0x0a
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <M_DIO_Void_SetPinValue+0x50>
    162a:	76 c0       	rjmp	.+236    	; 0x1718 <M_DIO_Void_SetPinValue+0x13c>
    162c:	e4 c0       	rjmp	.+456    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	38 87       	std	Y+8, r19	; 0x08
    1636:	2f 83       	std	Y+7, r18	; 0x07
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	91 05       	cpc	r25, r1
    1640:	61 f1       	breq	.+88     	; 0x169a <M_DIO_Void_SetPinValue+0xbe>
    1642:	2f 81       	ldd	r18, Y+7	; 0x07
    1644:	38 85       	ldd	r19, Y+8	; 0x08
    1646:	23 30       	cpi	r18, 0x03	; 3
    1648:	31 05       	cpc	r19, r1
    164a:	34 f4       	brge	.+12     	; 0x1658 <M_DIO_Void_SetPinValue+0x7c>
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	98 85       	ldd	r25, Y+8	; 0x08
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	69 f0       	breq	.+26     	; 0x1670 <M_DIO_Void_SetPinValue+0x94>
    1656:	cf c0       	rjmp	.+414    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
    1658:	2f 81       	ldd	r18, Y+7	; 0x07
    165a:	38 85       	ldd	r19, Y+8	; 0x08
    165c:	23 30       	cpi	r18, 0x03	; 3
    165e:	31 05       	cpc	r19, r1
    1660:	89 f1       	breq	.+98     	; 0x16c4 <M_DIO_Void_SetPinValue+0xe8>
    1662:	8f 81       	ldd	r24, Y+7	; 0x07
    1664:	98 85       	ldd	r25, Y+8	; 0x08
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <M_DIO_Void_SetPinValue+0x92>
    166c:	40 c0       	rjmp	.+128    	; 0x16ee <M_DIO_Void_SetPinValue+0x112>
    166e:	c3 c0       	rjmp	.+390    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1670:	ab e3       	ldi	r26, 0x3B	; 59
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	eb e3       	ldi	r30, 0x3B	; 59
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <M_DIO_Void_SetPinValue+0xb2>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <M_DIO_Void_SetPinValue+0xae>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	ae c0       	rjmp	.+348    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <M_DIO_Void_SetPinValue+0xdc>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <M_DIO_Void_SetPinValue+0xd8>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	99 c0       	rjmp	.+306    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <M_DIO_Void_SetPinValue+0x106>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <M_DIO_Void_SetPinValue+0x102>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	84 c0       	rjmp	.+264    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <M_DIO_Void_SetPinValue+0x130>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <M_DIO_Void_SetPinValue+0x12c>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	6f c0       	rjmp	.+222    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Group)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3e 83       	std	Y+6, r19	; 0x06
    1720:	2d 83       	std	Y+5, r18	; 0x05
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	51 f1       	breq	.+84     	; 0x1780 <M_DIO_Void_SetPinValue+0x1a4>
    172c:	2d 81       	ldd	r18, Y+5	; 0x05
    172e:	3e 81       	ldd	r19, Y+6	; 0x06
    1730:	23 30       	cpi	r18, 0x03	; 3
    1732:	31 05       	cpc	r19, r1
    1734:	34 f4       	brge	.+12     	; 0x1742 <M_DIO_Void_SetPinValue+0x166>
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	61 f0       	breq	.+24     	; 0x1758 <M_DIO_Void_SetPinValue+0x17c>
    1740:	5a c0       	rjmp	.+180    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
    1742:	2d 81       	ldd	r18, Y+5	; 0x05
    1744:	3e 81       	ldd	r19, Y+6	; 0x06
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	71 f1       	breq	.+92     	; 0x17a8 <M_DIO_Void_SetPinValue+0x1cc>
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	91 05       	cpc	r25, r1
    1754:	e9 f1       	breq	.+122    	; 0x17d0 <M_DIO_Void_SetPinValue+0x1f4>
    1756:	4f c0       	rjmp	.+158    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <M_DIO_Void_SetPinValue+0x19a>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <M_DIO_Void_SetPinValue+0x196>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1780:	a8 e3       	ldi	r26, 0x38	; 56
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <M_DIO_Void_SetPinValue+0x1c2>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <M_DIO_Void_SetPinValue+0x1be>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	27 c0       	rjmp	.+78     	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <M_DIO_Void_SetPinValue+0x1ea>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <M_DIO_Void_SetPinValue+0x1e6>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    17d0:	a2 e3       	ldi	r26, 0x32	; 50
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <M_DIO_Void_SetPinValue+0x212>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <M_DIO_Void_SetPinValue+0x20e>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    17f6:	2a 96       	adiw	r28, 0x0a	; 10
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <M_DIO_Void_GetPinValue+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <M_DIO_Void_GetPinValue+0x8>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <M_DIO_Void_GetPinValue+0xa>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9a e0       	ldi	r25, 0x0A	; 10
    181c:	69 2f       	mov	r22, r25
    181e:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    1822:	89 2f       	mov	r24, r25
    1824:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9a e0       	ldi	r25, 0x0A	; 10
    182a:	69 2f       	mov	r22, r25
    182c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    1830:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    1832:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3e 83       	std	Y+6, r19	; 0x06
    183c:	2d 83       	std	Y+5, r18	; 0x05
    183e:	4d 81       	ldd	r20, Y+5	; 0x05
    1840:	5e 81       	ldd	r21, Y+6	; 0x06
    1842:	42 30       	cpi	r20, 0x02	; 2
    1844:	51 05       	cpc	r21, r1
    1846:	41 f1       	breq	.+80     	; 0x1898 <M_DIO_Void_GetPinValue+0x90>
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	34 f4       	brge	.+12     	; 0x185e <M_DIO_Void_GetPinValue+0x56>
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	3e 81       	ldd	r19, Y+6	; 0x06
    1856:	21 30       	cpi	r18, 0x01	; 1
    1858:	31 05       	cpc	r19, r1
    185a:	61 f0       	breq	.+24     	; 0x1874 <M_DIO_Void_GetPinValue+0x6c>
    185c:	52 c0       	rjmp	.+164    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
    185e:	4d 81       	ldd	r20, Y+5	; 0x05
    1860:	5e 81       	ldd	r21, Y+6	; 0x06
    1862:	43 30       	cpi	r20, 0x03	; 3
    1864:	51 05       	cpc	r21, r1
    1866:	51 f1       	breq	.+84     	; 0x18bc <M_DIO_Void_GetPinValue+0xb4>
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	84 30       	cpi	r24, 0x04	; 4
    186e:	91 05       	cpc	r25, r1
    1870:	b9 f1       	breq	.+110    	; 0x18e0 <M_DIO_Void_GetPinValue+0xd8>
    1872:	47 c0       	rjmp	.+142    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <M_DIO_Void_GetPinValue+0x84>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <M_DIO_Void_GetPinValue+0x80>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	35 c0       	rjmp	.+106    	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <M_DIO_Void_GetPinValue+0xa8>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <M_DIO_Void_GetPinValue+0xa4>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	23 c0       	rjmp	.+70     	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    18bc:	e3 e3       	ldi	r30, 0x33	; 51
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <M_DIO_Void_GetPinValue+0xcc>
    18d0:	55 95       	asr	r21
    18d2:	47 95       	ror	r20
    18d4:	8a 95       	dec	r24
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <M_DIO_Void_GetPinValue+0xc8>
    18d8:	ca 01       	movw	r24, r20
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <M_DIO_Void_GetPinValue+0xf0>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <M_DIO_Void_GetPinValue+0xec>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	26 96       	adiw	r28, 0x06	; 6
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <M_DIO_Void_TogPin+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <M_DIO_Void_TogPin+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9a e0       	ldi	r25, 0x0A	; 10
    192a:	69 2f       	mov	r22, r25
    192c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    1930:	89 2f       	mov	r24, r25
    1932:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9a e0       	ldi	r25, 0x0A	; 10
    1938:	69 2f       	mov	r22, r25
    193a:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    193e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3d 83       	std	Y+5, r19	; 0x05
    1948:	2c 83       	std	Y+4, r18	; 0x04
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	91 05       	cpc	r25, r1
    1952:	51 f1       	breq	.+84     	; 0x19a8 <M_DIO_Void_TogPin+0x92>
    1954:	2c 81       	ldd	r18, Y+4	; 0x04
    1956:	3d 81       	ldd	r19, Y+5	; 0x05
    1958:	23 30       	cpi	r18, 0x03	; 3
    195a:	31 05       	cpc	r19, r1
    195c:	34 f4       	brge	.+12     	; 0x196a <M_DIO_Void_TogPin+0x54>
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	61 f0       	breq	.+24     	; 0x1980 <M_DIO_Void_TogPin+0x6a>
    1968:	5a c0       	rjmp	.+180    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	23 30       	cpi	r18, 0x03	; 3
    1970:	31 05       	cpc	r19, r1
    1972:	71 f1       	breq	.+92     	; 0x19d0 <M_DIO_Void_TogPin+0xba>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	91 05       	cpc	r25, r1
    197c:	e9 f1       	breq	.+122    	; 0x19f8 <M_DIO_Void_TogPin+0xe2>
    197e:	4f c0       	rjmp	.+158    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <M_DIO_Void_TogPin+0x88>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <M_DIO_Void_TogPin+0x84>
    19a2:	84 27       	eor	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	3b c0       	rjmp	.+118    	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    19a8:	a8 e3       	ldi	r26, 0x38	; 56
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e8 e3       	ldi	r30, 0x38	; 56
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <M_DIO_Void_TogPin+0xb0>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <M_DIO_Void_TogPin+0xac>
    19ca:	84 27       	eor	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	27 c0       	rjmp	.+78     	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    19d0:	a5 e3       	ldi	r26, 0x35	; 53
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e5 e3       	ldi	r30, 0x35	; 53
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <M_DIO_Void_TogPin+0xd8>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <M_DIO_Void_TogPin+0xd4>
    19f2:	84 27       	eor	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <M_DIO_Void_TogPin+0x100>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <M_DIO_Void_TogPin+0xfc>
    1a1a:	84 27       	eor	r24, r20
    1a1c:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2a 97       	sbiw	r28, 0x0a	; 10
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9a e0       	ldi	r25, 0x0A	; 10
    1a4a:	69 2f       	mov	r22, r25
    1a4c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    1a50:	89 2f       	mov	r24, r25
    1a52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9a e0       	ldi	r25, 0x0A	; 10
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodqi4>
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3a 87       	std	Y+10, r19	; 0x0a
    1a68:	29 87       	std	Y+9, r18	; 0x09
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	39 f0       	breq	.+14     	; 0x1a80 <M_DIO_Void_SetPinPullUpRes+0x52>
    1a72:	29 85       	ldd	r18, Y+9	; 0x09
    1a74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a76:	21 30       	cpi	r18, 0x01	; 1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <M_DIO_Void_SetPinPullUpRes+0x50>
    1a7c:	76 c0       	rjmp	.+236    	; 0x1b6a <M_DIO_Void_SetPinPullUpRes+0x13c>
    1a7e:	e4 c0       	rjmp	.+456    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	38 87       	std	Y+8, r19	; 0x08
    1a88:	2f 83       	std	Y+7, r18	; 0x07
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	61 f1       	breq	.+88     	; 0x1aec <M_DIO_Void_SetPinPullUpRes+0xbe>
    1a94:	2f 81       	ldd	r18, Y+7	; 0x07
    1a96:	38 85       	ldd	r19, Y+8	; 0x08
    1a98:	23 30       	cpi	r18, 0x03	; 3
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <M_DIO_Void_SetPinPullUpRes+0x7c>
    1a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa0:	98 85       	ldd	r25, Y+8	; 0x08
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <M_DIO_Void_SetPinPullUpRes+0x94>
    1aa8:	cf c0       	rjmp	.+414    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    1aac:	38 85       	ldd	r19, Y+8	; 0x08
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	89 f1       	breq	.+98     	; 0x1b16 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab6:	98 85       	ldd	r25, Y+8	; 0x08
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <M_DIO_Void_SetPinPullUpRes+0x92>
    1abe:	40 c0       	rjmp	.+128    	; 0x1b40 <M_DIO_Void_SetPinPullUpRes+0x112>
    1ac0:	c3 c0       	rjmp	.+390    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <M_DIO_Void_SetPinPullUpRes+0xae>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	ae c0       	rjmp	.+348    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1aec:	a8 e3       	ldi	r26, 0x38	; 56
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e8 e3       	ldi	r30, 0x38	; 56
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <M_DIO_Void_SetPinPullUpRes+0xdc>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <M_DIO_Void_SetPinPullUpRes+0xd8>
    1b0e:	80 95       	com	r24
    1b10:	84 23       	and	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	99 c0       	rjmp	.+306    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1b16:	a5 e3       	ldi	r26, 0x35	; 53
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e3       	ldi	r30, 0x35	; 53
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <M_DIO_Void_SetPinPullUpRes+0x106>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <M_DIO_Void_SetPinPullUpRes+0x102>
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	84 c0       	rjmp	.+264    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1b40:	a2 e3       	ldi	r26, 0x32	; 50
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e2 e3       	ldi	r30, 0x32	; 50
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <M_DIO_Void_SetPinPullUpRes+0x130>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <M_DIO_Void_SetPinPullUpRes+0x12c>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	6f c0       	rjmp	.+222    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Group)
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3e 83       	std	Y+6, r19	; 0x06
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	51 f1       	breq	.+84     	; 0x1bd2 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1b7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b80:	3e 81       	ldd	r19, Y+6	; 0x06
    1b82:	23 30       	cpi	r18, 0x03	; 3
    1b84:	31 05       	cpc	r19, r1
    1b86:	34 f4       	brge	.+12     	; 0x1b94 <M_DIO_Void_SetPinPullUpRes+0x166>
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	61 f0       	breq	.+24     	; 0x1baa <M_DIO_Void_SetPinPullUpRes+0x17c>
    1b92:	5a c0       	rjmp	.+180    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	71 f1       	breq	.+92     	; 0x1bfa <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	e9 f1       	breq	.+122    	; 0x1c22 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1ba8:	4f c0       	rjmp	.+158    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1baa:	ab e3       	ldi	r26, 0x3B	; 59
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e3       	ldi	r30, 0x3B	; 59
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <M_DIO_Void_SetPinPullUpRes+0x19a>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <M_DIO_Void_SetPinPullUpRes+0x196>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	3b c0       	rjmp	.+118    	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1bd2:	a8 e3       	ldi	r26, 0x38	; 56
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <M_DIO_Void_SetPinPullUpRes+0x1be>
    1bf4:	84 2b       	or	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	27 c0       	rjmp	.+78     	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1bfa:	a5 e3       	ldi	r26, 0x35	; 53
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e3       	ldi	r30, 0x35	; 53
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1c22:	a2 e3       	ldi	r26, 0x32	; 50
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e2 e3       	ldi	r30, 0x32	; 50
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <M_DIO_Void_SetPinPullUpRes+0x212>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <M_DIO_Void_SetPinPullUpRes+0x20e>
    1c44:	84 2b       	or	r24, r20
    1c46:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    1c48:	2a 96       	adiw	r28, 0x0a	; 10
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <M_EXTINT_Void_EXTINTInit+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3b 83       	std	Y+3, r19	; 0x03
    1c70:	2a 83       	std	Y+2, r18	; 0x02
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	f9 f0       	breq	.+62     	; 0x1cba <M_EXTINT_Void_EXTINTInit+0x60>
    1c7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	81 f1       	breq	.+96     	; 0x1ce6 <M_EXTINT_Void_EXTINTInit+0x8c>
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	d1 f5       	brne	.+116    	; 0x1d02 <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	82 60       	ori	r24, 0x02	; 2
    1ca8:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
    1caa:	ab e5       	ldi	r26, 0x5B	; 91
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 64       	ori	r24, 0x40	; 64
    1cb6:	8c 93       	st	X, r24
    1cb8:	24 c0       	rjmp	.+72     	; 0x1d02 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8b 7f       	andi	r24, 0xFB	; 251
    1cc6:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1cc8:	a5 e5       	ldi	r26, 0x55	; 85
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e5       	ldi	r30, 0x55	; 85
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 60       	ori	r24, 0x08	; 8
    1cd4:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT1_BIT);
    1cd6:	ab e5       	ldi	r26, 0x5B	; 91
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	eb e5       	ldi	r30, 0x5B	; 91
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 68       	ori	r24, 0x80	; 128
    1ce2:	8c 93       	st	X, r24
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1ce6:	a4 e5       	ldi	r26, 0x54	; 84
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e4 e5       	ldi	r30, 0x54	; 84
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 64       	ori	r24, 0x40	; 64
    1cf2:	8c 93       	st	X, r24
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT2_BIT);
    1cf4:	ab e5       	ldi	r26, 0x5B	; 91
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	eb e5       	ldi	r30, 0x5B	; 91
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 62       	ori	r24, 0x20	; 32
    1d00:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <M_EXTINT_Void_SetCallBack+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <M_EXTINT_Void_SetCallBack+0x8>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	7b 83       	std	Y+3, r23	; 0x03
    1d20:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3d 83       	std	Y+5, r19	; 0x05
    1d2a:	2c 83       	std	Y+4, r18	; 0x04
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	91 05       	cpc	r25, r1
    1d34:	81 f0       	breq	.+32     	; 0x1d56 <M_EXTINT_Void_SetCallBack+0x48>
    1d36:	2c 81       	ldd	r18, Y+4	; 0x04
    1d38:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	91 f0       	breq	.+36     	; 0x1d64 <M_EXTINT_Void_SetCallBack+0x56>
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	a1 f4       	brne	.+40     	; 0x1d70 <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	90 93 1e 02 	sts	0x021E, r25
    1d50:	80 93 1d 02 	sts	0x021D, r24
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	90 93 1a 02 	sts	0x021A, r25
    1d5e:	80 93 19 02 	sts	0x0219, r24
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	90 93 1c 02 	sts	0x021C, r25
    1d6c:	80 93 1b 02 	sts	0x021B, r24
	default:                                       break;
	}
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <__vector_1>:

ISR(INT0_vect)
{
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    1daa:	e0 91 1d 02 	lds	r30, 0x021D
    1dae:	f0 91 1e 02 	lds	r31, 0x021E
    1db2:	09 95       	icall
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	bf 91       	pop	r27
    1dbe:	af 91       	pop	r26
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	7f 91       	pop	r23
    1dc6:	6f 91       	pop	r22
    1dc8:	5f 91       	pop	r21
    1dca:	4f 91       	pop	r20
    1dcc:	3f 91       	pop	r19
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <__vector_2>:
ISR(INT1_vect)
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    1e04:	e0 91 19 02 	lds	r30, 0x0219
    1e08:	f0 91 1a 02 	lds	r31, 0x021A
    1e0c:	09 95       	icall
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	0f 90       	pop	r0
    1e30:	1f 90       	pop	r1
    1e32:	18 95       	reti

00001e34 <__vector_3>:
ISR(INT2_vect)
{
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    1e5e:	e0 91 1b 02 	lds	r30, 0x021B
    1e62:	f0 91 1c 02 	lds	r31, 0x021C
    1e66:	09 95       	icall
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <GIE_voidEnable>:

#include "BitMath.h"
#include "STD.h"

void GIE_voidEnable(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIE_SREG,7);
    1e96:	af e5       	ldi	r26, 0x5F	; 95
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ef e5       	ldi	r30, 0x5F	; 95
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 68       	ori	r24, 0x80	; 128
    1ea2:	8c 93       	st	X, r24
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <GIE_voidDisble>:
void GIE_voidDisble(void)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GIE_SREG,7);
    1eb2:	af e5       	ldi	r26, 0x5F	; 95
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	ef e5       	ldi	r30, 0x5F	; 95
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 77       	andi	r24, 0x7F	; 127
    1ebe:	8c 93       	st	X, r24
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <H_KeyPad_Void_KeyPadInit>:
extern  u8 change_u8Flag ;
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    1ece:	83 e2       	ldi	r24, 0x23	; 35
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    1ed6:	82 e2       	ldi	r24, 0x22	; 34
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    1ede:	81 e2       	ldi	r24, 0x21	; 33
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    1ee6:	80 e2       	ldi	r24, 0x20	; 32
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    1eee:	83 e2       	ldi	r24, 0x23	; 35
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    1ef6:	82 e2       	ldi	r24, 0x22	; 34
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    1efe:	81 e2       	ldi	r24, 0x21	; 33
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    1f06:	80 e2       	ldi	r24, 0x20	; 32
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinPullUpRes(KEYPAD_C0_PIN,ENABLE);
    1f0e:	8f e2       	ldi	r24, 0x2F	; 47
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C1_PIN,ENABLE);
    1f16:	8e e2       	ldi	r24, 0x2E	; 46
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
    1f1e:	8d e2       	ldi	r24, 0x2D	; 45
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
    1f26:	8b e2       	ldi	r24, 0x2B	; 43
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <M_DIO_Void_SetPinPullUpRes>

}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(u8 copy_u8Row)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	a0 97       	sbiw	r28, 0x20	; 32
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    1f4a:	83 e2       	ldi	r24, 0x23	; 35
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	82 e2       	ldi	r24, 0x22	; 34
    1f50:	8c 83       	std	Y+4, r24	; 0x04
    1f52:	81 e2       	ldi	r24, 0x21	; 33
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
    1f5a:	8f e2       	ldi	r24, 0x2F	; 47
    1f5c:	8f 83       	std	Y+7, r24	; 0x07
    1f5e:	8e e2       	ldi	r24, 0x2E	; 46
    1f60:	88 87       	std	Y+8, r24	; 0x08
    1f62:	8d e2       	ldi	r24, 0x2D	; 45
    1f64:	89 87       	std	Y+9, r24	; 0x09
    1f66:	8b e2       	ldi	r24, 0x2B	; 43
    1f68:	8a 87       	std	Y+10, r24	; 0x0a
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ 'S' , 'B' , 'G' , 'I' },
			                          { 'O' , '5' , '6' , '2' },
							          { 'P' , 'D' , 'U' , '3' },
						         	  { '*' , 'L' , 'R' , '4' }};
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0b 96       	adiw	r24, 0x0b	; 11
    1f6e:	9d 8f       	std	Y+29, r25	; 0x1d
    1f70:	8c 8f       	std	Y+28, r24	; 0x1c
    1f72:	ee ee       	ldi	r30, 0xEE	; 238
    1f74:	f1 e0       	ldi	r31, 0x01	; 1
    1f76:	ff 8f       	std	Y+31, r31	; 0x1f
    1f78:	ee 8f       	std	Y+30, r30	; 0x1e
    1f7a:	f0 e1       	ldi	r31, 0x10	; 16
    1f7c:	f8 a3       	std	Y+32, r31	; 0x20
    1f7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f80:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f82:	00 80       	ld	r0, Z
    1f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f8e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1f90:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1f92:	00 82       	st	Z, r0
    1f94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f9c:	8c 8f       	std	Y+28, r24	; 0x1c
    1f9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa0:	91 50       	subi	r25, 0x01	; 1
    1fa2:	98 a3       	std	Y+32, r25	; 0x20
    1fa4:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fa6:	ee 23       	and	r30, r30
    1fa8:	51 f7       	brne	.-44     	; 0x1f7e <H_KeyPad_U8_KeyPadRead+0x4a>
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	8a 83       	std	Y+2, r24	; 0x02
	//u8 Local_U8_RowCounter ;
	u8 Local_U8_ColCounter ;	
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[copy_u8Row],LOW);
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	03 96       	adiw	r24, 0x03	; 3
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	80 81       	ld	r24, Z
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

		
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    1fc6:	19 82       	std	Y+1, r1	; 0x01
    1fc8:	25 c0       	rjmp	.+74     	; 0x2014 <H_KeyPad_U8_KeyPadRead+0xe0>
					if((M_DIO_Void_GetPinValue((Local_U8_KeypadColPins[1]))) == KEYPAD_PRESSED)
					{Local_U8_Reading= 'C';	break;}
				}
			}
			#endif
			if((M_DIO_Void_GetPinValue((Local_U8_KeypadColPins[Local_U8_ColCounter]))) == KEYPAD_PRESSED)
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	07 96       	adiw	r24, 0x07	; 7
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	80 81       	ld	r24, Z
    1fdc:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    1fe0:	88 23       	and	r24, r24
    1fe2:	a9 f4       	brne	.+42     	; 0x200e <H_KeyPad_U8_KeyPadRead+0xda>
			{
				Local_U8_Reading = Local_U8_KeypadValue[copy_u8Row][Local_U8_ColCounter];
    1fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	48 2f       	mov	r20, r24
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	22 0f       	add	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	84 0f       	add	r24, r20
    2002:	95 1f       	adc	r25, r21
    2004:	fc 01       	movw	r30, r24
    2006:	3a 96       	adiw	r30, 0x0a	; 10
    2008:	80 81       	ld	r24, Z
    200a:	8a 83       	std	Y+2, r24	; 0x02
    200c:	06 c0       	rjmp	.+12     	; 0x201a <H_KeyPad_U8_KeyPadRead+0xe6>
	//u8 Local_U8_RowCounter ;
	u8 Local_U8_ColCounter ;	
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[copy_u8Row],LOW);

		
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	84 30       	cpi	r24, 0x04	; 4
    2018:	c0 f2       	brcs	.-80     	; 0x1fca <H_KeyPad_U8_KeyPadRead+0x96>
			{
				Local_U8_Reading = Local_U8_KeypadValue[copy_u8Row][Local_U8_ColCounter];
			    break; // this to break in the row for loop
			}
		}
		if (Local_U8_Reading != KEYPAD_RELEASED)
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	19 f0       	breq	.+6      	; 0x2026 <H_KeyPad_U8_KeyPadRead+0xf2>
		{
			change_u8Flag=1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	80 93 11 02 	sts	0x0211, r24
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[copy_u8Row],HIGH);
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	ce 01       	movw	r24, r28
    202e:	03 96       	adiw	r24, 0x03	; 3
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	80 81       	ld	r24, Z
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	
return Local_U8_Reading;
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2040:	a0 96       	adiw	r28, 0x20	; 32
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    205a:	84 e1       	ldi	r24, 0x14	; 20
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    2062:	85 e1       	ldi	r24, 0x15	; 21
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    206a:	86 e1       	ldi	r24, 0x16	; 22
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    2072:	88 e1       	ldi	r24, 0x18	; 24
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    207a:	8d e0       	ldi	r24, 0x0D	; 13
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    2082:	8c e0       	ldi	r24, 0x0C	; 12
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    208a:	83 e3       	ldi	r24, 0x33	; 51
    208c:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    2090:	82 e3       	ldi	r24, 0x32	; 50
    2092:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    2096:	88 e2       	ldi	r24, 0x28	; 40
    2098:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    209c:	8c e0       	ldi	r24, 0x0C	; 12
    209e:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	e9 97       	sbiw	r28, 0x39	; 57
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    20ca:	8d e0       	ldi	r24, 0x0D	; 13
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    20d2:	89 ad       	ldd	r24, Y+57	; 0x39
    20d4:	82 95       	swap	r24
    20d6:	8f 70       	andi	r24, 0x0F	; 15
    20d8:	98 2f       	mov	r25, r24
    20da:	91 70       	andi	r25, 0x01	; 1
    20dc:	84 e1       	ldi	r24, 0x14	; 20
    20de:	69 2f       	mov	r22, r25
    20e0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    20e4:	89 ad       	ldd	r24, Y+57	; 0x39
    20e6:	82 95       	swap	r24
    20e8:	86 95       	lsr	r24
    20ea:	87 70       	andi	r24, 0x07	; 7
    20ec:	98 2f       	mov	r25, r24
    20ee:	91 70       	andi	r25, 0x01	; 1
    20f0:	85 e1       	ldi	r24, 0x15	; 21
    20f2:	69 2f       	mov	r22, r25
    20f4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    20f8:	89 ad       	ldd	r24, Y+57	; 0x39
    20fa:	82 95       	swap	r24
    20fc:	86 95       	lsr	r24
    20fe:	86 95       	lsr	r24
    2100:	83 70       	andi	r24, 0x03	; 3
    2102:	98 2f       	mov	r25, r24
    2104:	91 70       	andi	r25, 0x01	; 1
    2106:	86 e1       	ldi	r24, 0x16	; 22
    2108:	69 2f       	mov	r22, r25
    210a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    210e:	89 ad       	ldd	r24, Y+57	; 0x39
    2110:	98 2f       	mov	r25, r24
    2112:	99 1f       	adc	r25, r25
    2114:	99 27       	eor	r25, r25
    2116:	99 1f       	adc	r25, r25
    2118:	88 e1       	ldi	r24, 0x18	; 24
    211a:	69 2f       	mov	r22, r25
    211c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2120:	8c e0       	ldi	r24, 0x0C	; 12
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e8       	ldi	r26, 0x80	; 128
    212e:	bf e3       	ldi	r27, 0x3F	; 63
    2130:	8d ab       	std	Y+53, r24	; 0x35
    2132:	9e ab       	std	Y+54, r25	; 0x36
    2134:	af ab       	std	Y+55, r26	; 0x37
    2136:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6d a9       	ldd	r22, Y+53	; 0x35
    213a:	7e a9       	ldd	r23, Y+54	; 0x36
    213c:	8f a9       	ldd	r24, Y+55	; 0x37
    213e:	98 ad       	ldd	r25, Y+56	; 0x38
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e7       	ldi	r20, 0x7A	; 122
    2146:	55 e4       	ldi	r21, 0x45	; 69
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	89 ab       	std	Y+49, r24	; 0x31
    2152:	9a ab       	std	Y+50, r25	; 0x32
    2154:	ab ab       	std	Y+51, r26	; 0x33
    2156:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2158:	69 a9       	ldd	r22, Y+49	; 0x31
    215a:	7a a9       	ldd	r23, Y+50	; 0x32
    215c:	8b a9       	ldd	r24, Y+51	; 0x33
    215e:	9c a9       	ldd	r25, Y+52	; 0x34
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	98 ab       	std	Y+48, r25	; 0x30
    2176:	8f a7       	std	Y+47, r24	; 0x2f
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    217a:	69 a9       	ldd	r22, Y+49	; 0x31
    217c:	7a a9       	ldd	r23, Y+50	; 0x32
    217e:	8b a9       	ldd	r24, Y+51	; 0x33
    2180:	9c a9       	ldd	r25, Y+52	; 0x34
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6d a9       	ldd	r22, Y+53	; 0x35
    2194:	7e a9       	ldd	r23, Y+54	; 0x36
    2196:	8f a9       	ldd	r24, Y+55	; 0x37
    2198:	98 ad       	ldd	r25, Y+56	; 0x38
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 ab       	std	Y+48, r25	; 0x30
    21b8:	8f a7       	std	Y+47, r24	; 0x2f
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <H_Lcd_Void_LCDWriteCharacter+0x126>
    21bc:	80 e9       	ldi	r24, 0x90	; 144
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9e a7       	std	Y+46, r25	; 0x2e
    21c2:	8d a7       	std	Y+45, r24	; 0x2d
    21c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <H_Lcd_Void_LCDWriteCharacter+0x114>
    21cc:	9e a7       	std	Y+46, r25	; 0x2e
    21ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d2:	98 a9       	ldd	r25, Y+48	; 0x30
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	98 ab       	std	Y+48, r25	; 0x30
    21d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8f a5       	ldd	r24, Y+47	; 0x2f
    21dc:	98 a9       	ldd	r25, Y+48	; 0x30
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <H_Lcd_Void_LCDWriteCharacter+0x108>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	69 a9       	ldd	r22, Y+49	; 0x31
    21e6:	7a a9       	ldd	r23, Y+50	; 0x32
    21e8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ea:	9c a9       	ldd	r25, Y+52	; 0x34
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	98 ab       	std	Y+48, r25	; 0x30
    21f6:	8f a7       	std	Y+47, r24	; 0x2f
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	9c a7       	std	Y+44, r25	; 0x2c
    21fe:	8b a7       	std	Y+43, r24	; 0x2b
    2200:	8b a5       	ldd	r24, Y+43	; 0x2b
    2202:	9c a5       	ldd	r25, Y+44	; 0x2c
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <H_Lcd_Void_LCDWriteCharacter+0x150>
    2208:	9c a7       	std	Y+44, r25	; 0x2c
    220a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    220c:	8c e0       	ldi	r24, 0x0C	; 12
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	8f a3       	std	Y+39, r24	; 0x27
    221e:	98 a7       	std	Y+40, r25	; 0x28
    2220:	a9 a7       	std	Y+41, r26	; 0x29
    2222:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6f a1       	ldd	r22, Y+39	; 0x27
    2226:	78 a5       	ldd	r23, Y+40	; 0x28
    2228:	89 a5       	ldd	r24, Y+41	; 0x29
    222a:	9a a5       	ldd	r25, Y+42	; 0x2a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8b a3       	std	Y+35, r24	; 0x23
    223e:	9c a3       	std	Y+36, r25	; 0x24
    2240:	ad a3       	std	Y+37, r26	; 0x25
    2242:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9a a3       	std	Y+34, r25	; 0x22
    2262:	89 a3       	std	Y+33, r24	; 0x21
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2266:	6b a1       	ldd	r22, Y+35	; 0x23
    2268:	7c a1       	ldd	r23, Y+36	; 0x24
    226a:	8d a1       	ldd	r24, Y+37	; 0x25
    226c:	9e a1       	ldd	r25, Y+38	; 0x26
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6f a1       	ldd	r22, Y+39	; 0x27
    2280:	78 a5       	ldd	r23, Y+40	; 0x28
    2282:	89 a5       	ldd	r24, Y+41	; 0x29
    2284:	9a a5       	ldd	r25, Y+42	; 0x2a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <H_Lcd_Void_LCDWriteCharacter+0x212>
    22a8:	80 e9       	ldi	r24, 0x90	; 144
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	98 a3       	std	Y+32, r25	; 0x20
    22ae:	8f 8f       	std	Y+31, r24	; 0x1f
    22b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b2:	98 a1       	ldd	r25, Y+32	; 0x20
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <H_Lcd_Void_LCDWriteCharacter+0x200>
    22b8:	98 a3       	std	Y+32, r25	; 0x20
    22ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	89 a1       	ldd	r24, Y+33	; 0x21
    22be:	9a a1       	ldd	r25, Y+34	; 0x22
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	89 a1       	ldd	r24, Y+33	; 0x21
    22c8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6b a1       	ldd	r22, Y+35	; 0x23
    22d2:	7c a1       	ldd	r23, Y+36	; 0x24
    22d4:	8d a1       	ldd	r24, Y+37	; 0x25
    22d6:	9e a1       	ldd	r25, Y+38	; 0x26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9a a3       	std	Y+34, r25	; 0x22
    22e2:	89 a3       	std	Y+33, r24	; 0x21
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ea:	8d 8f       	std	Y+29, r24	; 0x1d
    22ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    22f4:	9e 8f       	std	Y+30, r25	; 0x1e
    22f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    22f8:	89 ad       	ldd	r24, Y+57	; 0x39
    22fa:	98 2f       	mov	r25, r24
    22fc:	91 70       	andi	r25, 0x01	; 1
    22fe:	84 e1       	ldi	r24, 0x14	; 20
    2300:	69 2f       	mov	r22, r25
    2302:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    2306:	89 ad       	ldd	r24, Y+57	; 0x39
    2308:	86 95       	lsr	r24
    230a:	98 2f       	mov	r25, r24
    230c:	91 70       	andi	r25, 0x01	; 1
    230e:	85 e1       	ldi	r24, 0x15	; 21
    2310:	69 2f       	mov	r22, r25
    2312:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    2316:	89 ad       	ldd	r24, Y+57	; 0x39
    2318:	86 95       	lsr	r24
    231a:	86 95       	lsr	r24
    231c:	98 2f       	mov	r25, r24
    231e:	91 70       	andi	r25, 0x01	; 1
    2320:	86 e1       	ldi	r24, 0x16	; 22
    2322:	69 2f       	mov	r22, r25
    2324:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    2328:	89 ad       	ldd	r24, Y+57	; 0x39
    232a:	86 95       	lsr	r24
    232c:	86 95       	lsr	r24
    232e:	86 95       	lsr	r24
    2330:	98 2f       	mov	r25, r24
    2332:	91 70       	andi	r25, 0x01	; 1
    2334:	88 e1       	ldi	r24, 0x18	; 24
    2336:	69 2f       	mov	r22, r25
    2338:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    233c:	8c e0       	ldi	r24, 0x0C	; 12
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	89 8f       	std	Y+25, r24	; 0x19
    234e:	9a 8f       	std	Y+26, r25	; 0x1a
    2350:	ab 8f       	std	Y+27, r26	; 0x1b
    2352:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	69 8d       	ldd	r22, Y+25	; 0x19
    2356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8d 8b       	std	Y+21, r24	; 0x15
    236e:	9e 8b       	std	Y+22, r25	; 0x16
    2370:	af 8b       	std	Y+23, r26	; 0x17
    2372:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2374:	6d 89       	ldd	r22, Y+21	; 0x15
    2376:	7e 89       	ldd	r23, Y+22	; 0x16
    2378:	8f 89       	ldd	r24, Y+23	; 0x17
    237a:	98 8d       	ldd	r25, Y+24	; 0x18
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	2c f4       	brge	.+10     	; 0x2396 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 8b       	std	Y+20, r25	; 0x14
    2392:	8b 8b       	std	Y+19, r24	; 0x13
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    2396:	6d 89       	ldd	r22, Y+21	; 0x15
    2398:	7e 89       	ldd	r23, Y+22	; 0x16
    239a:	8f 89       	ldd	r24, Y+23	; 0x17
    239c:	98 8d       	ldd	r25, Y+24	; 0x18
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	4c f5       	brge	.+82     	; 0x2400 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	69 8d       	ldd	r22, Y+25	; 0x19
    23b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <H_Lcd_Void_LCDWriteCharacter+0x342>
    23d8:	80 e9       	ldi	r24, 0x90	; 144
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	89 8b       	std	Y+17, r24	; 0x11
    23e0:	89 89       	ldd	r24, Y+17	; 0x11
    23e2:	9a 89       	ldd	r25, Y+18	; 0x12
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <H_Lcd_Void_LCDWriteCharacter+0x330>
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	8b 89       	ldd	r24, Y+19	; 0x13
    23ee:	9c 89       	ldd	r25, Y+20	; 0x14
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	8b 89       	ldd	r24, Y+19	; 0x13
    23f8:	9c 89       	ldd	r25, Y+20	; 0x14
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <H_Lcd_Void_LCDWriteCharacter+0x324>
    23fe:	14 c0       	rjmp	.+40     	; 0x2428 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	98 8b       	std	Y+16, r25	; 0x10
    241a:	8f 87       	std	Y+15, r24	; 0x0f
    241c:	8f 85       	ldd	r24, Y+15	; 0x0f
    241e:	98 89       	ldd	r25, Y+16	; 0x10
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2428:	8c e0       	ldi	r24, 0x0C	; 12
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 ea       	ldi	r26, 0xA0	; 160
    2436:	b0 e4       	ldi	r27, 0x40	; 64
    2438:	8b 87       	std	Y+11, r24	; 0x0b
    243a:	9c 87       	std	Y+12, r25	; 0x0c
    243c:	ad 87       	std	Y+13, r26	; 0x0d
    243e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8f 83       	std	Y+7, r24	; 0x07
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	a9 87       	std	Y+9, r26	; 0x09
    245e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6b 85       	ldd	r22, Y+11	; 0x0b
    249c:	7c 85       	ldd	r23, Y+12	; 0x0c
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    24c4:	80 e9       	ldi	r24, 0x90	; 144
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <H_Lcd_Void_LCDWriteCharacter+0x410>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <H_Lcd_Void_LCDWriteCharacter+0x458>
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2514:	e9 96       	adiw	r28, 0x39	; 57
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	e9 97       	sbiw	r28, 0x39	; 57
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2544:	89 ad       	ldd	r24, Y+57	; 0x39
    2546:	82 95       	swap	r24
    2548:	8f 70       	andi	r24, 0x0F	; 15
    254a:	98 2f       	mov	r25, r24
    254c:	91 70       	andi	r25, 0x01	; 1
    254e:	84 e1       	ldi	r24, 0x14	; 20
    2550:	69 2f       	mov	r22, r25
    2552:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2556:	89 ad       	ldd	r24, Y+57	; 0x39
    2558:	82 95       	swap	r24
    255a:	86 95       	lsr	r24
    255c:	87 70       	andi	r24, 0x07	; 7
    255e:	98 2f       	mov	r25, r24
    2560:	91 70       	andi	r25, 0x01	; 1
    2562:	85 e1       	ldi	r24, 0x15	; 21
    2564:	69 2f       	mov	r22, r25
    2566:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    256a:	89 ad       	ldd	r24, Y+57	; 0x39
    256c:	82 95       	swap	r24
    256e:	86 95       	lsr	r24
    2570:	86 95       	lsr	r24
    2572:	83 70       	andi	r24, 0x03	; 3
    2574:	98 2f       	mov	r25, r24
    2576:	91 70       	andi	r25, 0x01	; 1
    2578:	86 e1       	ldi	r24, 0x16	; 22
    257a:	69 2f       	mov	r22, r25
    257c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2580:	89 ad       	ldd	r24, Y+57	; 0x39
    2582:	98 2f       	mov	r25, r24
    2584:	99 1f       	adc	r25, r25
    2586:	99 27       	eor	r25, r25
    2588:	99 1f       	adc	r25, r25
    258a:	88 e1       	ldi	r24, 0x18	; 24
    258c:	69 2f       	mov	r22, r25
    258e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2592:	8c e0       	ldi	r24, 0x0C	; 12
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e8       	ldi	r26, 0x80	; 128
    25a0:	bf e3       	ldi	r27, 0x3F	; 63
    25a2:	8d ab       	std	Y+53, r24	; 0x35
    25a4:	9e ab       	std	Y+54, r25	; 0x36
    25a6:	af ab       	std	Y+55, r26	; 0x37
    25a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6d a9       	ldd	r22, Y+53	; 0x35
    25ac:	7e a9       	ldd	r23, Y+54	; 0x36
    25ae:	8f a9       	ldd	r24, Y+55	; 0x37
    25b0:	98 ad       	ldd	r25, Y+56	; 0x38
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a e7       	ldi	r20, 0x7A	; 122
    25b8:	55 e4       	ldi	r21, 0x45	; 69
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	89 ab       	std	Y+49, r24	; 0x31
    25c4:	9a ab       	std	Y+50, r25	; 0x32
    25c6:	ab ab       	std	Y+51, r26	; 0x33
    25c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	98 ab       	std	Y+48, r25	; 0x30
    25e8:	8f a7       	std	Y+47, r24	; 0x2f
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    25ec:	69 a9       	ldd	r22, Y+49	; 0x31
    25ee:	7a a9       	ldd	r23, Y+50	; 0x32
    25f0:	8b a9       	ldd	r24, Y+51	; 0x33
    25f2:	9c a9       	ldd	r25, Y+52	; 0x34
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6d a9       	ldd	r22, Y+53	; 0x35
    2606:	7e a9       	ldd	r23, Y+54	; 0x36
    2608:	8f a9       	ldd	r24, Y+55	; 0x37
    260a:	98 ad       	ldd	r25, Y+56	; 0x38
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	98 ab       	std	Y+48, r25	; 0x30
    262a:	8f a7       	std	Y+47, r24	; 0x2f
    262c:	0f c0       	rjmp	.+30     	; 0x264c <H_Lcd_Void_LCDWriteCommand+0x126>
    262e:	80 e9       	ldi	r24, 0x90	; 144
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	9e a7       	std	Y+46, r25	; 0x2e
    2634:	8d a7       	std	Y+45, r24	; 0x2d
    2636:	8d a5       	ldd	r24, Y+45	; 0x2d
    2638:	9e a5       	ldd	r25, Y+46	; 0x2e
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <H_Lcd_Void_LCDWriteCommand+0x114>
    263e:	9e a7       	std	Y+46, r25	; 0x2e
    2640:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8f a5       	ldd	r24, Y+47	; 0x2f
    2644:	98 a9       	ldd	r25, Y+48	; 0x30
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	98 ab       	std	Y+48, r25	; 0x30
    264a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8f a5       	ldd	r24, Y+47	; 0x2f
    264e:	98 a9       	ldd	r25, Y+48	; 0x30
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <H_Lcd_Void_LCDWriteCommand+0x108>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	69 a9       	ldd	r22, Y+49	; 0x31
    2658:	7a a9       	ldd	r23, Y+50	; 0x32
    265a:	8b a9       	ldd	r24, Y+51	; 0x33
    265c:	9c a9       	ldd	r25, Y+52	; 0x34
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	98 ab       	std	Y+48, r25	; 0x30
    2668:	8f a7       	std	Y+47, r24	; 0x2f
    266a:	8f a5       	ldd	r24, Y+47	; 0x2f
    266c:	98 a9       	ldd	r25, Y+48	; 0x30
    266e:	9c a7       	std	Y+44, r25	; 0x2c
    2670:	8b a7       	std	Y+43, r24	; 0x2b
    2672:	8b a5       	ldd	r24, Y+43	; 0x2b
    2674:	9c a5       	ldd	r25, Y+44	; 0x2c
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <H_Lcd_Void_LCDWriteCommand+0x150>
    267a:	9c a7       	std	Y+44, r25	; 0x2c
    267c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    267e:	8c e0       	ldi	r24, 0x0C	; 12
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 e8       	ldi	r26, 0x80	; 128
    268c:	bf e3       	ldi	r27, 0x3F	; 63
    268e:	8f a3       	std	Y+39, r24	; 0x27
    2690:	98 a7       	std	Y+40, r25	; 0x28
    2692:	a9 a7       	std	Y+41, r26	; 0x29
    2694:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	6f a1       	ldd	r22, Y+39	; 0x27
    2698:	78 a5       	ldd	r23, Y+40	; 0x28
    269a:	89 a5       	ldd	r24, Y+41	; 0x29
    269c:	9a a5       	ldd	r25, Y+42	; 0x2a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	55 e4       	ldi	r21, 0x45	; 69
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8b a3       	std	Y+35, r24	; 0x23
    26b0:	9c a3       	std	Y+36, r25	; 0x24
    26b2:	ad a3       	std	Y+37, r26	; 0x25
    26b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b6:	6b a1       	ldd	r22, Y+35	; 0x23
    26b8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ba:	8d a1       	ldd	r24, Y+37	; 0x25
    26bc:	9e a1       	ldd	r25, Y+38	; 0x26
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9a a3       	std	Y+34, r25	; 0x22
    26d4:	89 a3       	std	Y+33, r24	; 0x21
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    26d8:	6b a1       	ldd	r22, Y+35	; 0x23
    26da:	7c a1       	ldd	r23, Y+36	; 0x24
    26dc:	8d a1       	ldd	r24, Y+37	; 0x25
    26de:	9e a1       	ldd	r25, Y+38	; 0x26
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	6f a1       	ldd	r22, Y+39	; 0x27
    26f2:	78 a5       	ldd	r23, Y+40	; 0x28
    26f4:	89 a5       	ldd	r24, Y+41	; 0x29
    26f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9a a3       	std	Y+34, r25	; 0x22
    2716:	89 a3       	std	Y+33, r24	; 0x21
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <H_Lcd_Void_LCDWriteCommand+0x212>
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	98 a3       	std	Y+32, r25	; 0x20
    2720:	8f 8f       	std	Y+31, r24	; 0x1f
    2722:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2724:	98 a1       	ldd	r25, Y+32	; 0x20
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <H_Lcd_Void_LCDWriteCommand+0x200>
    272a:	98 a3       	std	Y+32, r25	; 0x20
    272c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	89 a1       	ldd	r24, Y+33	; 0x21
    2730:	9a a1       	ldd	r25, Y+34	; 0x22
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9a a3       	std	Y+34, r25	; 0x22
    2736:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6b a1       	ldd	r22, Y+35	; 0x23
    2744:	7c a1       	ldd	r23, Y+36	; 0x24
    2746:	8d a1       	ldd	r24, Y+37	; 0x25
    2748:	9e a1       	ldd	r25, Y+38	; 0x26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9a a3       	std	Y+34, r25	; 0x22
    2754:	89 a3       	std	Y+33, r24	; 0x21
    2756:	89 a1       	ldd	r24, Y+33	; 0x21
    2758:	9a a1       	ldd	r25, Y+34	; 0x22
    275a:	9e 8f       	std	Y+30, r25	; 0x1e
    275c:	8d 8f       	std	Y+29, r24	; 0x1d
    275e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2760:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2766:	9e 8f       	std	Y+30, r25	; 0x1e
    2768:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    276a:	89 ad       	ldd	r24, Y+57	; 0x39
    276c:	98 2f       	mov	r25, r24
    276e:	91 70       	andi	r25, 0x01	; 1
    2770:	84 e1       	ldi	r24, 0x14	; 20
    2772:	69 2f       	mov	r22, r25
    2774:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2778:	89 ad       	ldd	r24, Y+57	; 0x39
    277a:	86 95       	lsr	r24
    277c:	98 2f       	mov	r25, r24
    277e:	91 70       	andi	r25, 0x01	; 1
    2780:	85 e1       	ldi	r24, 0x15	; 21
    2782:	69 2f       	mov	r22, r25
    2784:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2788:	89 ad       	ldd	r24, Y+57	; 0x39
    278a:	86 95       	lsr	r24
    278c:	86 95       	lsr	r24
    278e:	98 2f       	mov	r25, r24
    2790:	91 70       	andi	r25, 0x01	; 1
    2792:	86 e1       	ldi	r24, 0x16	; 22
    2794:	69 2f       	mov	r22, r25
    2796:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    279a:	89 ad       	ldd	r24, Y+57	; 0x39
    279c:	86 95       	lsr	r24
    279e:	86 95       	lsr	r24
    27a0:	86 95       	lsr	r24
    27a2:	98 2f       	mov	r25, r24
    27a4:	91 70       	andi	r25, 0x01	; 1
    27a6:	88 e1       	ldi	r24, 0x18	; 24
    27a8:	69 2f       	mov	r22, r25
    27aa:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    27ae:	8c e0       	ldi	r24, 0x0C	; 12
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a0 e8       	ldi	r26, 0x80	; 128
    27bc:	bf e3       	ldi	r27, 0x3F	; 63
    27be:	89 8f       	std	Y+25, r24	; 0x19
    27c0:	9a 8f       	std	Y+26, r25	; 0x1a
    27c2:	ab 8f       	std	Y+27, r26	; 0x1b
    27c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a e7       	ldi	r20, 0x7A	; 122
    27d4:	55 e4       	ldi	r21, 0x45	; 69
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8d 8b       	std	Y+21, r24	; 0x15
    27e0:	9e 8b       	std	Y+22, r25	; 0x16
    27e2:	af 8b       	std	Y+23, r26	; 0x17
    27e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	69 8d       	ldd	r22, Y+25	; 0x19
    2822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <H_Lcd_Void_LCDWriteCommand+0x342>
    284a:	80 e9       	ldi	r24, 0x90	; 144
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
    2852:	89 89       	ldd	r24, Y+17	; 0x11
    2854:	9a 89       	ldd	r25, Y+18	; 0x12
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <H_Lcd_Void_LCDWriteCommand+0x330>
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <H_Lcd_Void_LCDWriteCommand+0x324>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	8b 89       	ldd	r24, Y+19	; 0x13
    2888:	9c 89       	ldd	r25, Y+20	; 0x14
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
    288e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2890:	98 89       	ldd	r25, Y+16	; 0x10
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <H_Lcd_Void_LCDWriteCommand+0x36c>
    2896:	98 8b       	std	Y+16, r25	; 0x10
    2898:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    289a:	8c e0       	ldi	r24, 0x0C	; 12
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 ea       	ldi	r26, 0xA0	; 160
    28a8:	b0 e4       	ldi	r27, 0x40	; 64
    28aa:	8b 87       	std	Y+11, r24	; 0x0b
    28ac:	9c 87       	std	Y+12, r25	; 0x0c
    28ae:	ad 87       	std	Y+13, r26	; 0x0d
    28b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	55 e4       	ldi	r21, 0x45	; 69
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8f 83       	std	Y+7, r24	; 0x07
    28cc:	98 87       	std	Y+8, r25	; 0x08
    28ce:	a9 87       	std	Y+9, r26	; 0x09
    28d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	3f c0       	rjmp	.+126    	; 0x2972 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    28f4:	6f 81       	ldd	r22, Y+7	; 0x07
    28f6:	78 85       	ldd	r23, Y+8	; 0x08
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	57 e4       	ldi	r21, 0x47	; 71
    2904:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2908:	18 16       	cp	r1, r24
    290a:	4c f5       	brge	.+82     	; 0x295e <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <H_Lcd_Void_LCDWriteCommand+0x42e>
    2936:	80 e9       	ldi	r24, 0x90	; 144
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <H_Lcd_Void_LCDWriteCommand+0x41c>
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	69 f7       	brne	.-38     	; 0x2936 <H_Lcd_Void_LCDWriteCommand+0x410>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <H_Lcd_Void_LCDWriteCommand+0x458>
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2986:	e9 96       	adiw	r28, 0x39	; 57
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <H_Lcd_Void_LCDWriteString+0x6>
    299e:	0f 92       	push	r0
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9b 83       	std	Y+3, r25	; 0x03
    29a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    29a8:	19 82       	std	Y+1, r1	; 0x01
    29aa:	0e c0       	rjmp	.+28     	; 0x29c8 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	9b 81       	ldd	r25, Y+3	; 0x03
    29b6:	fc 01       	movw	r30, r24
    29b8:	e2 0f       	add	r30, r18
    29ba:	f3 1f       	adc	r31, r19
    29bc:	80 81       	ld	r24, Z
    29be:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	fc 01       	movw	r30, r24
    29d4:	e2 0f       	add	r30, r18
    29d6:	f3 1f       	adc	r31, r19
    29d8:	80 81       	ld	r24, Z
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	29 f7       	brne	.-54     	; 0x29ac <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	2f 97       	sbiw	r28, 0x0f	; 15
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	6c 87       	std	Y+12, r22	; 0x0c
    2a1c:	7d 87       	std	Y+13, r23	; 0x0d
    2a1e:	8e 87       	std	Y+14, r24	; 0x0e
    2a20:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2a22:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2a24:	8a e0       	ldi	r24, 0x0A	; 10
    2a26:	fe 01       	movw	r30, r28
    2a28:	32 96       	adiw	r30, 0x02	; 2
    2a2a:	df 01       	movw	r26, r30
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	1d 92       	st	X+, r1
    2a30:	9a 95       	dec	r25
    2a32:	e9 f7       	brne	.-6      	; 0x2a2e <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2a34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a38:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a3a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a3c:	bb 23       	and	r27, r27
    2a3e:	94 f4       	brge	.+36     	; 0x2a64 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    2a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a44:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a46:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a48:	b0 95       	com	r27
    2a4a:	a0 95       	com	r26
    2a4c:	90 95       	com	r25
    2a4e:	81 95       	neg	r24
    2a50:	9f 4f       	sbci	r25, 0xFF	; 255
    2a52:	af 4f       	sbci	r26, 0xFF	; 255
    2a54:	bf 4f       	sbci	r27, 0xFF	; 255
    2a56:	8c 87       	std	Y+12, r24	; 0x0c
    2a58:	9d 87       	std	Y+13, r25	; 0x0d
    2a5a:	ae 87       	std	Y+14, r26	; 0x0e
    2a5c:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    2a5e:	8d e2       	ldi	r24, 0x2D	; 45
    2a60:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	08 2f       	mov	r16, r24
    2a68:	11 27       	eor	r17, r17
    2a6a:	07 fd       	sbrc	r16, 7
    2a6c:	10 95       	com	r17
    2a6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a70:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a72:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a74:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a76:	2a e0       	ldi	r18, 0x0A	; 10
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 85 24 	call	0x490a	; 0x490a <__divmodsi4>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	02 96       	adiw	r24, 0x02	; 2
    2a90:	fc 01       	movw	r30, r24
    2a92:	e0 0f       	add	r30, r16
    2a94:	f1 1f       	adc	r31, r17
    2a96:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2a98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a9c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a9e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2aa0:	2a e0       	ldi	r18, 0x0A	; 10
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 85 24 	call	0x490a	; 0x490a <__divmodsi4>
    2ab0:	da 01       	movw	r26, r20
    2ab2:	c9 01       	movw	r24, r18
    2ab4:	8c 87       	std	Y+12, r24	; 0x0c
    2ab6:	9d 87       	std	Y+13, r25	; 0x0d
    2ab8:	ae 87       	std	Y+14, r26	; 0x0e
    2aba:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    2ac2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ac6:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ac8:	bf 85       	ldd	r27, Y+15	; 0x0f
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	a1 05       	cpc	r26, r1
    2ace:	b1 05       	cpc	r27, r1
    2ad0:	49 f6       	brne	.-110    	; 0x2a64 <H_Lcd_Void_LCDWriteNumber+0x62>
    2ad2:	11 c0       	rjmp	.+34     	; 0x2af6 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	81 50       	subi	r24, 0x01	; 1
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	28 2f       	mov	r18, r24
    2ade:	33 27       	eor	r19, r19
    2ae0:	27 fd       	sbrc	r18, 7
    2ae2:	30 95       	com	r19
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	02 96       	adiw	r24, 0x02	; 2
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 0f       	add	r30, r18
    2aec:	f3 1f       	adc	r31, r19
    2aee:	80 81       	ld	r24, Z
    2af0:	80 5d       	subi	r24, 0xD0	; 208
    2af2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	18 16       	cp	r1, r24
    2afa:	64 f3       	brlt	.-40     	; 0x2ad4 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    2afc:	2f 96       	adiw	r28, 0x0f	; 15
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	08 95       	ret

00002b12 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <H_Lcd_Void_LCDGoTo+0x6>
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <H_Lcd_Void_LCDGoTo+0x8>
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <H_Lcd_Void_LCDGoTo+0xa>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2b24:	80 e8       	ldi	r24, 0x80	; 128
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	80 ec       	ldi	r24, 0xC0	; 192
    2b2a:	8a 83       	std	Y+2, r24	; 0x02
    2b2c:	84 e9       	ldi	r24, 0x94	; 148
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
    2b30:	84 ed       	ldi	r24, 0xD4	; 212
    2b32:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	90 81       	ld	r25, Z
    2b46:	8e 81       	ldd	r24, Y+6	; 0x06
    2b48:	89 0f       	add	r24, r25
    2b4a:	0e 94 93 12 	call	0x2526	; 0x2526 <H_Lcd_Void_LCDWriteCommand>
}
    2b4e:	26 96       	adiw	r28, 0x06	; 6
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <H_LED_Void_LedInit+0x6>
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	3b 83       	std	Y+3, r19	; 0x03
    2b76:	2a 83       	std	Y+2, r18	; 0x02
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	91 05       	cpc	r25, r1
    2b80:	d9 f0       	breq	.+54     	; 0x2bb8 <H_LED_Void_LedInit+0x58>
    2b82:	2a 81       	ldd	r18, Y+2	; 0x02
    2b84:	3b 81       	ldd	r19, Y+3	; 0x03
    2b86:	23 30       	cpi	r18, 0x03	; 3
    2b88:	31 05       	cpc	r19, r1
    2b8a:	34 f4       	brge	.+12     	; 0x2b98 <H_LED_Void_LedInit+0x38>
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	81 30       	cpi	r24, 0x01	; 1
    2b92:	91 05       	cpc	r25, r1
    2b94:	61 f0       	breq	.+24     	; 0x2bae <H_LED_Void_LedInit+0x4e>
    2b96:	1e c0       	rjmp	.+60     	; 0x2bd4 <H_LED_Void_LedInit+0x74>
    2b98:	2a 81       	ldd	r18, Y+2	; 0x02
    2b9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b9c:	23 30       	cpi	r18, 0x03	; 3
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	81 f0       	breq	.+32     	; 0x2bc2 <H_LED_Void_LedInit+0x62>
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	84 30       	cpi	r24, 0x04	; 4
    2ba8:	91 05       	cpc	r25, r1
    2baa:	81 f0       	breq	.+32     	; 0x2bcc <H_LED_Void_LedInit+0x6c>
    2bac:	13 c0       	rjmp	.+38     	; 0x2bd4 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    2bae:	80 e1       	ldi	r24, 0x10	; 16
    2bb0:	61 e0       	ldi	r22, 0x01	; 1
    2bb2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2bb6:	0e c0       	rjmp	.+28     	; 0x2bd4 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    2bb8:	8f e0       	ldi	r24, 0x0F	; 15
    2bba:	61 e0       	ldi	r22, 0x01	; 1
    2bbc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2bc0:	09 c0       	rjmp	.+18     	; 0x2bd4 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2bc2:	8e e0       	ldi	r24, 0x0E	; 14
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    2bcc:	8b e1       	ldi	r24, 0x1B	; 27
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <H_LED_Void_LedOn+0x6>
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	3b 83       	std	Y+3, r19	; 0x03
    2bf6:	2a 83       	std	Y+2, r18	; 0x02
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	82 30       	cpi	r24, 0x02	; 2
    2bfe:	91 05       	cpc	r25, r1
    2c00:	d9 f0       	breq	.+54     	; 0x2c38 <H_LED_Void_LedOn+0x58>
    2c02:	2a 81       	ldd	r18, Y+2	; 0x02
    2c04:	3b 81       	ldd	r19, Y+3	; 0x03
    2c06:	23 30       	cpi	r18, 0x03	; 3
    2c08:	31 05       	cpc	r19, r1
    2c0a:	34 f4       	brge	.+12     	; 0x2c18 <H_LED_Void_LedOn+0x38>
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c10:	81 30       	cpi	r24, 0x01	; 1
    2c12:	91 05       	cpc	r25, r1
    2c14:	61 f0       	breq	.+24     	; 0x2c2e <H_LED_Void_LedOn+0x4e>
    2c16:	1e c0       	rjmp	.+60     	; 0x2c54 <H_LED_Void_LedOn+0x74>
    2c18:	2a 81       	ldd	r18, Y+2	; 0x02
    2c1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c1c:	23 30       	cpi	r18, 0x03	; 3
    2c1e:	31 05       	cpc	r19, r1
    2c20:	81 f0       	breq	.+32     	; 0x2c42 <H_LED_Void_LedOn+0x62>
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	84 30       	cpi	r24, 0x04	; 4
    2c28:	91 05       	cpc	r25, r1
    2c2a:	81 f0       	breq	.+32     	; 0x2c4c <H_LED_Void_LedOn+0x6c>
    2c2c:	13 c0       	rjmp	.+38     	; 0x2c54 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    2c2e:	80 e1       	ldi	r24, 0x10	; 16
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2c36:	0e c0       	rjmp	.+28     	; 0x2c54 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    2c38:	8f e0       	ldi	r24, 0x0F	; 15
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2c40:	09 c0       	rjmp	.+18     	; 0x2c54 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    2c42:	8e e0       	ldi	r24, 0x0E	; 14
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2c4a:	04 c0       	rjmp	.+8      	; 0x2c54 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    2c4c:	8b e1       	ldi	r24, 0x1B	; 27
    2c4e:	61 e0       	ldi	r22, 0x01	; 1
    2c50:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <H_LED_Void_LedOff+0x6>
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	3b 83       	std	Y+3, r19	; 0x03
    2c76:	2a 83       	std	Y+2, r18	; 0x02
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	82 30       	cpi	r24, 0x02	; 2
    2c7e:	91 05       	cpc	r25, r1
    2c80:	d9 f0       	breq	.+54     	; 0x2cb8 <H_LED_Void_LedOff+0x58>
    2c82:	2a 81       	ldd	r18, Y+2	; 0x02
    2c84:	3b 81       	ldd	r19, Y+3	; 0x03
    2c86:	23 30       	cpi	r18, 0x03	; 3
    2c88:	31 05       	cpc	r19, r1
    2c8a:	34 f4       	brge	.+12     	; 0x2c98 <H_LED_Void_LedOff+0x38>
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	91 05       	cpc	r25, r1
    2c94:	61 f0       	breq	.+24     	; 0x2cae <H_LED_Void_LedOff+0x4e>
    2c96:	1e c0       	rjmp	.+60     	; 0x2cd4 <H_LED_Void_LedOff+0x74>
    2c98:	2a 81       	ldd	r18, Y+2	; 0x02
    2c9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c9c:	23 30       	cpi	r18, 0x03	; 3
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	81 f0       	breq	.+32     	; 0x2cc2 <H_LED_Void_LedOff+0x62>
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	84 30       	cpi	r24, 0x04	; 4
    2ca8:	91 05       	cpc	r25, r1
    2caa:	81 f0       	breq	.+32     	; 0x2ccc <H_LED_Void_LedOff+0x6c>
    2cac:	13 c0       	rjmp	.+38     	; 0x2cd4 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    2cae:	80 e1       	ldi	r24, 0x10	; 16
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2cb6:	0e c0       	rjmp	.+28     	; 0x2cd4 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2cb8:	8f e0       	ldi	r24, 0x0F	; 15
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2cc0:	09 c0       	rjmp	.+18     	; 0x2cd4 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2cc2:	8e e0       	ldi	r24, 0x0E	; 14
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    2ccc:	8b e1       	ldi	r24, 0x1B	; 27
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	eb 97       	sbiw	r28, 0x3b	; 59
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2cf6:	89 ad       	ldd	r24, Y+57	; 0x39
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	3b af       	std	Y+59, r19	; 0x3b
    2cfe:	2a af       	std	Y+58, r18	; 0x3a
    2d00:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d02:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d04:	82 30       	cpi	r24, 0x02	; 2
    2d06:	91 05       	cpc	r25, r1
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <H_LED_Void_LedBlink+0x2c>
    2d0a:	93 c0       	rjmp	.+294    	; 0x2e32 <H_LED_Void_LedBlink+0x152>
    2d0c:	2a ad       	ldd	r18, Y+58	; 0x3a
    2d0e:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d10:	23 30       	cpi	r18, 0x03	; 3
    2d12:	31 05       	cpc	r19, r1
    2d14:	34 f4       	brge	.+12     	; 0x2d22 <H_LED_Void_LedBlink+0x42>
    2d16:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d18:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	71 f0       	breq	.+28     	; 0x2d3c <H_LED_Void_LedBlink+0x5c>
    2d20:	f8 c1       	rjmp	.+1008   	; 0x3112 <H_LED_Void_LedBlink+0x432>
    2d22:	2a ad       	ldd	r18, Y+58	; 0x3a
    2d24:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d26:	23 30       	cpi	r18, 0x03	; 3
    2d28:	31 05       	cpc	r19, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <H_LED_Void_LedBlink+0x4e>
    2d2c:	fd c0       	rjmp	.+506    	; 0x2f28 <H_LED_Void_LedBlink+0x248>
    2d2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d30:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	91 05       	cpc	r25, r1
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <H_LED_Void_LedBlink+0x5a>
    2d38:	72 c1       	rjmp	.+740    	; 0x301e <H_LED_Void_LedBlink+0x33e>
    2d3a:	eb c1       	rjmp	.+982    	; 0x3112 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    2d3c:	80 e1       	ldi	r24, 0x10	; 16
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	a6 e9       	ldi	r26, 0x96	; 150
    2d4a:	b3 e4       	ldi	r27, 0x43	; 67
    2d4c:	8d ab       	std	Y+53, r24	; 0x35
    2d4e:	9e ab       	std	Y+54, r25	; 0x36
    2d50:	af ab       	std	Y+55, r26	; 0x37
    2d52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	6d a9       	ldd	r22, Y+53	; 0x35
    2d56:	7e a9       	ldd	r23, Y+54	; 0x36
    2d58:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	4a e7       	ldi	r20, 0x7A	; 122
    2d62:	55 e4       	ldi	r21, 0x45	; 69
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	89 ab       	std	Y+49, r24	; 0x31
    2d6e:	9a ab       	std	Y+50, r25	; 0x32
    2d70:	ab ab       	std	Y+51, r26	; 0x33
    2d72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d74:	69 a9       	ldd	r22, Y+49	; 0x31
    2d76:	7a a9       	ldd	r23, Y+50	; 0x32
    2d78:	8b a9       	ldd	r24, Y+51	; 0x33
    2d7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	98 ab       	std	Y+48, r25	; 0x30
    2d92:	8f a7       	std	Y+47, r24	; 0x2f
    2d94:	3f c0       	rjmp	.+126    	; 0x2e14 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2d96:	69 a9       	ldd	r22, Y+49	; 0x31
    2d98:	7a a9       	ldd	r23, Y+50	; 0x32
    2d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	57 e4       	ldi	r21, 0x47	; 71
    2da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2daa:	18 16       	cp	r1, r24
    2dac:	4c f5       	brge	.+82     	; 0x2e00 <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	6d a9       	ldd	r22, Y+53	; 0x35
    2db0:	7e a9       	ldd	r23, Y+54	; 0x36
    2db2:	8f a9       	ldd	r24, Y+55	; 0x37
    2db4:	98 ad       	ldd	r25, Y+56	; 0x38
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	98 ab       	std	Y+48, r25	; 0x30
    2dd4:	8f a7       	std	Y+47, r24	; 0x2f
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <H_LED_Void_LedBlink+0x116>
    2dd8:	80 e9       	ldi	r24, 0x90	; 144
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	9e a7       	std	Y+46, r25	; 0x2e
    2dde:	8d a7       	std	Y+45, r24	; 0x2d
    2de0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2de2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <H_LED_Void_LedBlink+0x104>
    2de8:	9e a7       	std	Y+46, r25	; 0x2e
    2dea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dee:	98 a9       	ldd	r25, Y+48	; 0x30
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	98 ab       	std	Y+48, r25	; 0x30
    2df4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	69 f7       	brne	.-38     	; 0x2dd8 <H_LED_Void_LedBlink+0xf8>
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	69 a9       	ldd	r22, Y+49	; 0x31
    2e02:	7a a9       	ldd	r23, Y+50	; 0x32
    2e04:	8b a9       	ldd	r24, Y+51	; 0x33
    2e06:	9c a9       	ldd	r25, Y+52	; 0x34
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	98 ab       	std	Y+48, r25	; 0x30
    2e12:	8f a7       	std	Y+47, r24	; 0x2f
    2e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e16:	98 a9       	ldd	r25, Y+48	; 0x30
    2e18:	9c a7       	std	Y+44, r25	; 0x2c
    2e1a:	8b a7       	std	Y+43, r24	; 0x2b
    2e1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <H_LED_Void_LedBlink+0x140>
    2e24:	9c a7       	std	Y+44, r25	; 0x2c
    2e26:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    2e28:	80 e1       	ldi	r24, 0x10	; 16
    2e2a:	60 e0       	ldi	r22, 0x00	; 0
    2e2c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2e30:	70 c1       	rjmp	.+736    	; 0x3112 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    2e32:	8f e0       	ldi	r24, 0x0F	; 15
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	a6 e9       	ldi	r26, 0x96	; 150
    2e40:	b3 e4       	ldi	r27, 0x43	; 67
    2e42:	8f a3       	std	Y+39, r24	; 0x27
    2e44:	98 a7       	std	Y+40, r25	; 0x28
    2e46:	a9 a7       	std	Y+41, r26	; 0x29
    2e48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4a e7       	ldi	r20, 0x7A	; 122
    2e58:	55 e4       	ldi	r21, 0x45	; 69
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	8b a3       	std	Y+35, r24	; 0x23
    2e64:	9c a3       	std	Y+36, r25	; 0x24
    2e66:	ad a3       	std	Y+37, r26	; 0x25
    2e68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e70:	9e a1       	ldd	r25, Y+38	; 0x26
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	5f e3       	ldi	r21, 0x3F	; 63
    2e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	2c f4       	brge	.+10     	; 0x2e8c <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9a a3       	std	Y+34, r25	; 0x22
    2e88:	89 a3       	std	Y+33, r24	; 0x21
    2e8a:	3f c0       	rjmp	.+126    	; 0x2f0a <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    2e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e90:	8d a1       	ldd	r24, Y+37	; 0x25
    2e92:	9e a1       	ldd	r25, Y+38	; 0x26
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	57 e4       	ldi	r21, 0x47	; 71
    2e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	4c f5       	brge	.+82     	; 0x2ef6 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e2       	ldi	r20, 0x20	; 32
    2eb2:	51 e4       	ldi	r21, 0x41	; 65
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	bc 01       	movw	r22, r24
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9a a3       	std	Y+34, r25	; 0x22
    2eca:	89 a3       	std	Y+33, r24	; 0x21
    2ecc:	0f c0       	rjmp	.+30     	; 0x2eec <H_LED_Void_LedBlink+0x20c>
    2ece:	80 e9       	ldi	r24, 0x90	; 144
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	98 a3       	std	Y+32, r25	; 0x20
    2ed4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ed8:	98 a1       	ldd	r25, Y+32	; 0x20
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <H_LED_Void_LedBlink+0x1fa>
    2ede:	98 a3       	std	Y+32, r25	; 0x20
    2ee0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	9a a3       	std	Y+34, r25	; 0x22
    2eea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eec:	89 a1       	ldd	r24, Y+33	; 0x21
    2eee:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	69 f7       	brne	.-38     	; 0x2ece <H_LED_Void_LedBlink+0x1ee>
    2ef4:	14 c0       	rjmp	.+40     	; 0x2f1e <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    2efa:	8d a1       	ldd	r24, Y+37	; 0x25
    2efc:	9e a1       	ldd	r25, Y+38	; 0x26
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	9a a3       	std	Y+34, r25	; 0x22
    2f08:	89 a3       	std	Y+33, r24	; 0x21
    2f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f10:	8d 8f       	std	Y+29, r24	; 0x1d
    2f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <H_LED_Void_LedBlink+0x236>
    2f1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f1c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2f1e:	8f e0       	ldi	r24, 0x0F	; 15
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2f26:	f5 c0       	rjmp	.+490    	; 0x3112 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2f28:	8e e0       	ldi	r24, 0x0E	; 14
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a6 e9       	ldi	r26, 0x96	; 150
    2f36:	b3 e4       	ldi	r27, 0x43	; 67
    2f38:	89 8f       	std	Y+25, r24	; 0x19
    2f3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	69 8d       	ldd	r22, Y+25	; 0x19
    2f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a e7       	ldi	r20, 0x7A	; 122
    2f4e:	55 e4       	ldi	r21, 0x45	; 69
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8d 8b       	std	Y+21, r24	; 0x15
    2f5a:	9e 8b       	std	Y+22, r25	; 0x16
    2f5c:	af 8b       	std	Y+23, r26	; 0x17
    2f5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f60:	6d 89       	ldd	r22, Y+21	; 0x15
    2f62:	7e 89       	ldd	r23, Y+22	; 0x16
    2f64:	8f 89       	ldd	r24, Y+23	; 0x17
    2f66:	98 8d       	ldd	r25, Y+24	; 0x18
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 8b       	std	Y+20, r25	; 0x14
    2f7e:	8b 8b       	std	Y+19, r24	; 0x13
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2f82:	6d 89       	ldd	r22, Y+21	; 0x15
    2f84:	7e 89       	ldd	r23, Y+22	; 0x16
    2f86:	8f 89       	ldd	r24, Y+23	; 0x17
    2f88:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9c 8b       	std	Y+20, r25	; 0x14
    2fc0:	8b 8b       	std	Y+19, r24	; 0x13
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <H_LED_Void_LedBlink+0x302>
    2fc4:	80 e9       	ldi	r24, 0x90	; 144
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	9a 8b       	std	Y+18, r25	; 0x12
    2fca:	89 8b       	std	Y+17, r24	; 0x11
    2fcc:	89 89       	ldd	r24, Y+17	; 0x11
    2fce:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <H_LED_Void_LedBlink+0x2f0>
    2fd4:	9a 8b       	std	Y+18, r25	; 0x12
    2fd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fda:	9c 89       	ldd	r25, Y+20	; 0x14
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9c 8b       	std	Y+20, r25	; 0x14
    2fe0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <H_LED_Void_LedBlink+0x2e4>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6d 89       	ldd	r22, Y+21	; 0x15
    2fee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	98 8b       	std	Y+16, r25	; 0x10
    3006:	8f 87       	std	Y+15, r24	; 0x0f
    3008:	8f 85       	ldd	r24, Y+15	; 0x0f
    300a:	98 89       	ldd	r25, Y+16	; 0x10
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <H_LED_Void_LedBlink+0x32c>
    3010:	98 8b       	std	Y+16, r25	; 0x10
    3012:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    3014:	8e e0       	ldi	r24, 0x0E	; 14
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    301c:	7a c0       	rjmp	.+244    	; 0x3112 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    301e:	8b e1       	ldi	r24, 0x1B	; 27
    3020:	61 e0       	ldi	r22, 0x01	; 1
    3022:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a6 e9       	ldi	r26, 0x96	; 150
    302c:	b3 e4       	ldi	r27, 0x43	; 67
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	ad 87       	std	Y+13, r26	; 0x0d
    3034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	55 e4       	ldi	r21, 0x45	; 69
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	98 87       	std	Y+8, r25	; 0x08
    3052:	a9 87       	std	Y+9, r26	; 0x09
    3054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6b 85       	ldd	r22, Y+11	; 0x0b
    3092:	7c 85       	ldd	r23, Y+12	; 0x0c
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <H_LED_Void_LedBlink+0x3f8>
    30ba:	80 e9       	ldi	r24, 0x90	; 144
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <H_LED_Void_LedBlink+0x3e6>
    30ca:	9c 83       	std	Y+4, r25	; 0x04
    30cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <H_LED_Void_LedBlink+0x3da>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <H_LED_Void_LedBlink+0x422>
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    310a:	8b e1       	ldi	r24, 0x1B	; 27
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    3112:	eb 96       	adiw	r28, 0x3b	; 59
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <H_LED_Void_LedTog+0x6>
    312a:	0f 92       	push	r0
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	3b 83       	std	Y+3, r19	; 0x03
    313a:	2a 83       	std	Y+2, r18	; 0x02
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	9b 81       	ldd	r25, Y+3	; 0x03
    3140:	82 30       	cpi	r24, 0x02	; 2
    3142:	91 05       	cpc	r25, r1
    3144:	d1 f0       	breq	.+52     	; 0x317a <H_LED_Void_LedTog+0x56>
    3146:	2a 81       	ldd	r18, Y+2	; 0x02
    3148:	3b 81       	ldd	r19, Y+3	; 0x03
    314a:	23 30       	cpi	r18, 0x03	; 3
    314c:	31 05       	cpc	r19, r1
    314e:	34 f4       	brge	.+12     	; 0x315c <H_LED_Void_LedTog+0x38>
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	9b 81       	ldd	r25, Y+3	; 0x03
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	91 05       	cpc	r25, r1
    3158:	61 f0       	breq	.+24     	; 0x3172 <H_LED_Void_LedTog+0x4e>
    315a:	1a c0       	rjmp	.+52     	; 0x3190 <H_LED_Void_LedTog+0x6c>
    315c:	2a 81       	ldd	r18, Y+2	; 0x02
    315e:	3b 81       	ldd	r19, Y+3	; 0x03
    3160:	23 30       	cpi	r18, 0x03	; 3
    3162:	31 05       	cpc	r19, r1
    3164:	71 f0       	breq	.+28     	; 0x3182 <H_LED_Void_LedTog+0x5e>
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	84 30       	cpi	r24, 0x04	; 4
    316c:	91 05       	cpc	r25, r1
    316e:	69 f0       	breq	.+26     	; 0x318a <H_LED_Void_LedTog+0x66>
    3170:	0f c0       	rjmp	.+30     	; 0x3190 <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    3172:	80 e1       	ldi	r24, 0x10	; 16
    3174:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
    3178:	0b c0       	rjmp	.+22     	; 0x3190 <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    317a:	8f e0       	ldi	r24, 0x0F	; 15
    317c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
    3180:	07 c0       	rjmp	.+14     	; 0x3190 <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    3182:	8e e0       	ldi	r24, 0x0E	; 14
    3184:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    318a:	8b e1       	ldi	r24, 0x1B	; 27
    318c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <H_PushButton_Void_PushButtonInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <H_PushButton_Void_PushButtonInit+0x6>
    31a2:	0f 92       	push	r0
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	3b 83       	std	Y+3, r19	; 0x03
    31b2:	2a 83       	std	Y+2, r18	; 0x02
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	91 05       	cpc	r25, r1
    31bc:	d1 f0       	breq	.+52     	; 0x31f2 <H_PushButton_Void_PushButtonInit+0x56>
    31be:	2a 81       	ldd	r18, Y+2	; 0x02
    31c0:	3b 81       	ldd	r19, Y+3	; 0x03
    31c2:	22 30       	cpi	r18, 0x02	; 2
    31c4:	31 05       	cpc	r19, r1
    31c6:	2c f4       	brge	.+10     	; 0x31d2 <H_PushButton_Void_PushButtonInit+0x36>
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <H_PushButton_Void_PushButtonInit+0x4c>
    31d0:	1e c0       	rjmp	.+60     	; 0x320e <H_PushButton_Void_PushButtonInit+0x72>
    31d2:	2a 81       	ldd	r18, Y+2	; 0x02
    31d4:	3b 81       	ldd	r19, Y+3	; 0x03
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	31 05       	cpc	r19, r1
    31da:	81 f0       	breq	.+32     	; 0x31fc <H_PushButton_Void_PushButtonInit+0x60>
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	83 30       	cpi	r24, 0x03	; 3
    31e2:	91 05       	cpc	r25, r1
    31e4:	81 f0       	breq	.+32     	; 0x3206 <H_PushButton_Void_PushButtonInit+0x6a>
    31e6:	13 c0       	rjmp	.+38     	; 0x320e <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    31e8:	8f e2       	ldi	r24, 0x2F	; 47
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    31f0:	0e c0       	rjmp	.+28     	; 0x320e <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    31f2:	8e e2       	ldi	r24, 0x2E	; 46
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    31fc:	8d e2       	ldi	r24, 0x2D	; 45
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    3204:	04 c0       	rjmp	.+8      	; 0x320e <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    3206:	8b e2       	ldi	r24, 0x2B	; 43
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	ec 97       	sbiw	r28, 0x3c	; 60
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    3234:	8a ad       	ldd	r24, Y+58	; 0x3a
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	3c af       	std	Y+60, r19	; 0x3c
    323c:	2b af       	std	Y+59, r18	; 0x3b
    323e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3240:	9c ad       	ldd	r25, Y+60	; 0x3c
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	91 05       	cpc	r25, r1
    3246:	09 f4       	brne	.+2      	; 0x324a <H_PushButton_U8_PushButtonRead+0x30>
    3248:	97 c0       	rjmp	.+302    	; 0x3378 <H_PushButton_U8_PushButtonRead+0x15e>
    324a:	2b ad       	ldd	r18, Y+59	; 0x3b
    324c:	3c ad       	ldd	r19, Y+60	; 0x3c
    324e:	22 30       	cpi	r18, 0x02	; 2
    3250:	31 05       	cpc	r19, r1
    3252:	2c f4       	brge	.+10     	; 0x325e <H_PushButton_U8_PushButtonRead+0x44>
    3254:	8b ad       	ldd	r24, Y+59	; 0x3b
    3256:	9c ad       	ldd	r25, Y+60	; 0x3c
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	71 f0       	breq	.+28     	; 0x3278 <H_PushButton_U8_PushButtonRead+0x5e>
    325c:	0b c2       	rjmp	.+1046   	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
    325e:	2b ad       	ldd	r18, Y+59	; 0x3b
    3260:	3c ad       	ldd	r19, Y+60	; 0x3c
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	31 05       	cpc	r19, r1
    3266:	09 f4       	brne	.+2      	; 0x326a <H_PushButton_U8_PushButtonRead+0x50>
    3268:	07 c1       	rjmp	.+526    	; 0x3478 <H_PushButton_U8_PushButtonRead+0x25e>
    326a:	8b ad       	ldd	r24, Y+59	; 0x3b
    326c:	9c ad       	ldd	r25, Y+60	; 0x3c
    326e:	83 30       	cpi	r24, 0x03	; 3
    3270:	91 05       	cpc	r25, r1
    3272:	09 f4       	brne	.+2      	; 0x3276 <H_PushButton_U8_PushButtonRead+0x5c>
    3274:	81 c1       	rjmp	.+770    	; 0x3578 <H_PushButton_U8_PushButtonRead+0x35e>
    3276:	fe c1       	rjmp	.+1020   	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3278:	8f e2       	ldi	r24, 0x2F	; 47
    327a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    327e:	88 23       	and	r24, r24
    3280:	09 f0       	breq	.+2      	; 0x3284 <H_PushButton_U8_PushButtonRead+0x6a>
    3282:	f8 c1       	rjmp	.+1008   	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a8 e4       	ldi	r26, 0x48	; 72
    328a:	b2 e4       	ldi	r27, 0x42	; 66
    328c:	8d ab       	std	Y+53, r24	; 0x35
    328e:	9e ab       	std	Y+54, r25	; 0x36
    3290:	af ab       	std	Y+55, r26	; 0x37
    3292:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6d a9       	ldd	r22, Y+53	; 0x35
    3296:	7e a9       	ldd	r23, Y+54	; 0x36
    3298:	8f a9       	ldd	r24, Y+55	; 0x37
    329a:	98 ad       	ldd	r25, Y+56	; 0x38
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a e7       	ldi	r20, 0x7A	; 122
    32a2:	55 e4       	ldi	r21, 0x45	; 69
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	89 ab       	std	Y+49, r24	; 0x31
    32ae:	9a ab       	std	Y+50, r25	; 0x32
    32b0:	ab ab       	std	Y+51, r26	; 0x33
    32b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32b4:	69 a9       	ldd	r22, Y+49	; 0x31
    32b6:	7a a9       	ldd	r23, Y+50	; 0x32
    32b8:	8b a9       	ldd	r24, Y+51	; 0x33
    32ba:	9c a9       	ldd	r25, Y+52	; 0x34
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	98 ab       	std	Y+48, r25	; 0x30
    32d2:	8f a7       	std	Y+47, r24	; 0x2f
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    32d6:	69 a9       	ldd	r22, Y+49	; 0x31
    32d8:	7a a9       	ldd	r23, Y+50	; 0x32
    32da:	8b a9       	ldd	r24, Y+51	; 0x33
    32dc:	9c a9       	ldd	r25, Y+52	; 0x34
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6d a9       	ldd	r22, Y+53	; 0x35
    32f0:	7e a9       	ldd	r23, Y+54	; 0x36
    32f2:	8f a9       	ldd	r24, Y+55	; 0x37
    32f4:	98 ad       	ldd	r25, Y+56	; 0x38
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	98 ab       	std	Y+48, r25	; 0x30
    3314:	8f a7       	std	Y+47, r24	; 0x2f
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <H_PushButton_U8_PushButtonRead+0x11c>
    3318:	80 e9       	ldi	r24, 0x90	; 144
    331a:	91 e0       	ldi	r25, 0x01	; 1
    331c:	9e a7       	std	Y+46, r25	; 0x2e
    331e:	8d a7       	std	Y+45, r24	; 0x2d
    3320:	8d a5       	ldd	r24, Y+45	; 0x2d
    3322:	9e a5       	ldd	r25, Y+46	; 0x2e
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <H_PushButton_U8_PushButtonRead+0x10a>
    3328:	9e a7       	std	Y+46, r25	; 0x2e
    332a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8f a5       	ldd	r24, Y+47	; 0x2f
    332e:	98 a9       	ldd	r25, Y+48	; 0x30
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8f a5       	ldd	r24, Y+47	; 0x2f
    3338:	98 a9       	ldd	r25, Y+48	; 0x30
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <H_PushButton_U8_PushButtonRead+0xfe>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	69 a9       	ldd	r22, Y+49	; 0x31
    3342:	7a a9       	ldd	r23, Y+50	; 0x32
    3344:	8b a9       	ldd	r24, Y+51	; 0x33
    3346:	9c a9       	ldd	r25, Y+52	; 0x34
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	98 ab       	std	Y+48, r25	; 0x30
    3352:	8f a7       	std	Y+47, r24	; 0x2f
    3354:	8f a5       	ldd	r24, Y+47	; 0x2f
    3356:	98 a9       	ldd	r25, Y+48	; 0x30
    3358:	9c a7       	std	Y+44, r25	; 0x2c
    335a:	8b a7       	std	Y+43, r24	; 0x2b
    335c:	8b a5       	ldd	r24, Y+43	; 0x2b
    335e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <H_PushButton_U8_PushButtonRead+0x146>
    3364:	9c a7       	std	Y+44, r25	; 0x2c
    3366:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    3368:	8f e2       	ldi	r24, 0x2F	; 47
    336a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    336e:	88 23       	and	r24, r24
    3370:	09 f0       	breq	.+2      	; 0x3374 <H_PushButton_U8_PushButtonRead+0x15a>
    3372:	80 c1       	rjmp	.+768    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3374:	19 ae       	std	Y+57, r1	; 0x39
    3376:	7e c1       	rjmp	.+764    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3378:	8e e2       	ldi	r24, 0x2E	; 46
    337a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    337e:	88 23       	and	r24, r24
    3380:	09 f0       	breq	.+2      	; 0x3384 <H_PushButton_U8_PushButtonRead+0x16a>
    3382:	78 c1       	rjmp	.+752    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a8 e4       	ldi	r26, 0x48	; 72
    338a:	b2 e4       	ldi	r27, 0x42	; 66
    338c:	8f a3       	std	Y+39, r24	; 0x27
    338e:	98 a7       	std	Y+40, r25	; 0x28
    3390:	a9 a7       	std	Y+41, r26	; 0x29
    3392:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	6f a1       	ldd	r22, Y+39	; 0x27
    3396:	78 a5       	ldd	r23, Y+40	; 0x28
    3398:	89 a5       	ldd	r24, Y+41	; 0x29
    339a:	9a a5       	ldd	r25, Y+42	; 0x2a
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a e7       	ldi	r20, 0x7A	; 122
    33a2:	55 e4       	ldi	r21, 0x45	; 69
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	8b a3       	std	Y+35, r24	; 0x23
    33ae:	9c a3       	std	Y+36, r25	; 0x24
    33b0:	ad a3       	std	Y+37, r26	; 0x25
    33b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33b4:	6b a1       	ldd	r22, Y+35	; 0x23
    33b6:	7c a1       	ldd	r23, Y+36	; 0x24
    33b8:	8d a1       	ldd	r24, Y+37	; 0x25
    33ba:	9e a1       	ldd	r25, Y+38	; 0x26
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c8:	88 23       	and	r24, r24
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
    33d4:	3f c0       	rjmp	.+126    	; 0x3454 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    33d6:	6b a1       	ldd	r22, Y+35	; 0x23
    33d8:	7c a1       	ldd	r23, Y+36	; 0x24
    33da:	8d a1       	ldd	r24, Y+37	; 0x25
    33dc:	9e a1       	ldd	r25, Y+38	; 0x26
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	4c f5       	brge	.+82     	; 0x3440 <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	6f a1       	ldd	r22, Y+39	; 0x27
    33f0:	78 a5       	ldd	r23, Y+40	; 0x28
    33f2:	89 a5       	ldd	r24, Y+41	; 0x29
    33f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9a a3       	std	Y+34, r25	; 0x22
    3414:	89 a3       	std	Y+33, r24	; 0x21
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <H_PushButton_U8_PushButtonRead+0x21c>
    3418:	80 e9       	ldi	r24, 0x90	; 144
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	98 a3       	std	Y+32, r25	; 0x20
    341e:	8f 8f       	std	Y+31, r24	; 0x1f
    3420:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3422:	98 a1       	ldd	r25, Y+32	; 0x20
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <H_PushButton_U8_PushButtonRead+0x20a>
    3428:	98 a3       	std	Y+32, r25	; 0x20
    342a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	89 a1       	ldd	r24, Y+33	; 0x21
    342e:	9a a1       	ldd	r25, Y+34	; 0x22
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9a a3       	std	Y+34, r25	; 0x22
    3434:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	89 a1       	ldd	r24, Y+33	; 0x21
    3438:	9a a1       	ldd	r25, Y+34	; 0x22
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	69 f7       	brne	.-38     	; 0x3418 <H_PushButton_U8_PushButtonRead+0x1fe>
    343e:	14 c0       	rjmp	.+40     	; 0x3468 <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3440:	6b a1       	ldd	r22, Y+35	; 0x23
    3442:	7c a1       	ldd	r23, Y+36	; 0x24
    3444:	8d a1       	ldd	r24, Y+37	; 0x25
    3446:	9e a1       	ldd	r25, Y+38	; 0x26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9a a3       	std	Y+34, r25	; 0x22
    3452:	89 a3       	std	Y+33, r24	; 0x21
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	9e 8f       	std	Y+30, r25	; 0x1e
    345a:	8d 8f       	std	Y+29, r24	; 0x1d
    345c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    345e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <H_PushButton_U8_PushButtonRead+0x246>
    3464:	9e 8f       	std	Y+30, r25	; 0x1e
    3466:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    3468:	8e e2       	ldi	r24, 0x2E	; 46
    346a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    346e:	88 23       	and	r24, r24
    3470:	09 f0       	breq	.+2      	; 0x3474 <H_PushButton_U8_PushButtonRead+0x25a>
    3472:	00 c1       	rjmp	.+512    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3474:	19 ae       	std	Y+57, r1	; 0x39
    3476:	fe c0       	rjmp	.+508    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3478:	8d e2       	ldi	r24, 0x2D	; 45
    347a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    347e:	88 23       	and	r24, r24
    3480:	09 f0       	breq	.+2      	; 0x3484 <H_PushButton_U8_PushButtonRead+0x26a>
    3482:	f8 c0       	rjmp	.+496    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a8 e4       	ldi	r26, 0x48	; 72
    348a:	b2 e4       	ldi	r27, 0x42	; 66
    348c:	89 8f       	std	Y+25, r24	; 0x19
    348e:	9a 8f       	std	Y+26, r25	; 0x1a
    3490:	ab 8f       	std	Y+27, r26	; 0x1b
    3492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	69 8d       	ldd	r22, Y+25	; 0x19
    3496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    349a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8d 8b       	std	Y+21, r24	; 0x15
    34ae:	9e 8b       	std	Y+22, r25	; 0x16
    34b0:	af 8b       	std	Y+23, r26	; 0x17
    34b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34b4:	6d 89       	ldd	r22, Y+21	; 0x15
    34b6:	7e 89       	ldd	r23, Y+22	; 0x16
    34b8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ba:	98 8d       	ldd	r25, Y+24	; 0x18
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	69 8d       	ldd	r22, Y+25	; 0x19
    34f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9c 8b       	std	Y+20, r25	; 0x14
    3514:	8b 8b       	std	Y+19, r24	; 0x13
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <H_PushButton_U8_PushButtonRead+0x31c>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	89 8b       	std	Y+17, r24	; 0x11
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <H_PushButton_U8_PushButtonRead+0x30a>
    3528:	9a 8b       	std	Y+18, r25	; 0x12
    352a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8b 89       	ldd	r24, Y+19	; 0x13
    352e:	9c 89       	ldd	r25, Y+20	; 0x14
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8b 89       	ldd	r24, Y+19	; 0x13
    3538:	9c 89       	ldd	r25, Y+20	; 0x14
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <H_PushButton_U8_PushButtonRead+0x2fe>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6d 89       	ldd	r22, Y+21	; 0x15
    3542:	7e 89       	ldd	r23, Y+22	; 0x16
    3544:	8f 89       	ldd	r24, Y+23	; 0x17
    3546:	98 8d       	ldd	r25, Y+24	; 0x18
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	8b 89       	ldd	r24, Y+19	; 0x13
    3556:	9c 89       	ldd	r25, Y+20	; 0x14
    3558:	98 8b       	std	Y+16, r25	; 0x10
    355a:	8f 87       	std	Y+15, r24	; 0x0f
    355c:	8f 85       	ldd	r24, Y+15	; 0x0f
    355e:	98 89       	ldd	r25, Y+16	; 0x10
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <H_PushButton_U8_PushButtonRead+0x346>
    3564:	98 8b       	std	Y+16, r25	; 0x10
    3566:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3568:	8d e2       	ldi	r24, 0x2D	; 45
    356a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    356e:	88 23       	and	r24, r24
    3570:	09 f0       	breq	.+2      	; 0x3574 <H_PushButton_U8_PushButtonRead+0x35a>
    3572:	80 c0       	rjmp	.+256    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3574:	19 ae       	std	Y+57, r1	; 0x39
    3576:	7e c0       	rjmp	.+252    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3578:	8b e2       	ldi	r24, 0x2B	; 43
    357a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    357e:	88 23       	and	r24, r24
    3580:	09 f0       	breq	.+2      	; 0x3584 <H_PushButton_U8_PushButtonRead+0x36a>
    3582:	78 c0       	rjmp	.+240    	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a8 e4       	ldi	r26, 0x48	; 72
    358a:	b2 e4       	ldi	r27, 0x42	; 66
    358c:	8b 87       	std	Y+11, r24	; 0x0b
    358e:	9c 87       	std	Y+12, r25	; 0x0c
    3590:	ad 87       	std	Y+13, r26	; 0x0d
    3592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	6b 85       	ldd	r22, Y+11	; 0x0b
    3596:	7c 85       	ldd	r23, Y+12	; 0x0c
    3598:	8d 85       	ldd	r24, Y+13	; 0x0d
    359a:	9e 85       	ldd	r25, Y+14	; 0x0e
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4a e7       	ldi	r20, 0x7A	; 122
    35a2:	55 e4       	ldi	r21, 0x45	; 69
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	8f 83       	std	Y+7, r24	; 0x07
    35ae:	98 87       	std	Y+8, r25	; 0x08
    35b0:	a9 87       	std	Y+9, r26	; 0x09
    35b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	78 85       	ldd	r23, Y+8	; 0x08
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e8       	ldi	r20, 0x80	; 128
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35c8:	88 23       	and	r24, r24
    35ca:	2c f4       	brge	.+10     	; 0x35d6 <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9e 83       	std	Y+6, r25	; 0x06
    35d2:	8d 83       	std	Y+5, r24	; 0x05
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	4c f5       	brge	.+82     	; 0x3640 <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9e 83       	std	Y+6, r25	; 0x06
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <H_PushButton_U8_PushButtonRead+0x41c>
    3618:	80 e9       	ldi	r24, 0x90	; 144
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	9c 83       	std	Y+4, r25	; 0x04
    361e:	8b 83       	std	Y+3, r24	; 0x03
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <H_PushButton_U8_PushButtonRead+0x40a>
    3628:	9c 83       	std	Y+4, r25	; 0x04
    362a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	8d 81       	ldd	r24, Y+5	; 0x05
    362e:	9e 81       	ldd	r25, Y+6	; 0x06
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	8d 81       	ldd	r24, Y+5	; 0x05
    3638:	9e 81       	ldd	r25, Y+6	; 0x06
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <H_PushButton_U8_PushButtonRead+0x3fe>
    363e:	14 c0       	rjmp	.+40     	; 0x3668 <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	6f 81       	ldd	r22, Y+7	; 0x07
    3642:	78 85       	ldd	r23, Y+8	; 0x08
    3644:	89 85       	ldd	r24, Y+9	; 0x09
    3646:	9a 85       	ldd	r25, Y+10	; 0x0a
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9e 83       	std	Y+6, r25	; 0x06
    3652:	8d 83       	std	Y+5, r24	; 0x05
    3654:	8d 81       	ldd	r24, Y+5	; 0x05
    3656:	9e 81       	ldd	r25, Y+6	; 0x06
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	9a 81       	ldd	r25, Y+2	; 0x02
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <H_PushButton_U8_PushButtonRead+0x446>
    3664:	9a 83       	std	Y+2, r25	; 0x02
    3666:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3668:	8b e2       	ldi	r24, 0x2B	; 43
    366a:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_DIO_Void_GetPinValue>
    366e:	88 23       	and	r24, r24
    3670:	09 f4       	brne	.+2      	; 0x3674 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3672:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    3674:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3676:	ec 96       	adiw	r28, 0x3c	; 60
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <Relay_voidInit>:
#include "DIO_Interface.h"
#include "Relay.h"
#include <util/delay.h>

void Relay_voidInit(void)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    M_DIO_Void_SetPinDirection(RELAY_PIN,OUTPUT);
    3690:	85 e2       	ldi	r24, 0x25	; 37
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinValue(RELAY_PIN,LOW);
    3698:	85 e2       	ldi	r24, 0x25	; 37
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <Relay_voidFlash>:

void Relay_voidFlash(void)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	0f 92       	push	r0
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    static u8 local_u8RState = 0;
    local_u8RState = !local_u8RState;
    36b0:	80 91 fe 01 	lds	r24, 0x01FE
    36b4:	19 82       	std	Y+1, r1	; 0x01
    36b6:	88 23       	and	r24, r24
    36b8:	11 f4       	brne	.+4      	; 0x36be <Relay_voidFlash+0x18>
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	80 93 fe 01 	sts	0x01FE, r24
    M_DIO_Void_SetPinValue(RELAY_PIN,local_u8RState);
    36c4:	90 91 fe 01 	lds	r25, 0x01FE
    36c8:	85 e2       	ldi	r24, 0x25	; 37
    36ca:	69 2f       	mov	r22, r25
    36cc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
}
    36d0:	0f 90       	pop	r0
    36d2:	cf 91       	pop	r28
    36d4:	df 91       	pop	r29
    36d6:	08 95       	ret

000036d8 <Relay_voidOff>:

void Relay_voidOff(void)
{
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    M_DIO_Void_SetPinValue(RELAY_PIN,LOW);
    36e0:	85 e2       	ldi	r24, 0x25	; 37
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <M_Timer_Void_TimerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
    36f6:	a3 e5       	ldi	r26, 0x53	; 83
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e3 e5       	ldi	r30, 0x53	; 83
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	8f 7b       	andi	r24, 0xBF	; 191
    3702:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
    3704:	a3 e5       	ldi	r26, 0x53	; 83
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e3 e5       	ldi	r30, 0x53	; 83
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	87 7f       	andi	r24, 0xF7	; 247
    3710:	8c 93       	st	X, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
    3712:	a9 e5       	ldi	r26, 0x59	; 89
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e9 e5       	ldi	r30, 0x59	; 89
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	81 60       	ori	r24, 0x01	; 1
    371e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <M_Timer_Void_TimerSetTime>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	2c 97       	sbiw	r28, 0x0c	; 12
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	69 87       	std	Y+9, r22	; 0x09
    373c:	7a 87       	std	Y+10, r23	; 0x0a
    373e:	8b 87       	std	Y+11, r24	; 0x0b
    3740:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
    3742:	80 e4       	ldi	r24, 0x40	; 64
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e0       	ldi	r26, 0x00	; 0
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	8d 83       	std	Y+5, r24	; 0x05
    374c:	9e 83       	std	Y+6, r25	; 0x06
    374e:	af 83       	std	Y+7, r26	; 0x07
    3750:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
    3752:	89 85       	ldd	r24, Y+9	; 0x09
    3754:	9a 85       	ldd	r25, Y+10	; 0x0a
    3756:	ab 85       	ldd	r26, Y+11	; 0x0b
    3758:	bc 85       	ldd	r27, Y+12	; 0x0c
    375a:	28 ee       	ldi	r18, 0xE8	; 232
    375c:	33 e0       	ldi	r19, 0x03	; 3
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulsi3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	2d 81       	ldd	r18, Y+5	; 0x05
    3770:	3e 81       	ldd	r19, Y+6	; 0x06
    3772:	4f 81       	ldd	r20, Y+7	; 0x07
    3774:	58 85       	ldd	r21, Y+8	; 0x08
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <__udivmodsi4>
    377e:	da 01       	movw	r26, r20
    3780:	c9 01       	movw	r24, r18
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	ab 83       	std	Y+3, r26	; 0x03
    3788:	bc 83       	std	Y+4, r27	; 0x04

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	ab 81       	ldd	r26, Y+3	; 0x03
    3790:	bc 81       	ldd	r27, Y+4	; 0x04
    3792:	89 2f       	mov	r24, r25
    3794:	9a 2f       	mov	r25, r26
    3796:	ab 2f       	mov	r26, r27
    3798:	bb 27       	eor	r27, r27
    379a:	80 93 ff 01 	sts	0x01FF, r24
    379e:	90 93 00 02 	sts	0x0200, r25
    37a2:	a0 93 01 02 	sts	0x0201, r26
    37a6:	b0 93 02 02 	sts	0x0202, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	80 93 07 02 	sts	0x0207, r24
	if(Timer_U8_RemTicks != 0)
    37b0:	80 91 07 02 	lds	r24, 0x0207
    37b4:	88 23       	and	r24, r24
    37b6:	c9 f0       	breq	.+50     	; 0x37ea <M_Timer_Void_TimerSetTime+0xc4>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    37b8:	e2 e5       	ldi	r30, 0x52	; 82
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 91 07 02 	lds	r24, 0x0207
    37c0:	81 95       	neg	r24
    37c2:	80 83       	st	Z, r24
		Timer_U32_NumOfOV++;
    37c4:	80 91 ff 01 	lds	r24, 0x01FF
    37c8:	90 91 00 02 	lds	r25, 0x0200
    37cc:	a0 91 01 02 	lds	r26, 0x0201
    37d0:	b0 91 02 02 	lds	r27, 0x0202
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	a1 1d       	adc	r26, r1
    37d8:	b1 1d       	adc	r27, r1
    37da:	80 93 ff 01 	sts	0x01FF, r24
    37de:	90 93 00 02 	sts	0x0200, r25
    37e2:	a0 93 01 02 	sts	0x0201, r26
    37e6:	b0 93 02 02 	sts	0x0202, r27
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
    37ea:	2c 96       	adiw	r28, 0x0c	; 12
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	08 95       	ret

000037fc <M_Timer_Void_TimerStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	00 d0       	rcall	.+0      	; 0x3802 <M_Timer_Void_TimerStart+0x6>
    3802:	0f 92       	push	r0
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	28 2f       	mov	r18, r24
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	3b 83       	std	Y+3, r19	; 0x03
    3812:	2a 83       	std	Y+2, r18	; 0x02
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	31 f0       	breq	.+12     	; 0x3828 <M_Timer_Void_TimerStart+0x2c>
    381c:	2a 81       	ldd	r18, Y+2	; 0x02
    381e:	3b 81       	ldd	r19, Y+3	; 0x03
    3820:	21 30       	cpi	r18, 0x01	; 1
    3822:	31 05       	cpc	r19, r1
    3824:	b9 f0       	breq	.+46     	; 0x3854 <M_Timer_Void_TimerStart+0x58>
    3826:	2b c0       	rjmp	.+86     	; 0x387e <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
    3828:	a3 e5       	ldi	r26, 0x53	; 83
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e3 e5       	ldi	r30, 0x53	; 83
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	81 60       	ori	r24, 0x01	; 1
    3834:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
    3836:	a3 e5       	ldi	r26, 0x53	; 83
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	e3 e5       	ldi	r30, 0x53	; 83
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	8d 7f       	andi	r24, 0xFD	; 253
    3842:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
    3844:	a3 e5       	ldi	r26, 0x53	; 83
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e3 e5       	ldi	r30, 0x53	; 83
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	84 60       	ori	r24, 0x04	; 4
    3850:	8c 93       	st	X, r24
    3852:	15 c0       	rjmp	.+42     	; 0x387e <M_Timer_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
    3854:	ae e4       	ldi	r26, 0x4E	; 78
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	ee e4       	ldi	r30, 0x4E	; 78
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	81 60       	ori	r24, 0x01	; 1
    3860:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    3862:	ae e4       	ldi	r26, 0x4E	; 78
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	ee e4       	ldi	r30, 0x4E	; 78
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	8d 7f       	andi	r24, 0xFD	; 253
    386e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    3870:	ae e4       	ldi	r26, 0x4E	; 78
    3872:	b0 e0       	ldi	r27, 0x00	; 0
    3874:	ee e4       	ldi	r30, 0x4E	; 78
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	80 81       	ld	r24, Z
    387a:	84 60       	ori	r24, 0x04	; 4
    387c:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	cf 91       	pop	r28
    3886:	df 91       	pop	r29
    3888:	08 95       	ret

0000388a <M_Timer_Void_TimerStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	00 d0       	rcall	.+0      	; 0x3890 <M_Timer_Void_TimerStop+0x6>
    3890:	0f 92       	push	r0
    3892:	cd b7       	in	r28, 0x3d	; 61
    3894:	de b7       	in	r29, 0x3e	; 62
    3896:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	3b 83       	std	Y+3, r19	; 0x03
    38a0:	2a 83       	std	Y+2, r18	; 0x02
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	9b 81       	ldd	r25, Y+3	; 0x03
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	31 f0       	breq	.+12     	; 0x38b6 <M_Timer_Void_TimerStop+0x2c>
    38aa:	2a 81       	ldd	r18, Y+2	; 0x02
    38ac:	3b 81       	ldd	r19, Y+3	; 0x03
    38ae:	21 30       	cpi	r18, 0x01	; 1
    38b0:	31 05       	cpc	r19, r1
    38b2:	b9 f0       	breq	.+46     	; 0x38e2 <M_Timer_Void_TimerStop+0x58>
    38b4:	2b c0       	rjmp	.+86     	; 0x390c <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    38b6:	a3 e5       	ldi	r26, 0x53	; 83
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	e3 e5       	ldi	r30, 0x53	; 83
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 81       	ld	r24, Z
    38c0:	8e 7f       	andi	r24, 0xFE	; 254
    38c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    38c4:	a3 e5       	ldi	r26, 0x53	; 83
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e3 e5       	ldi	r30, 0x53	; 83
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	8d 7f       	andi	r24, 0xFD	; 253
    38d0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    38d2:	a3 e5       	ldi	r26, 0x53	; 83
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	e3 e5       	ldi	r30, 0x53	; 83
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	8b 7f       	andi	r24, 0xFB	; 251
    38de:	8c 93       	st	X, r24
    38e0:	15 c0       	rjmp	.+42     	; 0x390c <M_Timer_Void_TimerStop+0x82>
	

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    38e2:	ae e4       	ldi	r26, 0x4E	; 78
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	ee e4       	ldi	r30, 0x4E	; 78
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	80 81       	ld	r24, Z
    38ec:	8e 7f       	andi	r24, 0xFE	; 254
    38ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    38f0:	ae e4       	ldi	r26, 0x4E	; 78
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	ee e4       	ldi	r30, 0x4E	; 78
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	80 81       	ld	r24, Z
    38fa:	8d 7f       	andi	r24, 0xFD	; 253
    38fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    38fe:	ae e4       	ldi	r26, 0x4E	; 78
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	ee e4       	ldi	r30, 0x4E	; 78
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	80 81       	ld	r24, Z
    3908:	8b 7f       	andi	r24, 0xFB	; 251
    390a:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <M_Timer_Void_PWMInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	00 d0       	rcall	.+0      	; 0x391e <M_Timer_Void_PWMInit+0x6>
    391e:	0f 92       	push	r0
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    3924:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	28 2f       	mov	r18, r24
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	3b 83       	std	Y+3, r19	; 0x03
    392e:	2a 83       	std	Y+2, r18	; 0x02
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	9b 81       	ldd	r25, Y+3	; 0x03
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	31 f0       	breq	.+12     	; 0x3944 <M_Timer_Void_PWMInit+0x2c>
    3938:	2a 81       	ldd	r18, Y+2	; 0x02
    393a:	3b 81       	ldd	r19, Y+3	; 0x03
    393c:	21 30       	cpi	r18, 0x01	; 1
    393e:	31 05       	cpc	r19, r1
    3940:	a1 f0       	breq	.+40     	; 0x396a <M_Timer_Void_PWMInit+0x52>
    3942:	47 c0       	rjmp	.+142    	; 0x39d2 <M_Timer_Void_PWMInit+0xba>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    3944:	87 e1       	ldi	r24, 0x17	; 23
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    394c:	a3 e5       	ldi	r26, 0x53	; 83
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e3 e5       	ldi	r30, 0x53	; 83
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	8f 7e       	andi	r24, 0xEF	; 239
    3958:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    395a:	a3 e5       	ldi	r26, 0x53	; 83
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e3 e5       	ldi	r30, 0x53	; 83
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	80 62       	ori	r24, 0x20	; 32
    3966:	8c 93       	st	X, r24
    3968:	34 c0       	rjmp	.+104    	; 0x39d2 <M_Timer_Void_PWMInit+0xba>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    396a:	8d e2       	ldi	r24, 0x2D	; 45
    396c:	61 e0       	ldi	r22, 0x01	; 1
    396e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    3972:	af e4       	ldi	r26, 0x4F	; 79
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	ef e4       	ldi	r30, 0x4F	; 79
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	8e 7f       	andi	r24, 0xFE	; 254
    397e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    3980:	af e4       	ldi	r26, 0x4F	; 79
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	ef e4       	ldi	r30, 0x4F	; 79
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	82 60       	ori	r24, 0x02	; 2
    398c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    398e:	ae e4       	ldi	r26, 0x4E	; 78
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	ee e4       	ldi	r30, 0x4E	; 78
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	88 60       	ori	r24, 0x08	; 8
    399a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    399c:	ae e4       	ldi	r26, 0x4E	; 78
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	ee e4       	ldi	r30, 0x4E	; 78
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	80 61       	ori	r24, 0x10	; 16
    39a8:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    39aa:	af e4       	ldi	r26, 0x4F	; 79
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	ef e4       	ldi	r30, 0x4F	; 79
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	8f 7b       	andi	r24, 0xBF	; 191
    39b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    39b8:	af e4       	ldi	r26, 0x4F	; 79
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	ef e4       	ldi	r30, 0x4F	; 79
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	80 68       	ori	r24, 0x80	; 128
    39c4:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    39c6:	e6 e4       	ldi	r30, 0x46	; 70
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	91 e0       	ldi	r25, 0x01	; 1
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	08 95       	ret

000039de <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	27 97       	sbiw	r28, 0x07	; 7
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	4a 83       	std	Y+2, r20	; 0x02
    39fa:	5b 83       	std	Y+3, r21	; 0x03
    39fc:	6c 83       	std	Y+4, r22	; 0x04
    39fe:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	28 2f       	mov	r18, r24
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	3f 83       	std	Y+7, r19	; 0x07
    3a08:	2e 83       	std	Y+6, r18	; 0x06
    3a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	d9 f1       	breq	.+118    	; 0x3a88 <M_Timer_Void_PWMSetDutyCycle+0xaa>
    3a12:	ee 81       	ldd	r30, Y+6	; 0x06
    3a14:	ff 81       	ldd	r31, Y+7	; 0x07
    3a16:	e1 30       	cpi	r30, 0x01	; 1
    3a18:	f1 05       	cpc	r31, r1
    3a1a:	b1 f5       	brne	.+108    	; 0x3a88 <M_Timer_Void_PWMSetDutyCycle+0xaa>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    3a1c:	0a e4       	ldi	r16, 0x4A	; 74
    3a1e:	10 e0       	ldi	r17, 0x00	; 0
    3a20:	e6 e4       	ldi	r30, 0x46	; 70
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	91 81       	ldd	r25, Z+1	; 0x01
    3a28:	cc 01       	movw	r24, r24
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	bc 01       	movw	r22, r24
    3a3c:	cd 01       	movw	r24, r26
    3a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3a40:	3b 81       	ldd	r19, Y+3	; 0x03
    3a42:	4c 81       	ldd	r20, Y+4	; 0x04
    3a44:	5d 81       	ldd	r21, Y+5	; 0x05
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	48 ec       	ldi	r20, 0xC8	; 200
    3a58:	52 e4       	ldi	r21, 0x42	; 66
    3a5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e8       	ldi	r20, 0x80	; 128
    3a6c:	5f e3       	ldi	r21, 0x3F	; 63
    3a6e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	f8 01       	movw	r30, r16
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    3a88:	27 96       	adiw	r28, 0x07	; 7
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	1f 91       	pop	r17
    3a9a:	0f 91       	pop	r16
    3a9c:	08 95       	ret

00003a9e <M_Timer_Void_PWMStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	0f 92       	push	r0
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <M_Timer_Void_TimerStart>
}
    3ab0:	0f 90       	pop	r0
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <M_Timer_Void_PWMStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	0f 92       	push	r0
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	0e 94 45 1c 	call	0x388a	; 0x388a <M_Timer_Void_TimerStop>
}
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <M_Timer_Void_SetCallBack>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <M_Timer_Void_SetCallBack+0x6>
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	90 93 20 02 	sts	0x0220, r25
    3ae8:	80 93 1f 02 	sts	0x021F, r24
}
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	08 95       	ret

00003af6 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    3af6:	1f 92       	push	r1
    3af8:	0f 92       	push	r0
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	0f 92       	push	r0
    3afe:	11 24       	eor	r1, r1
    3b00:	2f 93       	push	r18
    3b02:	3f 93       	push	r19
    3b04:	4f 93       	push	r20
    3b06:	5f 93       	push	r21
    3b08:	6f 93       	push	r22
    3b0a:	7f 93       	push	r23
    3b0c:	8f 93       	push	r24
    3b0e:	9f 93       	push	r25
    3b10:	af 93       	push	r26
    3b12:	bf 93       	push	r27
    3b14:	ef 93       	push	r30
    3b16:	ff 93       	push	r31
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    3b20:	80 91 08 02 	lds	r24, 0x0208
    3b24:	90 91 09 02 	lds	r25, 0x0209
    3b28:	a0 91 0a 02 	lds	r26, 0x020A
    3b2c:	b0 91 0b 02 	lds	r27, 0x020B
    3b30:	01 96       	adiw	r24, 0x01	; 1
    3b32:	a1 1d       	adc	r26, r1
    3b34:	b1 1d       	adc	r27, r1
    3b36:	80 93 08 02 	sts	0x0208, r24
    3b3a:	90 93 09 02 	sts	0x0209, r25
    3b3e:	a0 93 0a 02 	sts	0x020A, r26
    3b42:	b0 93 0b 02 	sts	0x020B, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    3b46:	20 91 08 02 	lds	r18, 0x0208
    3b4a:	30 91 09 02 	lds	r19, 0x0209
    3b4e:	40 91 0a 02 	lds	r20, 0x020A
    3b52:	50 91 0b 02 	lds	r21, 0x020B
    3b56:	80 91 ff 01 	lds	r24, 0x01FF
    3b5a:	90 91 00 02 	lds	r25, 0x0200
    3b5e:	a0 91 01 02 	lds	r26, 0x0201
    3b62:	b0 91 02 02 	lds	r27, 0x0202
    3b66:	28 17       	cp	r18, r24
    3b68:	39 07       	cpc	r19, r25
    3b6a:	4a 07       	cpc	r20, r26
    3b6c:	5b 07       	cpc	r21, r27
    3b6e:	99 f4       	brne	.+38     	; 0x3b96 <__vector_11+0xa0>
	{
		Timer_CallBack();
    3b70:	e0 91 1f 02 	lds	r30, 0x021F
    3b74:	f0 91 20 02 	lds	r31, 0x0220
    3b78:	09 95       	icall
		Local_U32_Counter = 0;
    3b7a:	10 92 08 02 	sts	0x0208, r1
    3b7e:	10 92 09 02 	sts	0x0209, r1
    3b82:	10 92 0a 02 	sts	0x020A, r1
    3b86:	10 92 0b 02 	sts	0x020B, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    3b8a:	e2 e5       	ldi	r30, 0x52	; 82
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 91 07 02 	lds	r24, 0x0207
    3b92:	81 95       	neg	r24
    3b94:	80 83       	st	Z, r24
	}
}
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	ff 91       	pop	r31
    3b9c:	ef 91       	pop	r30
    3b9e:	bf 91       	pop	r27
    3ba0:	af 91       	pop	r26
    3ba2:	9f 91       	pop	r25
    3ba4:	8f 91       	pop	r24
    3ba6:	7f 91       	pop	r23
    3ba8:	6f 91       	pop	r22
    3baa:	5f 91       	pop	r21
    3bac:	4f 91       	pop	r20
    3bae:	3f 91       	pop	r19
    3bb0:	2f 91       	pop	r18
    3bb2:	0f 90       	pop	r0
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	0f 90       	pop	r0
    3bb8:	1f 90       	pop	r1
    3bba:	18 95       	reti

00003bbc <setup>:
u8 mins=30;
u8 sec=0;

/*setup*/
void setup (void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    gearState = gear_ArrState[0];
    3bc4:	80 91 e5 01 	lds	r24, 0x01E5
    3bc8:	80 93 e8 01 	sts	0x01E8, r24
    GIE_voidEnable();/*enable gie*/
    3bcc:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GIE_voidEnable>
    /*exti1 init*/
    M_EXTINT_Void_EXTINTInit(INT1_CHANNEL);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <M_EXTINT_Void_EXTINTInit>
    M_EXTINT_Void_SetCallBack(INT1_CHANNEL,GB_Shift);
    3bd6:	23 ee       	ldi	r18, 0xE3	; 227
    3bd8:	30 e2       	ldi	r19, 0x20	; 32
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	b9 01       	movw	r22, r18
    3bde:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <M_EXTINT_Void_SetCallBack>
    
    H_Lcd_Void_LCDInit();
    3be2:	0e 94 29 10 	call	0x2052	; 0x2052 <H_Lcd_Void_LCDInit>
    H_Buzzer_Void_BuzzerInit();
    3be6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <H_Buzzer_Void_BuzzerInit>
    M_ADC_Void_ADCInit();
    3bea:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_ADC_Void_ADCInit>
    Relay_voidInit();
    3bee:	0e 94 44 1b 	call	0x3688	; 0x3688 <Relay_voidInit>
    H_LED_Void_LedInit(LED_YEL);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_GRN);
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_RED);
    3bfe:	84 e0       	ldi	r24, 0x04	; 4
    3c00:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <H_LED_Void_LedInit>
    H_KeyPad_Void_KeyPadInit();
    3c04:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <H_KeyPad_Void_KeyPadInit>

    /*timer init */
        /*timer init */
    M_Timer_Void_TimerInit();
    3c08:	0e 94 77 1b 	call	0x36ee	; 0x36ee <M_Timer_Void_TimerInit>
    M_Timer_Void_TimerSetTime(1000);
    3c0c:	68 ee       	ldi	r22, 0xE8	; 232
    3c0e:	73 e0       	ldi	r23, 0x03	; 3
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 93 1b 	call	0x3726	; 0x3726 <M_Timer_Void_TimerSetTime>
    M_Timer_Void_SetCallBack(timer_sec);
    3c18:	84 ed       	ldi	r24, 0xD4	; 212
    3c1a:	9e e1       	ldi	r25, 0x1E	; 30
    3c1c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <M_Timer_Void_SetCallBack>
    M_Timer_Void_TimerStart(TIMER0_CHANNEL);
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <M_Timer_Void_TimerStart>
    /*init lcd*/
    H_Lcd_Void_LCDGoTo(0,0);
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("******* GB:  *******");
    3c2e:	80 e6       	ldi	r24, 0x60	; 96
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(0,11);
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	6b e0       	ldi	r22, 0x0B	; 11
    3c3a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteCharacter(gearState);
    3c3e:	80 91 e8 01 	lds	r24, 0x01E8
    3c42:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDGoTo(1,0);
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("*                  *");
    3c4e:	85 e7       	ldi	r24, 0x75	; 117
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(3,0);
    3c56:	83 e0       	ldi	r24, 0x03	; 3
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString("*******( /4)********");
    3c5e:	8a e8       	ldi	r24, 0x8A	; 138
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    //h_pushbutton_void_pushbuttoninit(fuel);
    //h_pushbutton_void_pushbuttoninit(brake);
    //h_pushbutton_void_pushbuttoninit(ccs);
    //h_PushButton_Void_PushButtonInit(GB);
    #endif
}
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <main>:
/*loop*/
int main (void)
{
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    setup();
    3c74:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <setup>
	while(1)
	{
		#if (V0)
		DangerSate();
		#endif
        LCD_pageFlip();
    3c78:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_pageFlip>
		Brake_Padel();
    3c7c:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <Brake_Padel>
        BAS();
    3c80:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <BAS>
        LCD_Write_Speed();
    3c84:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <LCD_Write_Speed>
        speed_limiter();
    3c88:	0e 94 3d 21 	call	0x427a	; 0x427a <speed_limiter>
        CCS_States();
    3c8c:	0e 94 0c 20 	call	0x4018	; 0x4018 <CCS_States>
        CCS_operating();
    3c90:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <CCS_operating>
        Void_Write_Time();
    3c94:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <Void_Write_Time>
        distanceIncrement();
    3c98:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <distanceIncrement>
        distanceDisp();
    3c9c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <distanceDisp>
    3ca0:	eb cf       	rjmp	.-42     	; 0x3c78 <main+0xc>

00003ca2 <distanceIncrement>:

}
#endif

void distanceIncrement(void)
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <distanceIncrement+0x6>
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    if(gearState=='D')
    3cac:	80 91 e8 01 	lds	r24, 0x01E8
    3cb0:	84 34       	cpi	r24, 0x44	; 68
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <distanceIncrement+0x14>
    3cb4:	50 c0       	rjmp	.+160    	; 0x3d56 <distanceIncrement+0xb4>
    {
        u16 speed = ADC_u16Mapping_mm();
    3cb6:	0e 94 3b 23 	call	0x4676	; 0x4676 <ADC_u16Mapping_mm>
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
        if(speed == 0 )
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	19 f4       	brne	.+6      	; 0x3ccc <distanceIncrement+0x2a>
        {
            Dist_inc = 0;
    3cc6:	10 92 14 02 	sts	0x0214, r1
    3cca:	47 c0       	rjmp	.+142    	; 0x3d5a <distanceIncrement+0xb8>
        }
        else if((speed >0)&&(speed <40))
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	49 f0       	breq	.+18     	; 0x3ce6 <distanceIncrement+0x44>
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd8:	88 32       	cpi	r24, 0x28	; 40
    3cda:	91 05       	cpc	r25, r1
    3cdc:	20 f4       	brcc	.+8      	; 0x3ce6 <distanceIncrement+0x44>
        {
            Dist_inc = 1;
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	80 93 14 02 	sts	0x0214, r24
    3ce4:	3a c0       	rjmp	.+116    	; 0x3d5a <distanceIncrement+0xb8>
        }
        else if(speed >= 40 && speed < 80)
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	88 32       	cpi	r24, 0x28	; 40
    3cec:	91 05       	cpc	r25, r1
    3cee:	48 f0       	brcs	.+18     	; 0x3d02 <distanceIncrement+0x60>
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	80 35       	cpi	r24, 0x50	; 80
    3cf6:	91 05       	cpc	r25, r1
    3cf8:	20 f4       	brcc	.+8      	; 0x3d02 <distanceIncrement+0x60>
        {
            Dist_inc = 2;
    3cfa:	82 e0       	ldi	r24, 0x02	; 2
    3cfc:	80 93 14 02 	sts	0x0214, r24
    3d00:	2c c0       	rjmp	.+88     	; 0x3d5a <distanceIncrement+0xb8>
        }
        else if(speed >= 80 && speed < 120)
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	9a 81       	ldd	r25, Y+2	; 0x02
    3d06:	80 35       	cpi	r24, 0x50	; 80
    3d08:	91 05       	cpc	r25, r1
    3d0a:	48 f0       	brcs	.+18     	; 0x3d1e <distanceIncrement+0x7c>
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	88 37       	cpi	r24, 0x78	; 120
    3d12:	91 05       	cpc	r25, r1
    3d14:	20 f4       	brcc	.+8      	; 0x3d1e <distanceIncrement+0x7c>
        {
            Dist_inc = 3;
    3d16:	83 e0       	ldi	r24, 0x03	; 3
    3d18:	80 93 14 02 	sts	0x0214, r24
    3d1c:	1e c0       	rjmp	.+60     	; 0x3d5a <distanceIncrement+0xb8>
        }
        else if(speed >= 120 && speed < 160)
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	9a 81       	ldd	r25, Y+2	; 0x02
    3d22:	88 37       	cpi	r24, 0x78	; 120
    3d24:	91 05       	cpc	r25, r1
    3d26:	48 f0       	brcs	.+18     	; 0x3d3a <distanceIncrement+0x98>
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2c:	80 3a       	cpi	r24, 0xA0	; 160
    3d2e:	91 05       	cpc	r25, r1
    3d30:	20 f4       	brcc	.+8      	; 0x3d3a <distanceIncrement+0x98>
        {
            Dist_inc = 4;
    3d32:	84 e0       	ldi	r24, 0x04	; 4
    3d34:	80 93 14 02 	sts	0x0214, r24
    3d38:	10 c0       	rjmp	.+32     	; 0x3d5a <distanceIncrement+0xb8>
        }
        else if(speed >= 160 && speed <= 200)
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	80 3a       	cpi	r24, 0xA0	; 160
    3d40:	91 05       	cpc	r25, r1
    3d42:	58 f0       	brcs	.+22     	; 0x3d5a <distanceIncrement+0xb8>
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	89 3c       	cpi	r24, 0xC9	; 201
    3d4a:	91 05       	cpc	r25, r1
    3d4c:	30 f4       	brcc	.+12     	; 0x3d5a <distanceIncrement+0xb8>
        {
            Dist_inc = 5;
    3d4e:	85 e0       	ldi	r24, 0x05	; 5
    3d50:	80 93 14 02 	sts	0x0214, r24
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <distanceIncrement+0xb8>
        }
    }
    else
    {
        Dist_inc =0;
    3d56:	10 92 14 02 	sts	0x0214, r1
    }
}
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	cf 91       	pop	r28
    3d60:	df 91       	pop	r29
    3d62:	08 95       	ret

00003d64 <distanceDisp>:

void distanceDisp(void)
{
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    if(screen_u8Page == 4)
    3d6c:	80 91 ea 01 	lds	r24, 0x01EA
    3d70:	84 30       	cpi	r24, 0x04	; 4
    3d72:	b9 f4       	brne	.+46     	; 0x3da2 <distanceDisp+0x3e>
    {
        H_Lcd_Void_LCDGoTo(2,1);
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	61 e0       	ldi	r22, 0x01	; 1
    3d78:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("Distance=");
    3d7c:	8f e9       	ldi	r24, 0x9F	; 159
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDGoTo(2,10);
    3d84:	82 e0       	ldi	r24, 0x02	; 2
    3d86:	6a e0       	ldi	r22, 0x0A	; 10
    3d88:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteNumber(dist);
    3d8c:	80 91 12 02 	lds	r24, 0x0212
    3d90:	90 91 13 02 	lds	r25, 0x0213
    3d94:	cc 01       	movw	r24, r24
    3d96:	a0 e0       	ldi	r26, 0x00	; 0
    3d98:	b0 e0       	ldi	r27, 0x00	; 0
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
    }
}
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <timer_sec>:

void timer_sec(void)
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    if(speedflag)
    3db0:	80 91 10 02 	lds	r24, 0x0210
    3db4:	88 23       	and	r24, r24
    3db6:	19 f0       	breq	.+6      	; 0x3dbe <timer_sec+0x16>
    {
        Relay_voidFlash();
    3db8:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <Relay_voidFlash>
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <timer_sec+0x1a>
    }
    else
    {
        Relay_voidOff();
    3dbe:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <Relay_voidOff>
    }
    dist +=Dist_inc;
    3dc2:	80 91 14 02 	lds	r24, 0x0214
    3dc6:	28 2f       	mov	r18, r24
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	80 91 12 02 	lds	r24, 0x0212
    3dce:	90 91 13 02 	lds	r25, 0x0213
    3dd2:	82 0f       	add	r24, r18
    3dd4:	93 1f       	adc	r25, r19
    3dd6:	90 93 13 02 	sts	0x0213, r25
    3dda:	80 93 12 02 	sts	0x0212, r24
    /*for dm*/
    change_u8Flag++;
    3dde:	80 91 11 02 	lds	r24, 0x0211
    3de2:	8f 5f       	subi	r24, 0xFF	; 255
    3de4:	80 93 11 02 	sts	0x0211, r24
    DM();
    3de8:	0e 94 b4 23 	call	0x4768	; 0x4768 <DM>
    /*time update*/
    Update_Time();
    3dec:	0e 94 ca 23 	call	0x4794	; 0x4794 <Update_Time>
}
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <LCD_pageFlip>:

void LCD_pageFlip(void)
{
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    static u8 flag = 1;/*for initial state of proj*/
    if(H_KeyPad_U8_KeyPadRead(3)== 'R')
    3dfe:	83 e0       	ldi	r24, 0x03	; 3
    3e00:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3e04:	82 35       	cpi	r24, 0x52	; 82
    3e06:	a9 f4       	brne	.+42     	; 0x3e32 <LCD_pageFlip+0x3c>
    {
        if(screen_u8Page == 4)
    3e08:	80 91 ea 01 	lds	r24, 0x01EA
    3e0c:	84 30       	cpi	r24, 0x04	; 4
    3e0e:	21 f4       	brne	.+8      	; 0x3e18 <LCD_pageFlip+0x22>
        {screen_u8Page =1;}
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	80 93 ea 01 	sts	0x01EA, r24
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <LCD_pageFlip+0x2c>
        else
        {screen_u8Page++;}
    3e18:	80 91 ea 01 	lds	r24, 0x01EA
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	80 93 ea 01 	sts	0x01EA, r24
        flag= 1;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	80 93 ed 01 	sts	0x01ED, r24
        while(H_KeyPad_U8_KeyPadRead(3)== 'R');
    3e28:	83 e0       	ldi	r24, 0x03	; 3
    3e2a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3e2e:	82 35       	cpi	r24, 0x52	; 82
    3e30:	d9 f3       	breq	.-10     	; 0x3e28 <LCD_pageFlip+0x32>
    }
    if(H_KeyPad_U8_KeyPadRead(3)== 'L')
    3e32:	83 e0       	ldi	r24, 0x03	; 3
    3e34:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3e38:	8c 34       	cpi	r24, 0x4C	; 76
    3e3a:	a9 f4       	brne	.+42     	; 0x3e66 <LCD_pageFlip+0x70>
    {
        if(screen_u8Page == 1)
    3e3c:	80 91 ea 01 	lds	r24, 0x01EA
    3e40:	81 30       	cpi	r24, 0x01	; 1
    3e42:	21 f4       	brne	.+8      	; 0x3e4c <LCD_pageFlip+0x56>
        {screen_u8Page = 4;}
    3e44:	84 e0       	ldi	r24, 0x04	; 4
    3e46:	80 93 ea 01 	sts	0x01EA, r24
    3e4a:	05 c0       	rjmp	.+10     	; 0x3e56 <LCD_pageFlip+0x60>
        else
        {screen_u8Page--;}
    3e4c:	80 91 ea 01 	lds	r24, 0x01EA
    3e50:	81 50       	subi	r24, 0x01	; 1
    3e52:	80 93 ea 01 	sts	0x01EA, r24
        flag =1;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	80 93 ed 01 	sts	0x01ED, r24
        while(H_KeyPad_U8_KeyPadRead(3)== 'L');
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3e62:	8c 34       	cpi	r24, 0x4C	; 76
    3e64:	d9 f3       	breq	.-10     	; 0x3e5c <LCD_pageFlip+0x66>
    }
    if(flag == 1)
    3e66:	80 91 ed 01 	lds	r24, 0x01ED
    3e6a:	81 30       	cpi	r24, 0x01	; 1
    3e6c:	01 f5       	brne	.+64     	; 0x3eae <LCD_pageFlip+0xb8>
    {
        H_Lcd_Void_LCDGoTo(1,0);
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("*                  *"); 
    3e76:	85 e7       	ldi	r24, 0x75	; 117
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDGoTo(2,0);
    3e7e:	82 e0       	ldi	r24, 0x02	; 2
    3e80:	60 e0       	ldi	r22, 0x00	; 0
    3e82:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("*                  *"); 
    3e86:	85 e7       	ldi	r24, 0x75	; 117
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        /*in gear function*/
        H_Lcd_Void_LCDGoTo(3,8);
    3e8e:	83 e0       	ldi	r24, 0x03	; 3
    3e90:	68 e0       	ldi	r22, 0x08	; 8
    3e92:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteNumber(screen_u8Page);
    3e96:	80 91 ea 01 	lds	r24, 0x01EA
    3e9a:	88 2f       	mov	r24, r24
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	a0 e0       	ldi	r26, 0x00	; 0
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	bc 01       	movw	r22, r24
    3ea4:	cd 01       	movw	r24, r26
    3ea6:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
        flag =0;
    3eaa:	10 92 ed 01 	sts	0x01ED, r1
    }
}
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <BAS>:

void BAS(void)
{
    3eb4:	df 93       	push	r29
    3eb6:	cf 93       	push	r28
    3eb8:	0f 92       	push	r0
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    if(H_KeyPad_U8_KeyPadRead(0)== 'S')
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3ec4:	83 35       	cpi	r24, 0x53	; 83
    3ec6:	f9 f4       	brne	.+62     	; 0x3f06 <BAS+0x52>
    {
        if(gearState == 'D')
    3ec8:	80 91 e8 01 	lds	r24, 0x01E8
    3ecc:	84 34       	cpi	r24, 0x44	; 68
    3ece:	99 f4       	brne	.+38     	; 0x3ef6 <BAS+0x42>
        {
            BASState= !BASState;
    3ed0:	80 91 0c 02 	lds	r24, 0x020C
    3ed4:	19 82       	std	Y+1, r1	; 0x01
    3ed6:	88 23       	and	r24, r24
    3ed8:	11 f4       	brne	.+4      	; 0x3ede <BAS+0x2a>
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	80 93 0c 02 	sts	0x020C, r24
            while (H_KeyPad_U8_KeyPadRead(0)=='S');
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3eea:	83 35       	cpi	r24, 0x53	; 83
    3eec:	d9 f3       	breq	.-10     	; 0x3ee4 <BAS+0x30>
    3eee:	0b c0       	rjmp	.+22     	; 0x3f06 <BAS+0x52>
        }
        else
        {
            while (H_KeyPad_U8_KeyPadRead(0)=='S')
            {
                H_LED_Void_LedOn(LED_YEL);
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
            while (H_KeyPad_U8_KeyPadRead(0)=='S');

        }
        else
        {
            while (H_KeyPad_U8_KeyPadRead(0)=='S')
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3efc:	83 35       	cpi	r24, 0x53	; 83
    3efe:	c1 f3       	breq	.-16     	; 0x3ef0 <BAS+0x3c>
            {
                H_LED_Void_LedOn(LED_YEL);
            }
            H_LED_Void_LedOff(LED_YEL);
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>
        }
    }
    if(gearState != 'D')
    3f06:	80 91 e8 01 	lds	r24, 0x01E8
    3f0a:	84 34       	cpi	r24, 0x44	; 68
    3f0c:	11 f0       	breq	.+4      	; 0x3f12 <BAS+0x5e>
    {

        BASState=0;
    3f0e:	10 92 0c 02 	sts	0x020C, r1
    }
  
    if((screen_u8Page == 3))
    3f12:	80 91 ea 01 	lds	r24, 0x01EA
    3f16:	83 30       	cpi	r24, 0x03	; 3
    3f18:	c9 f4       	brne	.+50     	; 0x3f4c <BAS+0x98>
    {
        H_Lcd_Void_LCDGoTo(2,5);
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	65 e0       	ldi	r22, 0x05	; 5
    3f1e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("BAS:");
    3f22:	89 ea       	ldi	r24, 0xA9	; 169
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDGoTo(2,11);
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	6b e0       	ldi	r22, 0x0B	; 11
    3f2e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        if(BASState==1)
    3f32:	80 91 0c 02 	lds	r24, 0x020C
    3f36:	81 30       	cpi	r24, 0x01	; 1
    3f38:	29 f4       	brne	.+10     	; 0x3f44 <BAS+0x90>
        {H_Lcd_Void_LCDWriteString("ON ");}
    3f3a:	8e ea       	ldi	r24, 0xAE	; 174
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    3f42:	04 c0       	rjmp	.+8      	; 0x3f4c <BAS+0x98>
        else 
        {H_Lcd_Void_LCDWriteString("OFF");}
    3f44:	82 eb       	ldi	r24, 0xB2	; 178
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>

    }
}
    3f4c:	0f 90       	pop	r0
    3f4e:	cf 91       	pop	r28
    3f50:	df 91       	pop	r29
    3f52:	08 95       	ret

00003f54 <Brake_Padel>:

void Brake_Padel(void)
{
    3f54:	df 93       	push	r29
    3f56:	cf 93       	push	r28
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
    /*if((H_PushButton_U8_PushButtonRead(BRAKE)==PUSH_BUTTON_PRESSED)||(DangerFlag.AllFlags > 2))*/
    if(H_KeyPad_U8_KeyPadRead(0)== 'B')
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    3f62:	82 34       	cpi	r24, 0x42	; 66
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <Brake_Padel+0x1a>
    {
        H_LED_Void_LedOn(LED_RED);
    3f66:	84 e0       	ldi	r24, 0x04	; 4
    3f68:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
    3f6c:	03 c0       	rjmp	.+6      	; 0x3f74 <Brake_Padel+0x20>
    }
    else
    {
        H_LED_Void_LedOff(LED_RED);
    3f6e:	84 e0       	ldi	r24, 0x04	; 4
    3f70:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>
    }
}
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	08 95       	ret

00003f7a <CCS_operating>:

void CCS_operating(void)
{
    3f7a:	df 93       	push	r29
    3f7c:	cf 93       	push	r28
    3f7e:	00 d0       	rcall	.+0      	; 0x3f80 <CCS_operating+0x6>
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    u8 flag=1;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	8a 83       	std	Y+2, r24	; 0x02
    if(CCS_u8State==1)
    3f88:	80 91 0d 02 	lds	r24, 0x020D
    3f8c:	81 30       	cpi	r24, 0x01	; 1
    3f8e:	f1 f4       	brne	.+60     	; 0x3fcc <CCS_operating+0x52>
    {
        u8 local_u8Speed=0;
    3f90:	19 82       	std	Y+1, r1	; 0x01
        local_u8Speed=ADC_u16Mapping_mm();
    3f92:	0e 94 3b 23 	call	0x4676	; 0x4676 <ADC_u16Mapping_mm>
    3f96:	89 83       	std	Y+1, r24	; 0x01
        if((local_u8Speed > (speed_u8Capture + SPEED_TOLERANCE)) ||(local_u8Speed < (speed_u8Capture - SPEED_TOLERANCE)) )
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	28 2f       	mov	r18, r24
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	80 91 0e 02 	lds	r24, 0x020E
    3fa2:	88 2f       	mov	r24, r24
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	0a 96       	adiw	r24, 0x0a	; 10
    3fa8:	82 17       	cp	r24, r18
    3faa:	93 07       	cpc	r25, r19
    3fac:	5c f0       	brlt	.+22     	; 0x3fc4 <CCS_operating+0x4a>
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	28 2f       	mov	r18, r24
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	80 91 0e 02 	lds	r24, 0x020E
    3fb8:	88 2f       	mov	r24, r24
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0a 97       	sbiw	r24, 0x0a	; 10
    3fbe:	28 17       	cp	r18, r24
    3fc0:	39 07       	cpc	r19, r25
    3fc2:	24 f4       	brge	.+8      	; 0x3fcc <CCS_operating+0x52>
        {
            CCS_u8State=0;
    3fc4:	10 92 0d 02 	sts	0x020D, r1
            flag =1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	8a 83       	std	Y+2, r24	; 0x02
        }
    }
    if(screen_u8Page==2)
    3fcc:	80 91 ea 01 	lds	r24, 0x01EA
    3fd0:	82 30       	cpi	r24, 0x02	; 2
    3fd2:	e9 f4       	brne	.+58     	; 0x400e <CCS_operating+0x94>
    {
        if(flag)
    3fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd6:	88 23       	and	r24, r24
    3fd8:	d1 f0       	breq	.+52     	; 0x400e <CCS_operating+0x94>
        {
            flag=0;
    3fda:	1a 82       	std	Y+2, r1	; 0x02
            H_Lcd_Void_LCDGoTo(2,4);
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	64 e0       	ldi	r22, 0x04	; 4
    3fe0:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteString("CCS : ");
    3fe4:	86 eb       	ldi	r24, 0xB6	; 182
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
            H_Lcd_Void_LCDGoTo(2,11);
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	6b e0       	ldi	r22, 0x0B	; 11
    3ff0:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            if(CCS_u8State)
    3ff4:	80 91 0d 02 	lds	r24, 0x020D
    3ff8:	88 23       	and	r24, r24
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <CCS_operating+0x8c>
            {H_Lcd_Void_LCDWriteString("ON ");}
    3ffc:	8e ea       	ldi	r24, 0xAE	; 174
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    4004:	04 c0       	rjmp	.+8      	; 0x400e <CCS_operating+0x94>
            else
            {H_Lcd_Void_LCDWriteString("OFF");}
    4006:	82 eb       	ldi	r24, 0xB2	; 178
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
            
        }
    }
    
}
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	cf 91       	pop	r28
    4014:	df 91       	pop	r29
    4016:	08 95       	ret

00004018 <CCS_States>:

void CCS_States(void)
{
    4018:	df 93       	push	r29
    401a:	cf 93       	push	r28
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	2f 97       	sbiw	r28, 0x0f	; 15
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	f8 94       	cli
    4026:	de bf       	out	0x3e, r29	; 62
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	cd bf       	out	0x3d, r28	; 61
    u8 flag =1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	8f 87       	std	Y+15, r24	; 0x0f
    if(H_KeyPad_U8_KeyPadRead(1)=='O')
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    4036:	8f 34       	cpi	r24, 0x4F	; 79
    4038:	09 f0       	breq	.+2      	; 0x403c <CCS_States+0x24>
    403a:	9b c0       	rjmp	.+310    	; 0x4172 <CCS_States+0x15a>
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	a0 e2       	ldi	r26, 0x20	; 32
    4042:	b1 e4       	ldi	r27, 0x41	; 65
    4044:	8b 87       	std	Y+11, r24	; 0x0b
    4046:	9c 87       	std	Y+12, r25	; 0x0c
    4048:	ad 87       	std	Y+13, r26	; 0x0d
    404a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404c:	6b 85       	ldd	r22, Y+11	; 0x0b
    404e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4050:	8d 85       	ldd	r24, Y+13	; 0x0d
    4052:	9e 85       	ldd	r25, Y+14	; 0x0e
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	4a e7       	ldi	r20, 0x7A	; 122
    405a:	55 e4       	ldi	r21, 0x45	; 69
    405c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	8f 83       	std	Y+7, r24	; 0x07
    4066:	98 87       	std	Y+8, r25	; 0x08
    4068:	a9 87       	std	Y+9, r26	; 0x09
    406a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    406c:	6f 81       	ldd	r22, Y+7	; 0x07
    406e:	78 85       	ldd	r23, Y+8	; 0x08
    4070:	89 85       	ldd	r24, Y+9	; 0x09
    4072:	9a 85       	ldd	r25, Y+10	; 0x0a
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e8       	ldi	r20, 0x80	; 128
    407a:	5f e3       	ldi	r21, 0x3F	; 63
    407c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4080:	88 23       	and	r24, r24
    4082:	2c f4       	brge	.+10     	; 0x408e <CCS_States+0x76>
		__ticks = 1;
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	9e 83       	std	Y+6, r25	; 0x06
    408a:	8d 83       	std	Y+5, r24	; 0x05
    408c:	3f c0       	rjmp	.+126    	; 0x410c <CCS_States+0xf4>
	else if (__tmp > 65535)
    408e:	6f 81       	ldd	r22, Y+7	; 0x07
    4090:	78 85       	ldd	r23, Y+8	; 0x08
    4092:	89 85       	ldd	r24, Y+9	; 0x09
    4094:	9a 85       	ldd	r25, Y+10	; 0x0a
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	3f ef       	ldi	r19, 0xFF	; 255
    409a:	4f e7       	ldi	r20, 0x7F	; 127
    409c:	57 e4       	ldi	r21, 0x47	; 71
    409e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a2:	18 16       	cp	r1, r24
    40a4:	4c f5       	brge	.+82     	; 0x40f8 <CCS_States+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	40 e2       	ldi	r20, 0x20	; 32
    40b4:	51 e4       	ldi	r21, 0x41	; 65
    40b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	bc 01       	movw	r22, r24
    40c0:	cd 01       	movw	r24, r26
    40c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	9e 83       	std	Y+6, r25	; 0x06
    40cc:	8d 83       	std	Y+5, r24	; 0x05
    40ce:	0f c0       	rjmp	.+30     	; 0x40ee <CCS_States+0xd6>
    40d0:	80 e9       	ldi	r24, 0x90	; 144
    40d2:	91 e0       	ldi	r25, 0x01	; 1
    40d4:	9c 83       	std	Y+4, r25	; 0x04
    40d6:	8b 83       	std	Y+3, r24	; 0x03
    40d8:	8b 81       	ldd	r24, Y+3	; 0x03
    40da:	9c 81       	ldd	r25, Y+4	; 0x04
    40dc:	01 97       	sbiw	r24, 0x01	; 1
    40de:	f1 f7       	brne	.-4      	; 0x40dc <CCS_States+0xc4>
    40e0:	9c 83       	std	Y+4, r25	; 0x04
    40e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e4:	8d 81       	ldd	r24, Y+5	; 0x05
    40e6:	9e 81       	ldd	r25, Y+6	; 0x06
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	9e 83       	std	Y+6, r25	; 0x06
    40ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ee:	8d 81       	ldd	r24, Y+5	; 0x05
    40f0:	9e 81       	ldd	r25, Y+6	; 0x06
    40f2:	00 97       	sbiw	r24, 0x00	; 0
    40f4:	69 f7       	brne	.-38     	; 0x40d0 <CCS_States+0xb8>
    40f6:	14 c0       	rjmp	.+40     	; 0x4120 <CCS_States+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f8:	6f 81       	ldd	r22, Y+7	; 0x07
    40fa:	78 85       	ldd	r23, Y+8	; 0x08
    40fc:	89 85       	ldd	r24, Y+9	; 0x09
    40fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	9e 83       	std	Y+6, r25	; 0x06
    410a:	8d 83       	std	Y+5, r24	; 0x05
    410c:	8d 81       	ldd	r24, Y+5	; 0x05
    410e:	9e 81       	ldd	r25, Y+6	; 0x06
    4110:	9a 83       	std	Y+2, r25	; 0x02
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	9a 81       	ldd	r25, Y+2	; 0x02
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <CCS_States+0x100>
    411c:	9a 83       	std	Y+2, r25	; 0x02
    411e:	89 83       	std	Y+1, r24	; 0x01
    {
        
        _delay_ms(10);
        H_Buzzer_Void_BuzzerOnce();
    4120:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <H_Buzzer_Void_BuzzerOnce>
        /*change the CCS state if the state of GB is : D */
        if(gearState==gear_ArrState[1])
    4124:	90 91 e6 01 	lds	r25, 0x01E6
    4128:	80 91 e8 01 	lds	r24, 0x01E8
    412c:	98 17       	cp	r25, r24
    412e:	c9 f4       	brne	.+50     	; 0x4162 <CCS_States+0x14a>
        {
            /*tog the state*/
            CCS_u8State ^= 1;
    4130:	90 91 0d 02 	lds	r25, 0x020D
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	89 27       	eor	r24, r25
    4138:	80 93 0d 02 	sts	0x020D, r24
            if(CCS_u8State==1)
    413c:	80 91 0d 02 	lds	r24, 0x020D
    4140:	81 30       	cpi	r24, 0x01	; 1
    4142:	31 f4       	brne	.+12     	; 0x4150 <CCS_States+0x138>
            {       
                speed_u8Capture = ADC_u16Mapping_mm();
    4144:	0e 94 3b 23 	call	0x4676	; 0x4676 <ADC_u16Mapping_mm>
    4148:	80 93 0e 02 	sts	0x020E, r24
                flag =1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	8f 87       	std	Y+15, r24	; 0x0f
            }
            /*freez the state untill the user release the button */
            while (H_KeyPad_U8_KeyPadRead(1)=='O');   
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    4156:	8f 34       	cpi	r24, 0x4F	; 79
    4158:	d9 f3       	breq	.-10     	; 0x4150 <CCS_States+0x138>
    415a:	0b c0       	rjmp	.+22     	; 0x4172 <CCS_States+0x15a>
        else
        {
            /*if the CCS button pressed and the GB state not D : produce alarm */
            while (H_KeyPad_U8_KeyPadRead(1)=='O')
                {
                    H_LED_Void_LedOn(LED_YEL);
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
            while (H_KeyPad_U8_KeyPadRead(1)=='O');   
        }
        else
        {
            /*if the CCS button pressed and the GB state not D : produce alarm */
            while (H_KeyPad_U8_KeyPadRead(1)=='O')
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    4168:	8f 34       	cpi	r24, 0x4F	; 79
    416a:	c1 f3       	breq	.-16     	; 0x415c <CCS_States+0x144>
                {
                    H_LED_Void_LedOn(LED_YEL);
                }
                H_LED_Void_LedOff(LED_YEL);
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>
        }
    }
    if(screen_u8Page==2)
    4172:	80 91 ea 01 	lds	r24, 0x01EA
    4176:	82 30       	cpi	r24, 0x02	; 2
    4178:	e9 f4       	brne	.+58     	; 0x41b4 <CCS_States+0x19c>
    {
        if(flag)
    417a:	8f 85       	ldd	r24, Y+15	; 0x0f
    417c:	88 23       	and	r24, r24
    417e:	d1 f0       	breq	.+52     	; 0x41b4 <CCS_States+0x19c>
        {
            flag=0;
    4180:	1f 86       	std	Y+15, r1	; 0x0f
            H_Lcd_Void_LCDGoTo(2,4);
    4182:	82 e0       	ldi	r24, 0x02	; 2
    4184:	64 e0       	ldi	r22, 0x04	; 4
    4186:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteString("CCS : ");
    418a:	86 eb       	ldi	r24, 0xB6	; 182
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
            H_Lcd_Void_LCDGoTo(2,11);
    4192:	82 e0       	ldi	r24, 0x02	; 2
    4194:	6b e0       	ldi	r22, 0x0B	; 11
    4196:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            if(CCS_u8State)
    419a:	80 91 0d 02 	lds	r24, 0x020D
    419e:	88 23       	and	r24, r24
    41a0:	29 f0       	breq	.+10     	; 0x41ac <CCS_States+0x194>
            {H_Lcd_Void_LCDWriteString("ON ");}
    41a2:	8e ea       	ldi	r24, 0xAE	; 174
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    41aa:	04 c0       	rjmp	.+8      	; 0x41b4 <CCS_States+0x19c>
            else
            {H_Lcd_Void_LCDWriteString("OFF");}
    41ac:	82 eb       	ldi	r24, 0xB2	; 178
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
            
        }
    }

}
    41b4:	2f 96       	adiw	r28, 0x0f	; 15
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	cd bf       	out	0x3d, r28	; 61
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	08 95       	ret

000041c6 <GB_Shift>:

#if(!GB_WITHOUT_INT)

void GB_Shift(void)
    {
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <GB_Shift+0x6>
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    static u8 counter = 0;
    u16 local_u16CNT =0;
    41d0:	1a 82       	std	Y+2, r1	; 0x02
    41d2:	19 82       	std	Y+1, r1	; 0x01
    if(H_KeyPad_U8_KeyPadRead(0)== 'B')
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    41da:	82 34       	cpi	r24, 0x42	; 66
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <GB_Shift+0x1a>
    41de:	40 c0       	rjmp	.+128    	; 0x4260 <GB_Shift+0x9a>
    {
        H_Buzzer_Void_BuzzerOnce();
    41e0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <H_Buzzer_Void_BuzzerOnce>
        /*we have 3 state of iterate through them using counter*/
        if(counter==2)
    41e4:	80 91 16 02 	lds	r24, 0x0216
    41e8:	82 30       	cpi	r24, 0x02	; 2
    41ea:	19 f4       	brne	.+6      	; 0x41f2 <GB_Shift+0x2c>
            {counter=0;}
    41ec:	10 92 16 02 	sts	0x0216, r1
    41f0:	05 c0       	rjmp	.+10     	; 0x41fc <GB_Shift+0x36>
        else
        {counter++;}
    41f2:	80 91 16 02 	lds	r24, 0x0216
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	80 93 16 02 	sts	0x0216, r24
        /*save the gear state in a global var */
        gearState = gear_ArrState[counter];
    41fc:	80 91 16 02 	lds	r24, 0x0216
    4200:	88 2f       	mov	r24, r24
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	fc 01       	movw	r30, r24
    4206:	eb 51       	subi	r30, 0x1B	; 27
    4208:	fe 4f       	sbci	r31, 0xFE	; 254
    420a:	80 81       	ld	r24, Z
    420c:	80 93 e8 01 	sts	0x01E8, r24
        H_Lcd_Void_LCDGoTo(0,11);
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	6b e0       	ldi	r22, 0x0B	; 11
    4214:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteCharacter(gearState);
    4218:	80 91 e8 01 	lds	r24, 0x01E8
    421c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <H_Lcd_Void_LCDWriteCharacter>
        /*if GB state != D turn off the CCS */
        if(gearState != gear_ArrState[1])
    4220:	90 91 e6 01 	lds	r25, 0x01E6
    4224:	80 91 e8 01 	lds	r24, 0x01E8
    4228:	98 17       	cp	r25, r24
    422a:	59 f0       	breq	.+22     	; 0x4242 <GB_Shift+0x7c>
        {
            CCS_u8State=0;
    422c:	10 92 0d 02 	sts	0x020D, r1
    4230:	08 c0       	rjmp	.+16     	; 0x4242 <GB_Shift+0x7c>
        }
        while ((H_KeyPad_U8_KeyPadRead(0)== 'B')&&local_u16CNT <3000)
        {local_u16CNT++;H_LED_Void_LedOn(LED_RED);}
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	01 96       	adiw	r24, 0x01	; 1
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	84 e0       	ldi	r24, 0x04	; 4
    423e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
        /*if GB state != D turn off the CCS */
        if(gearState != gear_ArrState[1])
        {
            CCS_u8State=0;
        }
        while ((H_KeyPad_U8_KeyPadRead(0)== 'B')&&local_u16CNT <3000)
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    4248:	82 34       	cpi	r24, 0x42	; 66
    424a:	91 f4       	brne	.+36     	; 0x4270 <GB_Shift+0xaa>
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	2b e0       	ldi	r18, 0x0B	; 11
    4252:	88 3b       	cpi	r24, 0xB8	; 184
    4254:	92 07       	cpc	r25, r18
    4256:	68 f3       	brcs	.-38     	; 0x4232 <GB_Shift+0x6c>
    4258:	0b c0       	rjmp	.+22     	; 0x4270 <GB_Shift+0xaa>
    }
    else 
    {
        while (H_KeyPad_U8_KeyPadRead(0)== 'I')
        {
            H_LED_Void_LedOn(LED_YEL);
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>

            
    }
    else 
    {
        while (H_KeyPad_U8_KeyPadRead(0)== 'I')
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    4266:	89 34       	cpi	r24, 0x49	; 73
    4268:	c1 f3       	breq	.-16     	; 0x425a <GB_Shift+0x94>
        {
            H_LED_Void_LedOn(LED_YEL);
        }
        H_LED_Void_LedOff(LED_YEL);
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>

    }       
}
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	08 95       	ret

0000427a <speed_limiter>:
    
}
#endif

void speed_limiter(void)
{
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	a0 97       	sbiw	r28, 0x20	; 32
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
    u8 flag=1;
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	8f 8f       	std	Y+31, r24	; 0x1f
    u16 speed = ADC_u16Mapping_mm();
    4292:	0e 94 3b 23 	call	0x4676	; 0x4676 <ADC_u16Mapping_mm>
    4296:	9e 8f       	std	Y+30, r25	; 0x1e
    4298:	8d 8f       	std	Y+29, r24	; 0x1d
    /*system on off*/
    if(H_KeyPad_U8_KeyPadRead(2) == 'P')
    429a:	82 e0       	ldi	r24, 0x02	; 2
    429c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    42a0:	80 35       	cpi	r24, 0x50	; 80
    42a2:	f9 f4       	brne	.+62     	; 0x42e2 <speed_limiter+0x68>
    {
        if(gearState == 'D')
    42a4:	80 91 e8 01 	lds	r24, 0x01E8
    42a8:	84 34       	cpi	r24, 0x44	; 68
    42aa:	99 f4       	brne	.+38     	; 0x42d2 <speed_limiter+0x58>
        {
            speedLimiter_Status = !speedLimiter_Status; // Activate speed limiter
    42ac:	80 91 0f 02 	lds	r24, 0x020F
    42b0:	18 a2       	std	Y+32, r1	; 0x20
    42b2:	88 23       	and	r24, r24
    42b4:	11 f4       	brne	.+4      	; 0x42ba <speed_limiter+0x40>
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	88 a3       	std	Y+32, r24	; 0x20
    42ba:	88 a1       	ldd	r24, Y+32	; 0x20
    42bc:	80 93 0f 02 	sts	0x020F, r24
            while(H_KeyPad_U8_KeyPadRead(2) == 'P');
    42c0:	82 e0       	ldi	r24, 0x02	; 2
    42c2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    42c6:	80 35       	cpi	r24, 0x50	; 80
    42c8:	d9 f3       	breq	.-10     	; 0x42c0 <speed_limiter+0x46>
    42ca:	0b c0       	rjmp	.+22     	; 0x42e2 <speed_limiter+0x68>
        }
        else
        {
            while (H_KeyPad_U8_KeyPadRead(2)=='P')
            {
                H_LED_Void_LedOn(LED_YEL);
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
            speedLimiter_Status = !speedLimiter_Status; // Activate speed limiter
            while(H_KeyPad_U8_KeyPadRead(2) == 'P');
        }
        else
        {
            while (H_KeyPad_U8_KeyPadRead(2)=='P')
    42d2:	82 e0       	ldi	r24, 0x02	; 2
    42d4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    42d8:	80 35       	cpi	r24, 0x50	; 80
    42da:	c1 f3       	breq	.-16     	; 0x42cc <speed_limiter+0x52>
            {
                H_LED_Void_LedOn(LED_YEL);
            }
            H_LED_Void_LedOff(LED_YEL);
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>
        }
        
    }
    /*up the speed limiter*/
    if(H_KeyPad_U8_KeyPadRead(2) == 'U')
    42e2:	82 e0       	ldi	r24, 0x02	; 2
    42e4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    42e8:	85 35       	cpi	r24, 0x55	; 85
    42ea:	09 f0       	breq	.+2      	; 0x42ee <speed_limiter+0x74>
    42ec:	7e c0       	rjmp	.+252    	; 0x43ea <speed_limiter+0x170>
    {
        if(speedlimit <200)
    42ee:	80 91 e9 01 	lds	r24, 0x01E9
    42f2:	88 3c       	cpi	r24, 0xC8	; 200
    42f4:	08 f0       	brcs	.+2      	; 0x42f8 <speed_limiter+0x7e>
    42f6:	79 c0       	rjmp	.+242    	; 0x43ea <speed_limiter+0x170>
        {
            speedlimit += 5;
    42f8:	80 91 e9 01 	lds	r24, 0x01E9
    42fc:	8b 5f       	subi	r24, 0xFB	; 251
    42fe:	80 93 e9 01 	sts	0x01E9, r24
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	a0 e2       	ldi	r26, 0x20	; 32
    4308:	b1 e4       	ldi	r27, 0x41	; 65
    430a:	89 8f       	std	Y+25, r24	; 0x19
    430c:	9a 8f       	std	Y+26, r25	; 0x1a
    430e:	ab 8f       	std	Y+27, r26	; 0x1b
    4310:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4312:	69 8d       	ldd	r22, Y+25	; 0x19
    4314:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4a e7       	ldi	r20, 0x7A	; 122
    4320:	55 e4       	ldi	r21, 0x45	; 69
    4322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8d 8b       	std	Y+21, r24	; 0x15
    432c:	9e 8b       	std	Y+22, r25	; 0x16
    432e:	af 8b       	std	Y+23, r26	; 0x17
    4330:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4332:	6d 89       	ldd	r22, Y+21	; 0x15
    4334:	7e 89       	ldd	r23, Y+22	; 0x16
    4336:	8f 89       	ldd	r24, Y+23	; 0x17
    4338:	98 8d       	ldd	r25, Y+24	; 0x18
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4346:	88 23       	and	r24, r24
    4348:	2c f4       	brge	.+10     	; 0x4354 <speed_limiter+0xda>
		__ticks = 1;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9c 8b       	std	Y+20, r25	; 0x14
    4350:	8b 8b       	std	Y+19, r24	; 0x13
    4352:	3f c0       	rjmp	.+126    	; 0x43d2 <speed_limiter+0x158>
	else if (__tmp > 65535)
    4354:	6d 89       	ldd	r22, Y+21	; 0x15
    4356:	7e 89       	ldd	r23, Y+22	; 0x16
    4358:	8f 89       	ldd	r24, Y+23	; 0x17
    435a:	98 8d       	ldd	r25, Y+24	; 0x18
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	3f ef       	ldi	r19, 0xFF	; 255
    4360:	4f e7       	ldi	r20, 0x7F	; 127
    4362:	57 e4       	ldi	r21, 0x47	; 71
    4364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4368:	18 16       	cp	r1, r24
    436a:	4c f5       	brge	.+82     	; 0x43be <speed_limiter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436c:	69 8d       	ldd	r22, Y+25	; 0x19
    436e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9c 8b       	std	Y+20, r25	; 0x14
    4392:	8b 8b       	std	Y+19, r24	; 0x13
    4394:	0f c0       	rjmp	.+30     	; 0x43b4 <speed_limiter+0x13a>
    4396:	80 e9       	ldi	r24, 0x90	; 144
    4398:	91 e0       	ldi	r25, 0x01	; 1
    439a:	9a 8b       	std	Y+18, r25	; 0x12
    439c:	89 8b       	std	Y+17, r24	; 0x11
    439e:	89 89       	ldd	r24, Y+17	; 0x11
    43a0:	9a 89       	ldd	r25, Y+18	; 0x12
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <speed_limiter+0x128>
    43a6:	9a 8b       	std	Y+18, r25	; 0x12
    43a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43aa:	8b 89       	ldd	r24, Y+19	; 0x13
    43ac:	9c 89       	ldd	r25, Y+20	; 0x14
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	9c 8b       	std	Y+20, r25	; 0x14
    43b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b4:	8b 89       	ldd	r24, Y+19	; 0x13
    43b6:	9c 89       	ldd	r25, Y+20	; 0x14
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	69 f7       	brne	.-38     	; 0x4396 <speed_limiter+0x11c>
    43bc:	14 c0       	rjmp	.+40     	; 0x43e6 <speed_limiter+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43be:	6d 89       	ldd	r22, Y+21	; 0x15
    43c0:	7e 89       	ldd	r23, Y+22	; 0x16
    43c2:	8f 89       	ldd	r24, Y+23	; 0x17
    43c4:	98 8d       	ldd	r25, Y+24	; 0x18
    43c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	9c 8b       	std	Y+20, r25	; 0x14
    43d0:	8b 8b       	std	Y+19, r24	; 0x13
    43d2:	8b 89       	ldd	r24, Y+19	; 0x13
    43d4:	9c 89       	ldd	r25, Y+20	; 0x14
    43d6:	98 8b       	std	Y+16, r25	; 0x10
    43d8:	8f 87       	std	Y+15, r24	; 0x0f
    43da:	8f 85       	ldd	r24, Y+15	; 0x0f
    43dc:	98 89       	ldd	r25, Y+16	; 0x10
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	f1 f7       	brne	.-4      	; 0x43de <speed_limiter+0x164>
    43e2:	98 8b       	std	Y+16, r25	; 0x10
    43e4:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
            flag=1;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	8f 8f       	std	Y+31, r24	; 0x1f
        }
    }
    /*down the speed limiter*/
    if(H_KeyPad_U8_KeyPadRead(2) == 'D'){
    43ea:	82 e0       	ldi	r24, 0x02	; 2
    43ec:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <H_KeyPad_U8_KeyPadRead>
    43f0:	84 34       	cpi	r24, 0x44	; 68
    43f2:	09 f0       	breq	.+2      	; 0x43f6 <speed_limiter+0x17c>
    43f4:	7e c0       	rjmp	.+252    	; 0x44f2 <speed_limiter+0x278>
        if(speedlimit > 0)
    43f6:	80 91 e9 01 	lds	r24, 0x01E9
    43fa:	88 23       	and	r24, r24
    43fc:	09 f4       	brne	.+2      	; 0x4400 <speed_limiter+0x186>
    43fe:	79 c0       	rjmp	.+242    	; 0x44f2 <speed_limiter+0x278>
        {
            speedlimit -= 5;
    4400:	80 91 e9 01 	lds	r24, 0x01E9
    4404:	85 50       	subi	r24, 0x05	; 5
    4406:	80 93 e9 01 	sts	0x01E9, r24
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a0 e2       	ldi	r26, 0x20	; 32
    4410:	b1 e4       	ldi	r27, 0x41	; 65
    4412:	8b 87       	std	Y+11, r24	; 0x0b
    4414:	9c 87       	std	Y+12, r25	; 0x0c
    4416:	ad 87       	std	Y+13, r26	; 0x0d
    4418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441a:	6b 85       	ldd	r22, Y+11	; 0x0b
    441c:	7c 85       	ldd	r23, Y+12	; 0x0c
    441e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4420:	9e 85       	ldd	r25, Y+14	; 0x0e
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	4a e7       	ldi	r20, 0x7A	; 122
    4428:	55 e4       	ldi	r21, 0x45	; 69
    442a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	8f 83       	std	Y+7, r24	; 0x07
    4434:	98 87       	std	Y+8, r25	; 0x08
    4436:	a9 87       	std	Y+9, r26	; 0x09
    4438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    443a:	6f 81       	ldd	r22, Y+7	; 0x07
    443c:	78 85       	ldd	r23, Y+8	; 0x08
    443e:	89 85       	ldd	r24, Y+9	; 0x09
    4440:	9a 85       	ldd	r25, Y+10	; 0x0a
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e8       	ldi	r20, 0x80	; 128
    4448:	5f e3       	ldi	r21, 0x3F	; 63
    444a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    444e:	88 23       	and	r24, r24
    4450:	2c f4       	brge	.+10     	; 0x445c <speed_limiter+0x1e2>
		__ticks = 1;
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
    445a:	3f c0       	rjmp	.+126    	; 0x44da <speed_limiter+0x260>
	else if (__tmp > 65535)
    445c:	6f 81       	ldd	r22, Y+7	; 0x07
    445e:	78 85       	ldd	r23, Y+8	; 0x08
    4460:	89 85       	ldd	r24, Y+9	; 0x09
    4462:	9a 85       	ldd	r25, Y+10	; 0x0a
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	3f ef       	ldi	r19, 0xFF	; 255
    4468:	4f e7       	ldi	r20, 0x7F	; 127
    446a:	57 e4       	ldi	r21, 0x47	; 71
    446c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4470:	18 16       	cp	r1, r24
    4472:	4c f5       	brge	.+82     	; 0x44c6 <speed_limiter+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4474:	6b 85       	ldd	r22, Y+11	; 0x0b
    4476:	7c 85       	ldd	r23, Y+12	; 0x0c
    4478:	8d 85       	ldd	r24, Y+13	; 0x0d
    447a:	9e 85       	ldd	r25, Y+14	; 0x0e
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e2       	ldi	r20, 0x20	; 32
    4482:	51 e4       	ldi	r21, 0x41	; 65
    4484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	9e 83       	std	Y+6, r25	; 0x06
    449a:	8d 83       	std	Y+5, r24	; 0x05
    449c:	0f c0       	rjmp	.+30     	; 0x44bc <speed_limiter+0x242>
    449e:	80 e9       	ldi	r24, 0x90	; 144
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	9c 83       	std	Y+4, r25	; 0x04
    44a4:	8b 83       	std	Y+3, r24	; 0x03
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	9c 81       	ldd	r25, Y+4	; 0x04
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <speed_limiter+0x230>
    44ae:	9c 83       	std	Y+4, r25	; 0x04
    44b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	9e 83       	std	Y+6, r25	; 0x06
    44ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44bc:	8d 81       	ldd	r24, Y+5	; 0x05
    44be:	9e 81       	ldd	r25, Y+6	; 0x06
    44c0:	00 97       	sbiw	r24, 0x00	; 0
    44c2:	69 f7       	brne	.-38     	; 0x449e <speed_limiter+0x224>
    44c4:	14 c0       	rjmp	.+40     	; 0x44ee <speed_limiter+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c6:	6f 81       	ldd	r22, Y+7	; 0x07
    44c8:	78 85       	ldd	r23, Y+8	; 0x08
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	9e 83       	std	Y+6, r25	; 0x06
    44d8:	8d 83       	std	Y+5, r24	; 0x05
    44da:	8d 81       	ldd	r24, Y+5	; 0x05
    44dc:	9e 81       	ldd	r25, Y+6	; 0x06
    44de:	9a 83       	std	Y+2, r25	; 0x02
    44e0:	89 83       	std	Y+1, r24	; 0x01
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	9a 81       	ldd	r25, Y+2	; 0x02
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <speed_limiter+0x26c>
    44ea:	9a 83       	std	Y+2, r25	; 0x02
    44ec:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(10);
            flag=1;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	8f 8f       	std	Y+31, r24	; 0x1f
        }
    }
    
    if(gearState != 'D')
    44f2:	80 91 e8 01 	lds	r24, 0x01E8
    44f6:	84 34       	cpi	r24, 0x44	; 68
    44f8:	21 f0       	breq	.+8      	; 0x4502 <speed_limiter+0x288>
    {
        speedLimiter_Status=0;
    44fa:	10 92 0f 02 	sts	0x020F, r1
        flag =1;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	8f 8f       	std	Y+31, r24	; 0x1f
    }
    if(speedLimiter_Status == 1){
    4502:	80 91 0f 02 	lds	r24, 0x020F
    4506:	81 30       	cpi	r24, 0x01	; 1
    4508:	81 f4       	brne	.+32     	; 0x452a <speed_limiter+0x2b0>
        
        if (speed >= speedlimit)
    450a:	80 91 e9 01 	lds	r24, 0x01E9
    450e:	28 2f       	mov	r18, r24
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4514:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4516:	82 17       	cp	r24, r18
    4518:	93 07       	cpc	r25, r19
    451a:	20 f0       	brcs	.+8      	; 0x4524 <speed_limiter+0x2aa>
        {
            speedflag = 1;
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	80 93 10 02 	sts	0x0210, r24
    4522:	09 c0       	rjmp	.+18     	; 0x4536 <speed_limiter+0x2bc>
        }
        else
        {
            speedflag =0;
    4524:	10 92 10 02 	sts	0x0210, r1
    4528:	06 c0       	rjmp	.+12     	; 0x4536 <speed_limiter+0x2bc>
        }
    }
    else
    {
        speedflag =0;
    452a:	10 92 10 02 	sts	0x0210, r1
        M_DIO_Void_SetPinValue(RELAY_PIN,0);
    452e:	85 e2       	ldi	r24, 0x25	; 37
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_Void_SetPinValue>
    }
    
    /*display */
    if(screen_u8Page == 1)
    4536:	80 91 ea 01 	lds	r24, 0x01EA
    453a:	81 30       	cpi	r24, 0x01	; 1
    453c:	09 f0       	breq	.+2      	; 0x4540 <speed_limiter+0x2c6>
    453e:	43 c0       	rjmp	.+134    	; 0x45c6 <speed_limiter+0x34c>
    {
        if(flag)
    4540:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4542:	88 23       	and	r24, r24
    4544:	79 f1       	breq	.+94     	; 0x45a4 <speed_limiter+0x32a>
        {
            H_Lcd_Void_LCDGoTo(2,2);
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	62 e0       	ldi	r22, 0x02	; 2
    454a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteString("SPL:");
    454e:	8d eb       	ldi	r24, 0xBD	; 189
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
            if(speedlimit<100)
    4556:	80 91 e9 01 	lds	r24, 0x01E9
    455a:	84 36       	cpi	r24, 0x64	; 100
    455c:	a8 f4       	brcc	.+42     	; 0x4588 <speed_limiter+0x30e>
            {
                
                if(speedlimit< 10)
    455e:	80 91 e9 01 	lds	r24, 0x01E9
    4562:	8a 30       	cpi	r24, 0x0A	; 10
    4564:	48 f4       	brcc	.+18     	; 0x4578 <speed_limiter+0x2fe>
                {
                    H_Lcd_Void_LCDGoTo(2,8);
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	68 e0       	ldi	r22, 0x08	; 8
    456a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
			        H_Lcd_Void_LCDWriteString("  ");
    456e:	82 ec       	ldi	r24, 0xC2	; 194
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    4576:	08 c0       	rjmp	.+16     	; 0x4588 <speed_limiter+0x30e>
                }
                else
                {
                    H_Lcd_Void_LCDGoTo(2,9);
    4578:	82 e0       	ldi	r24, 0x02	; 2
    457a:	69 e0       	ldi	r22, 0x09	; 9
    457c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
                    H_Lcd_Void_LCDWriteString(" ");
    4580:	85 ec       	ldi	r24, 0xC5	; 197
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
                }
                
            }
            H_Lcd_Void_LCDGoTo(2,7);
    4588:	82 e0       	ldi	r24, 0x02	; 2
    458a:	67 e0       	ldi	r22, 0x07	; 7
    458c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteNumber(speedlimit);
    4590:	80 91 e9 01 	lds	r24, 0x01E9
    4594:	88 2f       	mov	r24, r24
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	a0 e0       	ldi	r26, 0x00	; 0
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
             
        }
        H_Lcd_Void_LCDGoTo(2,15);
    45a4:	82 e0       	ldi	r24, 0x02	; 2
    45a6:	6f e0       	ldi	r22, 0x0F	; 15
    45a8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        if(speedLimiter_Status == 1)
    45ac:	80 91 0f 02 	lds	r24, 0x020F
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	29 f4       	brne	.+10     	; 0x45be <speed_limiter+0x344>
        {
            H_Lcd_Void_LCDWriteString("ON ");
    45b4:	8e ea       	ldi	r24, 0xAE	; 174
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    45bc:	04 c0       	rjmp	.+8      	; 0x45c6 <speed_limiter+0x34c>
        }
        else
        {
            H_Lcd_Void_LCDWriteString("OFF");
    45be:	82 eb       	ldi	r24, 0xB2	; 178
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        }
    }
}
    45c6:	a0 96       	adiw	r28, 0x20	; 32
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	cf 91       	pop	r28
    45d4:	df 91       	pop	r29
    45d6:	08 95       	ret

000045d8 <LCD_Write_Speed>:

void LCD_Write_Speed(void)
{
    45d8:	df 93       	push	r29
    45da:	cf 93       	push	r28
    45dc:	00 d0       	rcall	.+0      	; 0x45de <LCD_Write_Speed+0x6>
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
    
    u16 speed = ADC_u16Mapping_mm();
    45e2:	0e 94 3b 23 	call	0x4676	; 0x4676 <ADC_u16Mapping_mm>
    45e6:	9a 83       	std	Y+2, r25	; 0x02
    45e8:	89 83       	std	Y+1, r24	; 0x01
    if(screen_u8Page !=4)
    45ea:	80 91 ea 01 	lds	r24, 0x01EA
    45ee:	84 30       	cpi	r24, 0x04	; 4
    45f0:	e9 f1       	breq	.+122    	; 0x466c <LCD_Write_Speed+0x94>
    {
        H_Lcd_Void_LCDGoTo(1,3);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	63 e0       	ldi	r22, 0x03	; 3
    45f6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("SPEED: ");
    45fa:	87 ec       	ldi	r24, 0xC7	; 199
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        if(gearState == 'D')
    4602:	80 91 e8 01 	lds	r24, 0x01E8
    4606:	84 34       	cpi	r24, 0x44	; 68
    4608:	49 f5       	brne	.+82     	; 0x465c <LCD_Write_Speed+0x84>
        { 
            H_Lcd_Void_LCDGoTo(1,11);
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	6b e0       	ldi	r22, 0x0B	; 11
    460e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteNumber(speed);
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	9a 81       	ldd	r25, Y+2	; 0x02
    4616:	cc 01       	movw	r24, r24
    4618:	a0 e0       	ldi	r26, 0x00	; 0
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	bc 01       	movw	r22, r24
    461e:	cd 01       	movw	r24, r26
    4620:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
            /*to enhance display*/
            if(speed<100)
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	9a 81       	ldd	r25, Y+2	; 0x02
    4628:	84 36       	cpi	r24, 0x64	; 100
    462a:	91 05       	cpc	r25, r1
    462c:	f8 f4       	brcc	.+62     	; 0x466c <LCD_Write_Speed+0x94>
            {
                if(speed< 10)
    462e:	89 81       	ldd	r24, Y+1	; 0x01
    4630:	9a 81       	ldd	r25, Y+2	; 0x02
    4632:	8a 30       	cpi	r24, 0x0A	; 10
    4634:	91 05       	cpc	r25, r1
    4636:	48 f4       	brcc	.+18     	; 0x464a <LCD_Write_Speed+0x72>
                {
                    H_Lcd_Void_LCDGoTo(1,12);
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	6c e0       	ldi	r22, 0x0C	; 12
    463c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
                    H_Lcd_Void_LCDWriteString("  ");
    4640:	82 ec       	ldi	r24, 0xC2	; 194
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    4648:	11 c0       	rjmp	.+34     	; 0x466c <LCD_Write_Speed+0x94>
                }
                else
                {
                    H_Lcd_Void_LCDGoTo(1,13);
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	6d e0       	ldi	r22, 0x0D	; 13
    464e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
                    H_Lcd_Void_LCDWriteString(" ");
    4652:	85 ec       	ldi	r24, 0xC5	; 197
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
    465a:	08 c0       	rjmp	.+16     	; 0x466c <LCD_Write_Speed+0x94>
                } 
            }
        }
        else
        {
            H_Lcd_Void_LCDGoTo(1,11);
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	6b e0       	ldi	r22, 0x0B	; 11
    4660:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteString("---");
    4664:	8f ec       	ldi	r24, 0xCF	; 207
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        }

    }
       

}
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <ADC_u16Mapping_mm>:

u16 ADC_u16Mapping_mm(void)
{
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
    467e:	2a 97       	sbiw	r28, 0x0a	; 10
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
    static u16 Speed_u16OLD=0;
    u32 Local_u16GetADC = 0;
    468a:	1d 82       	std	Y+5, r1	; 0x05
    468c:	1e 82       	std	Y+6, r1	; 0x06
    468e:	1f 82       	std	Y+7, r1	; 0x07
    4690:	18 86       	std	Y+8, r1	; 0x08
	/*read the ADC value*/
	Local_u16GetADC = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	0e 94 56 07 	call	0xeac	; 0xeac <M_ADC_U16_ADCRead>
    4698:	cc 01       	movw	r24, r24
    469a:	a0 e0       	ldi	r26, 0x00	; 0
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	8d 83       	std	Y+5, r24	; 0x05
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	af 83       	std	Y+7, r26	; 0x07
    46a4:	b8 87       	std	Y+8, r27	; 0x08
    /*map it from 0>> 1023 to 0 >> 2000km ( 1000) to aviod float operation  */
	u32 speed_val=((Local_u16GetADC * 4000 )/ 1023) ;
    46a6:	8d 81       	ldd	r24, Y+5	; 0x05
    46a8:	9e 81       	ldd	r25, Y+6	; 0x06
    46aa:	af 81       	ldd	r26, Y+7	; 0x07
    46ac:	b8 85       	ldd	r27, Y+8	; 0x08
    46ae:	20 ea       	ldi	r18, 0xA0	; 160
    46b0:	3f e0       	ldi	r19, 0x0F	; 15
    46b2:	40 e0       	ldi	r20, 0x00	; 0
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	bc 01       	movw	r22, r24
    46b8:	cd 01       	movw	r24, r26
    46ba:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulsi3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	2f ef       	ldi	r18, 0xFF	; 255
    46c4:	33 e0       	ldi	r19, 0x03	; 3
    46c6:	40 e0       	ldi	r20, 0x00	; 0
    46c8:	50 e0       	ldi	r21, 0x00	; 0
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 63 24 	call	0x48c6	; 0x48c6 <__udivmodsi4>
    46d2:	da 01       	movw	r26, r20
    46d4:	c9 01       	movw	r24, r18
    46d6:	89 83       	std	Y+1, r24	; 0x01
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	ab 83       	std	Y+3, r26	; 0x03
    46dc:	bc 83       	std	Y+4, r27	; 0x04
	if(speed_val>=200)
    46de:	89 81       	ldd	r24, Y+1	; 0x01
    46e0:	9a 81       	ldd	r25, Y+2	; 0x02
    46e2:	ab 81       	ldd	r26, Y+3	; 0x03
    46e4:	bc 81       	ldd	r27, Y+4	; 0x04
    46e6:	88 3c       	cpi	r24, 0xC8	; 200
    46e8:	91 05       	cpc	r25, r1
    46ea:	a1 05       	cpc	r26, r1
    46ec:	b1 05       	cpc	r27, r1
    46ee:	40 f0       	brcs	.+16     	; 0x4700 <ADC_u16Mapping_mm+0x8a>
    {
		speed_val=200;
    46f0:	88 ec       	ldi	r24, 0xC8	; 200
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	a0 e0       	ldi	r26, 0x00	; 0
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	9a 83       	std	Y+2, r25	; 0x02
    46fc:	ab 83       	std	Y+3, r26	; 0x03
    46fe:	bc 83       	std	Y+4, r27	; 0x04
	}
    if( abs(speed_val - Speed_u16OLD)>SPEED_TOLERANCE )
    4700:	80 91 17 02 	lds	r24, 0x0217
    4704:	90 91 18 02 	lds	r25, 0x0218
    4708:	9c 01       	movw	r18, r24
    470a:	40 e0       	ldi	r20, 0x00	; 0
    470c:	50 e0       	ldi	r21, 0x00	; 0
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	9a 81       	ldd	r25, Y+2	; 0x02
    4712:	ab 81       	ldd	r26, Y+3	; 0x03
    4714:	bc 81       	ldd	r27, Y+4	; 0x04
    4716:	82 1b       	sub	r24, r18
    4718:	93 0b       	sbc	r25, r19
    471a:	a4 0b       	sbc	r26, r20
    471c:	b5 0b       	sbc	r27, r21
    471e:	9a 87       	std	Y+10, r25	; 0x0a
    4720:	89 87       	std	Y+9, r24	; 0x09
    4722:	89 85       	ldd	r24, Y+9	; 0x09
    4724:	9a 85       	ldd	r25, Y+10	; 0x0a
    4726:	99 23       	and	r25, r25
    4728:	3c f4       	brge	.+14     	; 0x4738 <ADC_u16Mapping_mm+0xc2>
    472a:	89 85       	ldd	r24, Y+9	; 0x09
    472c:	9a 85       	ldd	r25, Y+10	; 0x0a
    472e:	90 95       	com	r25
    4730:	81 95       	neg	r24
    4732:	9f 4f       	sbci	r25, 0xFF	; 255
    4734:	9a 87       	std	Y+10, r25	; 0x0a
    4736:	89 87       	std	Y+9, r24	; 0x09
    4738:	89 85       	ldd	r24, Y+9	; 0x09
    473a:	9a 85       	ldd	r25, Y+10	; 0x0a
    473c:	8b 30       	cpi	r24, 0x0B	; 11
    473e:	91 05       	cpc	r25, r1
    4740:	14 f0       	brlt	.+4      	; 0x4746 <ADC_u16Mapping_mm+0xd0>
    {
        change_u8Flag =0;
    4742:	10 92 11 02 	sts	0x0211, r1
    }
    Speed_u16OLD = speed_val;
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	9a 81       	ldd	r25, Y+2	; 0x02
    474a:	90 93 18 02 	sts	0x0218, r25
    474e:	80 93 17 02 	sts	0x0217, r24
	return speed_val;
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4756:	2a 96       	adiw	r28, 0x0a	; 10
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <DM>:

void DM(void)
{
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    /*if driver sleep : green led*/
    if ((change_u8Flag>5)&&(gearState == 'D'))
    4770:	80 91 11 02 	lds	r24, 0x0211
    4774:	86 30       	cpi	r24, 0x06	; 6
    4776:	40 f0       	brcs	.+16     	; 0x4788 <DM+0x20>
    4778:	80 91 e8 01 	lds	r24, 0x01E8
    477c:	84 34       	cpi	r24, 0x44	; 68
    477e:	21 f4       	brne	.+8      	; 0x4788 <DM+0x20>
    {
        H_LED_Void_LedOn(LED_GRN);
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <H_LED_Void_LedOn>
    4786:	03 c0       	rjmp	.+6      	; 0x478e <DM+0x26>
    }
    else
    {
        H_LED_Void_LedOff(LED_GRN);
    4788:	83 e0       	ldi	r24, 0x03	; 3
    478a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <H_LED_Void_LedOff>
    }
}
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <Update_Time>:

void Update_Time(void)
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
	if(sec<59){
    479c:	80 91 15 02 	lds	r24, 0x0215
    47a0:	8b 33       	cpi	r24, 0x3B	; 59
    47a2:	30 f4       	brcc	.+12     	; 0x47b0 <Update_Time+0x1c>
		sec++;
    47a4:	80 91 15 02 	lds	r24, 0x0215
    47a8:	8f 5f       	subi	r24, 0xFF	; 255
    47aa:	80 93 15 02 	sts	0x0215, r24
    47ae:	07 c0       	rjmp	.+14     	; 0x47be <Update_Time+0x2a>
	}
	else{
		sec=0;
    47b0:	10 92 15 02 	sts	0x0215, r1
		mins++;
    47b4:	80 91 ec 01 	lds	r24, 0x01EC
    47b8:	8f 5f       	subi	r24, 0xFF	; 255
    47ba:	80 93 ec 01 	sts	0x01EC, r24
	}
	if(mins==60){
    47be:	80 91 ec 01 	lds	r24, 0x01EC
    47c2:	8c 33       	cpi	r24, 0x3C	; 60
    47c4:	39 f4       	brne	.+14     	; 0x47d4 <Update_Time+0x40>
		hours++;
    47c6:	80 91 eb 01 	lds	r24, 0x01EB
    47ca:	8f 5f       	subi	r24, 0xFF	; 255
    47cc:	80 93 eb 01 	sts	0x01EB, r24
		mins=0;
    47d0:	10 92 ec 01 	sts	0x01EC, r1
	}
	else
	{
		//
	}
	if(hours==24){
    47d4:	80 91 eb 01 	lds	r24, 0x01EB
    47d8:	88 31       	cpi	r24, 0x18	; 24
    47da:	11 f4       	brne	.+4      	; 0x47e0 <Update_Time+0x4c>
		hours=0;
    47dc:	10 92 eb 01 	sts	0x01EB, r1
	}
	else{
		//
	}
}
    47e0:	cf 91       	pop	r28
    47e2:	df 91       	pop	r29
    47e4:	08 95       	ret

000047e6 <Void_Write_Time>:

void Void_Write_Time(void)
{
    47e6:	df 93       	push	r29
    47e8:	cf 93       	push	r28
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    if(screen_u8Page == 4)
    47ee:	80 91 ea 01 	lds	r24, 0x01EA
    47f2:	84 30       	cpi	r24, 0x04	; 4
    47f4:	d1 f5       	brne	.+116    	; 0x486a <Void_Write_Time+0x84>
    {
        H_Lcd_Void_LCDGoTo(1,1);
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	61 e0       	ldi	r22, 0x01	; 1
    47fa:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString("18/3/24");
    47fe:	83 ed       	ldi	r24, 0xD3	; 211
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDGoTo(1,10);
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	6a e0       	ldi	r22, 0x0A	; 10
    480a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteNumber(hours);
    480e:	80 91 eb 01 	lds	r24, 0x01EB
    4812:	88 2f       	mov	r24, r24
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	a0 e0       	ldi	r26, 0x00	; 0
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	bc 01       	movw	r22, r24
    481c:	cd 01       	movw	r24, r26
    481e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
        H_Lcd_Void_LCDGoTo(1,12);
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	6c e0       	ldi	r22, 0x0C	; 12
    4826:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString(":");
    482a:	8b ed       	ldi	r24, 0xDB	; 219
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDWriteNumber(mins);
    4832:	80 91 ec 01 	lds	r24, 0x01EC
    4836:	88 2f       	mov	r24, r24
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	a0 e0       	ldi	r26, 0x00	; 0
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
        H_Lcd_Void_LCDGoTo(1,15);
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	6f e0       	ldi	r22, 0x0F	; 15
    484a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <H_Lcd_Void_LCDGoTo>
        H_Lcd_Void_LCDWriteString(":");
    484e:	8b ed       	ldi	r24, 0xDB	; 219
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 cc 14 	call	0x2998	; 0x2998 <H_Lcd_Void_LCDWriteString>
        H_Lcd_Void_LCDWriteNumber(sec);    
    4856:	80 91 15 02 	lds	r24, 0x0215
    485a:	88 2f       	mov	r24, r24
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	a0 e0       	ldi	r26, 0x00	; 0
    4860:	b0 e0       	ldi	r27, 0x00	; 0
    4862:	bc 01       	movw	r22, r24
    4864:	cd 01       	movw	r24, r26
    4866:	0e 94 01 15 	call	0x2a02	; 0x2a02 <H_Lcd_Void_LCDWriteNumber>
    }
	
}
    486a:	cf 91       	pop	r28
    486c:	df 91       	pop	r29
    486e:	08 95       	ret

00004870 <__mulsi3>:
    4870:	62 9f       	mul	r22, r18
    4872:	d0 01       	movw	r26, r0
    4874:	73 9f       	mul	r23, r19
    4876:	f0 01       	movw	r30, r0
    4878:	82 9f       	mul	r24, r18
    487a:	e0 0d       	add	r30, r0
    487c:	f1 1d       	adc	r31, r1
    487e:	64 9f       	mul	r22, r20
    4880:	e0 0d       	add	r30, r0
    4882:	f1 1d       	adc	r31, r1
    4884:	92 9f       	mul	r25, r18
    4886:	f0 0d       	add	r31, r0
    4888:	83 9f       	mul	r24, r19
    488a:	f0 0d       	add	r31, r0
    488c:	74 9f       	mul	r23, r20
    488e:	f0 0d       	add	r31, r0
    4890:	65 9f       	mul	r22, r21
    4892:	f0 0d       	add	r31, r0
    4894:	99 27       	eor	r25, r25
    4896:	72 9f       	mul	r23, r18
    4898:	b0 0d       	add	r27, r0
    489a:	e1 1d       	adc	r30, r1
    489c:	f9 1f       	adc	r31, r25
    489e:	63 9f       	mul	r22, r19
    48a0:	b0 0d       	add	r27, r0
    48a2:	e1 1d       	adc	r30, r1
    48a4:	f9 1f       	adc	r31, r25
    48a6:	bd 01       	movw	r22, r26
    48a8:	cf 01       	movw	r24, r30
    48aa:	11 24       	eor	r1, r1
    48ac:	08 95       	ret

000048ae <__udivmodqi4>:
    48ae:	99 1b       	sub	r25, r25
    48b0:	79 e0       	ldi	r23, 0x09	; 9
    48b2:	04 c0       	rjmp	.+8      	; 0x48bc <__udivmodqi4_ep>

000048b4 <__udivmodqi4_loop>:
    48b4:	99 1f       	adc	r25, r25
    48b6:	96 17       	cp	r25, r22
    48b8:	08 f0       	brcs	.+2      	; 0x48bc <__udivmodqi4_ep>
    48ba:	96 1b       	sub	r25, r22

000048bc <__udivmodqi4_ep>:
    48bc:	88 1f       	adc	r24, r24
    48be:	7a 95       	dec	r23
    48c0:	c9 f7       	brne	.-14     	; 0x48b4 <__udivmodqi4_loop>
    48c2:	80 95       	com	r24
    48c4:	08 95       	ret

000048c6 <__udivmodsi4>:
    48c6:	a1 e2       	ldi	r26, 0x21	; 33
    48c8:	1a 2e       	mov	r1, r26
    48ca:	aa 1b       	sub	r26, r26
    48cc:	bb 1b       	sub	r27, r27
    48ce:	fd 01       	movw	r30, r26
    48d0:	0d c0       	rjmp	.+26     	; 0x48ec <__udivmodsi4_ep>

000048d2 <__udivmodsi4_loop>:
    48d2:	aa 1f       	adc	r26, r26
    48d4:	bb 1f       	adc	r27, r27
    48d6:	ee 1f       	adc	r30, r30
    48d8:	ff 1f       	adc	r31, r31
    48da:	a2 17       	cp	r26, r18
    48dc:	b3 07       	cpc	r27, r19
    48de:	e4 07       	cpc	r30, r20
    48e0:	f5 07       	cpc	r31, r21
    48e2:	20 f0       	brcs	.+8      	; 0x48ec <__udivmodsi4_ep>
    48e4:	a2 1b       	sub	r26, r18
    48e6:	b3 0b       	sbc	r27, r19
    48e8:	e4 0b       	sbc	r30, r20
    48ea:	f5 0b       	sbc	r31, r21

000048ec <__udivmodsi4_ep>:
    48ec:	66 1f       	adc	r22, r22
    48ee:	77 1f       	adc	r23, r23
    48f0:	88 1f       	adc	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	1a 94       	dec	r1
    48f6:	69 f7       	brne	.-38     	; 0x48d2 <__udivmodsi4_loop>
    48f8:	60 95       	com	r22
    48fa:	70 95       	com	r23
    48fc:	80 95       	com	r24
    48fe:	90 95       	com	r25
    4900:	9b 01       	movw	r18, r22
    4902:	ac 01       	movw	r20, r24
    4904:	bd 01       	movw	r22, r26
    4906:	cf 01       	movw	r24, r30
    4908:	08 95       	ret

0000490a <__divmodsi4>:
    490a:	97 fb       	bst	r25, 7
    490c:	09 2e       	mov	r0, r25
    490e:	05 26       	eor	r0, r21
    4910:	0e d0       	rcall	.+28     	; 0x492e <__divmodsi4_neg1>
    4912:	57 fd       	sbrc	r21, 7
    4914:	04 d0       	rcall	.+8      	; 0x491e <__divmodsi4_neg2>
    4916:	d7 df       	rcall	.-82     	; 0x48c6 <__udivmodsi4>
    4918:	0a d0       	rcall	.+20     	; 0x492e <__divmodsi4_neg1>
    491a:	00 1c       	adc	r0, r0
    491c:	38 f4       	brcc	.+14     	; 0x492c <__divmodsi4_exit>

0000491e <__divmodsi4_neg2>:
    491e:	50 95       	com	r21
    4920:	40 95       	com	r20
    4922:	30 95       	com	r19
    4924:	21 95       	neg	r18
    4926:	3f 4f       	sbci	r19, 0xFF	; 255
    4928:	4f 4f       	sbci	r20, 0xFF	; 255
    492a:	5f 4f       	sbci	r21, 0xFF	; 255

0000492c <__divmodsi4_exit>:
    492c:	08 95       	ret

0000492e <__divmodsi4_neg1>:
    492e:	f6 f7       	brtc	.-4      	; 0x492c <__divmodsi4_exit>
    4930:	90 95       	com	r25
    4932:	80 95       	com	r24
    4934:	70 95       	com	r23
    4936:	61 95       	neg	r22
    4938:	7f 4f       	sbci	r23, 0xFF	; 255
    493a:	8f 4f       	sbci	r24, 0xFF	; 255
    493c:	9f 4f       	sbci	r25, 0xFF	; 255
    493e:	08 95       	ret

00004940 <__prologue_saves__>:
    4940:	2f 92       	push	r2
    4942:	3f 92       	push	r3
    4944:	4f 92       	push	r4
    4946:	5f 92       	push	r5
    4948:	6f 92       	push	r6
    494a:	7f 92       	push	r7
    494c:	8f 92       	push	r8
    494e:	9f 92       	push	r9
    4950:	af 92       	push	r10
    4952:	bf 92       	push	r11
    4954:	cf 92       	push	r12
    4956:	df 92       	push	r13
    4958:	ef 92       	push	r14
    495a:	ff 92       	push	r15
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	ca 1b       	sub	r28, r26
    496a:	db 0b       	sbc	r29, r27
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	f8 94       	cli
    4970:	de bf       	out	0x3e, r29	; 62
    4972:	0f be       	out	0x3f, r0	; 63
    4974:	cd bf       	out	0x3d, r28	; 61
    4976:	09 94       	ijmp

00004978 <__epilogue_restores__>:
    4978:	2a 88       	ldd	r2, Y+18	; 0x12
    497a:	39 88       	ldd	r3, Y+17	; 0x11
    497c:	48 88       	ldd	r4, Y+16	; 0x10
    497e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4980:	6e 84       	ldd	r6, Y+14	; 0x0e
    4982:	7d 84       	ldd	r7, Y+13	; 0x0d
    4984:	8c 84       	ldd	r8, Y+12	; 0x0c
    4986:	9b 84       	ldd	r9, Y+11	; 0x0b
    4988:	aa 84       	ldd	r10, Y+10	; 0x0a
    498a:	b9 84       	ldd	r11, Y+9	; 0x09
    498c:	c8 84       	ldd	r12, Y+8	; 0x08
    498e:	df 80       	ldd	r13, Y+7	; 0x07
    4990:	ee 80       	ldd	r14, Y+6	; 0x06
    4992:	fd 80       	ldd	r15, Y+5	; 0x05
    4994:	0c 81       	ldd	r16, Y+4	; 0x04
    4996:	1b 81       	ldd	r17, Y+3	; 0x03
    4998:	aa 81       	ldd	r26, Y+2	; 0x02
    499a:	b9 81       	ldd	r27, Y+1	; 0x01
    499c:	ce 0f       	add	r28, r30
    499e:	d1 1d       	adc	r29, r1
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	f8 94       	cli
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	cd bf       	out	0x3d, r28	; 61
    49aa:	ed 01       	movw	r28, r26
    49ac:	08 95       	ret

000049ae <_exit>:
    49ae:	f8 94       	cli

000049b0 <__stop_program>:
    49b0:	ff cf       	rjmp	.-2      	; 0x49b0 <__stop_program>
